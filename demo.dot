digraph G{
rankdir="LR";
"MODULE"[shape="box",fillcolor="white",style=filled];
"import datetime,type='import_statement'\nline_star:0,line_end:0|char_star:0,char_end:15"[shape="box",fillcolor="#f48b29",style=filled];
"MODULE"->"import datetime,type='import_statement'\nline_star:0,line_end:0|char_star:0,char_end:15";
"import io,type='import_statement'\nline_star:1,line_end:1|char_star:0,char_end:9"[shape="box",fillcolor="#f48b29",style=filled];
"MODULE"->"import io,type='import_statement'\nline_star:1,line_end:1|char_star:0,char_end:9";
"import uuid,type='import_statement'\nline_star:2,line_end:2|char_star:0,char_end:11"[shape="box",fillcolor="#f48b29",style=filled];
"MODULE"->"import uuid,type='import_statement'\nline_star:2,line_end:2|char_star:0,char_end:11";
"import pytest,type='import_statement'\nline_star:4,line_end:4|char_star:0,char_end:13"[shape="box",fillcolor="#f48b29",style=filled];
"MODULE"->"import pytest,type='import_statement'\nline_star:4,line_end:4|char_star:0,char_end:13";
"from werkzeug.http import http_date,type='import_from_statement'\nline_star:5,line_end:5|char_star:0,char_end:35"[shape="box",fillcolor="#f48b29",style=filled];
"MODULE"->"from werkzeug.http import http_date,type='import_from_statement'\nline_star:5,line_end:5|char_star:0,char_end:35";
"import flask,type='import_statement'\nline_star:7,line_end:7|char_star:0,char_end:12"[shape="box",fillcolor="#f48b29",style=filled];
"MODULE"->"import flask,type='import_statement'\nline_star:7,line_end:7|char_star:0,char_end:12";
"from flask import json,type='import_from_statement'\nline_star:8,line_end:8|char_star:0,char_end:22"[shape="box",fillcolor="#f48b29",style=filled];
"MODULE"->"from flask import json,type='import_from_statement'\nline_star:8,line_end:8|char_star:0,char_end:22";
"@pytest.mark.parametrize('debug', (True, False))\ndef test_bad_request_debug_message(app, client, debug):\n    app.config['DEBUG'] = debug\n    app.config['TRAP_BAD_REQUEST_ERRORS'] = False\n\n    @app.route('/json', methods=['POST'])\n    def post_json():\n        flask.request.get_json()\n        return None\n\n    rv = client.post('/json', data=None, content_type='application/json')\n    assert rv.status_code == 400\n    contains = b'Failed to decode JSON object' in rv.data\n    assert contains == debug,type='decorated_definition'\nline_star:11,line_end:24|char_star:0,char_end:28"[shape="box",fillcolor="#c8c6a7",style=filled];
"MODULE"->"@pytest.mark.parametrize('debug', (True, False))\ndef test_bad_request_debug_message(app, client, debug):\n    app.config['DEBUG'] = debug\n    app.config['TRAP_BAD_REQUEST_ERRORS'] = False\n\n    @app.route('/json', methods=['POST'])\n    def post_json():\n        flask.request.get_json()\n        return None\n\n    rv = client.post('/json', data=None, content_type='application/json')\n    assert rv.status_code == 400\n    contains = b'Failed to decode JSON object' in rv.data\n    assert contains == debug,type='decorated_definition'\nline_star:11,line_end:24|char_star:0,char_end:28";
"@pytest.mark.parametrize('debug', (True, False)),type='decorator'\nline_star:11,line_end:11|char_star:0,char_end:48"[shape="box",fillcolor="white",style=filled];
"@pytest.mark.parametrize('debug', (True, False))\ndef test_bad_request_debug_message(app, client, debug):\n    app.config['DEBUG'] = debug\n    app.config['TRAP_BAD_REQUEST_ERRORS'] = False\n\n    @app.route('/json', methods=['POST'])\n    def post_json():\n        flask.request.get_json()\n        return None\n\n    rv = client.post('/json', data=None, content_type='application/json')\n    assert rv.status_code == 400\n    contains = b'Failed to decode JSON object' in rv.data\n    assert contains == debug,type='decorated_definition'\nline_star:11,line_end:24|char_star:0,char_end:28"->"@pytest.mark.parametrize('debug', (True, False)),type='decorator'\nline_star:11,line_end:11|char_star:0,char_end:48";
"def test_bad_request_debug_message(app, client, debug):\n    app.config['DEBUG'] = debug\n    app.config['TRAP_BAD_REQUEST_ERRORS'] = False\n\n    @app.route('/json', methods=['POST'])\n    def post_json():\n        flask.request.get_json()\n        return None\n\n    rv = client.post('/json', data=None, content_type='application/json')\n    assert rv.status_code == 400\n    contains = b'Failed to decode JSON object' in rv.data\n    assert contains == debug,type='function_definition'\nline_star:12,line_end:24|char_star:0,char_end:28"[shape="box",fillcolor="#cee6b4",style=filled];
"@pytest.mark.parametrize('debug', (True, False))\ndef test_bad_request_debug_message(app, client, debug):\n    app.config['DEBUG'] = debug\n    app.config['TRAP_BAD_REQUEST_ERRORS'] = False\n\n    @app.route('/json', methods=['POST'])\n    def post_json():\n        flask.request.get_json()\n        return None\n\n    rv = client.post('/json', data=None, content_type='application/json')\n    assert rv.status_code == 400\n    contains = b'Failed to decode JSON object' in rv.data\n    assert contains == debug,type='decorated_definition'\nline_star:11,line_end:24|char_star:0,char_end:28"->"def test_bad_request_debug_message(app, client, debug):\n    app.config['DEBUG'] = debug\n    app.config['TRAP_BAD_REQUEST_ERRORS'] = False\n\n    @app.route('/json', methods=['POST'])\n    def post_json():\n        flask.request.get_json()\n        return None\n\n    rv = client.post('/json', data=None, content_type='application/json')\n    assert rv.status_code == 400\n    contains = b'Failed to decode JSON object' in rv.data\n    assert contains == debug,type='function_definition'\nline_star:12,line_end:24|char_star:0,char_end:28";
"test_bad_request_debug_message,type='identifier'\nline_star:12,line_end:12|char_star:4,char_end:34"[shape="point",fillcolor="#121013",style=filled];
"def test_bad_request_debug_message(app, client, debug):\n    app.config['DEBUG'] = debug\n    app.config['TRAP_BAD_REQUEST_ERRORS'] = False\n\n    @app.route('/json', methods=['POST'])\n    def post_json():\n        flask.request.get_json()\n        return None\n\n    rv = client.post('/json', data=None, content_type='application/json')\n    assert rv.status_code == 400\n    contains = b'Failed to decode JSON object' in rv.data\n    assert contains == debug,type='function_definition'\nline_star:12,line_end:24|char_star:0,char_end:28"->"test_bad_request_debug_message,type='identifier'\nline_star:12,line_end:12|char_star:4,char_end:34";
"(app, client, debug),type='parameters'\nline_star:12,line_end:12|char_star:34,char_end:54"[shape="box",fillcolor="white",style=filled];
"def test_bad_request_debug_message(app, client, debug):\n    app.config['DEBUG'] = debug\n    app.config['TRAP_BAD_REQUEST_ERRORS'] = False\n\n    @app.route('/json', methods=['POST'])\n    def post_json():\n        flask.request.get_json()\n        return None\n\n    rv = client.post('/json', data=None, content_type='application/json')\n    assert rv.status_code == 400\n    contains = b'Failed to decode JSON object' in rv.data\n    assert contains == debug,type='function_definition'\nline_star:12,line_end:24|char_star:0,char_end:28"->"(app, client, debug),type='parameters'\nline_star:12,line_end:12|char_star:34,char_end:54";
"app,type='identifier'\nline_star:12,line_end:12|char_star:35,char_end:38"[shape="point",fillcolor="#121013",style=filled];
"(app, client, debug),type='parameters'\nline_star:12,line_end:12|char_star:34,char_end:54"->"app,type='identifier'\nline_star:12,line_end:12|char_star:35,char_end:38";
"client,type='identifier'\nline_star:12,line_end:12|char_star:40,char_end:46"[shape="point",fillcolor="#121013",style=filled];
"(app, client, debug),type='parameters'\nline_star:12,line_end:12|char_star:34,char_end:54"->"client,type='identifier'\nline_star:12,line_end:12|char_star:40,char_end:46";
"debug,type='identifier'\nline_star:12,line_end:12|char_star:48,char_end:53"[shape="point",fillcolor="#121013",style=filled];
"(app, client, debug),type='parameters'\nline_star:12,line_end:12|char_star:34,char_end:54"->"debug,type='identifier'\nline_star:12,line_end:12|char_star:48,char_end:53";
"type='INFORMATION BLOCK'\nline_star:13,line_end:24|char_star:4,char_end:28"[shape="point",fillcolor="#121013",style=filled];
"def test_bad_request_debug_message(app, client, debug):\n    app.config['DEBUG'] = debug\n    app.config['TRAP_BAD_REQUEST_ERRORS'] = False\n\n    @app.route('/json', methods=['POST'])\n    def post_json():\n        flask.request.get_json()\n        return None\n\n    rv = client.post('/json', data=None, content_type='application/json')\n    assert rv.status_code == 400\n    contains = b'Failed to decode JSON object' in rv.data\n    assert contains == debug,type='function_definition'\nline_star:12,line_end:24|char_star:0,char_end:28"->"type='INFORMATION BLOCK'\nline_star:13,line_end:24|char_star:4,char_end:28";
"@app.route('/json', methods=['POST'])\n    def post_json():\n        flask.request.get_json()\n        return None,type='decorated_definition'\nline_star:16,line_end:19|char_star:4,char_end:19"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:13,line_end:24|char_star:4,char_end:28"->"@app.route('/json', methods=['POST'])\n    def post_json():\n        flask.request.get_json()\n        return None,type='decorated_definition'\nline_star:16,line_end:19|char_star:4,char_end:19";
"@app.route('/json', methods=['POST']),type='decorator'\nline_star:16,line_end:16|char_star:4,char_end:41"[shape="box",fillcolor="white",style=filled];
"@app.route('/json', methods=['POST'])\n    def post_json():\n        flask.request.get_json()\n        return None,type='decorated_definition'\nline_star:16,line_end:19|char_star:4,char_end:19"->"@app.route('/json', methods=['POST']),type='decorator'\nline_star:16,line_end:16|char_star:4,char_end:41";
"def post_json():\n        flask.request.get_json()\n        return None,type='function_definition'\nline_star:17,line_end:19|char_star:4,char_end:19"[shape="box",fillcolor="#cee6b4",style=filled];
"@app.route('/json', methods=['POST'])\n    def post_json():\n        flask.request.get_json()\n        return None,type='decorated_definition'\nline_star:16,line_end:19|char_star:4,char_end:19"->"def post_json():\n        flask.request.get_json()\n        return None,type='function_definition'\nline_star:17,line_end:19|char_star:4,char_end:19";
"post_json,type='identifier'\nline_star:17,line_end:17|char_star:8,char_end:17"[shape="point",fillcolor="#121013",style=filled];
"def post_json():\n        flask.request.get_json()\n        return None,type='function_definition'\nline_star:17,line_end:19|char_star:4,char_end:19"->"post_json,type='identifier'\nline_star:17,line_end:17|char_star:8,char_end:17";
"type='INFORMATION BLOCK'\nline_star:18,line_end:19|char_star:8,char_end:19"[shape="point",fillcolor="#121013",style=filled];
"def post_json():\n        flask.request.get_json()\n        return None,type='function_definition'\nline_star:17,line_end:19|char_star:4,char_end:19"->"type='INFORMATION BLOCK'\nline_star:18,line_end:19|char_star:8,char_end:19";
"return None,type='return_statement'\nline_star:19,line_end:19|char_star:8,char_end:19"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:18,line_end:19|char_star:8,char_end:19"->"return None,type='return_statement'\nline_star:19,line_end:19|char_star:8,char_end:19";
"assert rv.status_code == 400,type='assert_statement'\nline_star:22,line_end:22|char_star:4,char_end:32"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:13,line_end:24|char_star:4,char_end:28"->"assert rv.status_code == 400,type='assert_statement'\nline_star:22,line_end:22|char_star:4,char_end:32";
"rv.status_code == 400,type='comparison_operator'\nline_star:22,line_end:22|char_star:11,char_end:32"[shape="box",fillcolor="white",style=filled];
"assert rv.status_code == 400,type='assert_statement'\nline_star:22,line_end:22|char_star:4,char_end:32"->"rv.status_code == 400,type='comparison_operator'\nline_star:22,line_end:22|char_star:11,char_end:32";
"rv.status_code,type='attribute'\nline_star:22,line_end:22|char_star:11,char_end:25"[shape="box",fillcolor="white",style=filled];
"rv.status_code == 400,type='comparison_operator'\nline_star:22,line_end:22|char_star:11,char_end:32"->"rv.status_code,type='attribute'\nline_star:22,line_end:22|char_star:11,char_end:25";
"rv,type='identifier'\nline_star:22,line_end:22|char_star:11,char_end:13"[shape="point",fillcolor="#121013",style=filled];
"rv.status_code,type='attribute'\nline_star:22,line_end:22|char_star:11,char_end:25"->"rv,type='identifier'\nline_star:22,line_end:22|char_star:11,char_end:13";
"status_code,type='identifier'\nline_star:22,line_end:22|char_star:14,char_end:25"[shape="point",fillcolor="#121013",style=filled];
"rv.status_code,type='attribute'\nline_star:22,line_end:22|char_star:11,char_end:25"->"status_code,type='identifier'\nline_star:22,line_end:22|char_star:14,char_end:25";
"assert contains == debug,type='assert_statement'\nline_star:24,line_end:24|char_star:4,char_end:28"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:13,line_end:24|char_star:4,char_end:28"->"assert contains == debug,type='assert_statement'\nline_star:24,line_end:24|char_star:4,char_end:28";
"contains == debug,type='comparison_operator'\nline_star:24,line_end:24|char_star:11,char_end:28"[shape="box",fillcolor="white",style=filled];
"assert contains == debug,type='assert_statement'\nline_star:24,line_end:24|char_star:4,char_end:28"->"contains == debug,type='comparison_operator'\nline_star:24,line_end:24|char_star:11,char_end:28";
"contains,type='identifier'\nline_star:24,line_end:24|char_star:11,char_end:19"[shape="point",fillcolor="#121013",style=filled];
"contains == debug,type='comparison_operator'\nline_star:24,line_end:24|char_star:11,char_end:28"->"contains,type='identifier'\nline_star:24,line_end:24|char_star:11,char_end:19";
"debug,type='identifier'\nline_star:24,line_end:24|char_star:23,char_end:28"[shape="point",fillcolor="#121013",style=filled];
"contains == debug,type='comparison_operator'\nline_star:24,line_end:24|char_star:11,char_end:28"->"debug,type='identifier'\nline_star:24,line_end:24|char_star:23,char_end:28";
"def test_json_bad_requests(app, client):\n    @app.route('/json', methods=['POST'])\n    def return_json():\n        return flask.jsonify(foo=str(flask.request.get_json()))\n\n    rv = client.post('/json', data='malformed', content_type='application/json')\n    assert rv.status_code == 400,type='function_definition'\nline_star:27,line_end:33|char_star:0,char_end:32"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_json_bad_requests(app, client):\n    @app.route('/json', methods=['POST'])\n    def return_json():\n        return flask.jsonify(foo=str(flask.request.get_json()))\n\n    rv = client.post('/json', data='malformed', content_type='application/json')\n    assert rv.status_code == 400,type='function_definition'\nline_star:27,line_end:33|char_star:0,char_end:32";
"test_json_bad_requests,type='identifier'\nline_star:27,line_end:27|char_star:4,char_end:26"[shape="point",fillcolor="#121013",style=filled];
"def test_json_bad_requests(app, client):\n    @app.route('/json', methods=['POST'])\n    def return_json():\n        return flask.jsonify(foo=str(flask.request.get_json()))\n\n    rv = client.post('/json', data='malformed', content_type='application/json')\n    assert rv.status_code == 400,type='function_definition'\nline_star:27,line_end:33|char_star:0,char_end:32"->"test_json_bad_requests,type='identifier'\nline_star:27,line_end:27|char_star:4,char_end:26";
"(app, client),type='parameters'\nline_star:27,line_end:27|char_star:26,char_end:39"[shape="box",fillcolor="white",style=filled];
"def test_json_bad_requests(app, client):\n    @app.route('/json', methods=['POST'])\n    def return_json():\n        return flask.jsonify(foo=str(flask.request.get_json()))\n\n    rv = client.post('/json', data='malformed', content_type='application/json')\n    assert rv.status_code == 400,type='function_definition'\nline_star:27,line_end:33|char_star:0,char_end:32"->"(app, client),type='parameters'\nline_star:27,line_end:27|char_star:26,char_end:39";
"app,type='identifier'\nline_star:27,line_end:27|char_star:27,char_end:30"[shape="point",fillcolor="#121013",style=filled];
"(app, client),type='parameters'\nline_star:27,line_end:27|char_star:26,char_end:39"->"app,type='identifier'\nline_star:27,line_end:27|char_star:27,char_end:30";
"client,type='identifier'\nline_star:27,line_end:27|char_star:32,char_end:38"[shape="point",fillcolor="#121013",style=filled];
"(app, client),type='parameters'\nline_star:27,line_end:27|char_star:26,char_end:39"->"client,type='identifier'\nline_star:27,line_end:27|char_star:32,char_end:38";
"type='INFORMATION BLOCK'\nline_star:28,line_end:33|char_star:4,char_end:32"[shape="point",fillcolor="#121013",style=filled];
"def test_json_bad_requests(app, client):\n    @app.route('/json', methods=['POST'])\n    def return_json():\n        return flask.jsonify(foo=str(flask.request.get_json()))\n\n    rv = client.post('/json', data='malformed', content_type='application/json')\n    assert rv.status_code == 400,type='function_definition'\nline_star:27,line_end:33|char_star:0,char_end:32"->"type='INFORMATION BLOCK'\nline_star:28,line_end:33|char_star:4,char_end:32";
"@app.route('/json', methods=['POST'])\n    def return_json():\n        return flask.jsonify(foo=str(flask.request.get_json())),type='decorated_definition'\nline_star:28,line_end:30|char_star:4,char_end:63"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:28,line_end:33|char_star:4,char_end:32"->"@app.route('/json', methods=['POST'])\n    def return_json():\n        return flask.jsonify(foo=str(flask.request.get_json())),type='decorated_definition'\nline_star:28,line_end:30|char_star:4,char_end:63";
"@app.route('/json', methods=['POST']),type='decorator'\nline_star:28,line_end:28|char_star:4,char_end:41"[shape="box",fillcolor="white",style=filled];
"@app.route('/json', methods=['POST'])\n    def return_json():\n        return flask.jsonify(foo=str(flask.request.get_json())),type='decorated_definition'\nline_star:28,line_end:30|char_star:4,char_end:63"->"@app.route('/json', methods=['POST']),type='decorator'\nline_star:28,line_end:28|char_star:4,char_end:41";
"def return_json():\n        return flask.jsonify(foo=str(flask.request.get_json())),type='function_definition'\nline_star:29,line_end:30|char_star:4,char_end:63"[shape="box",fillcolor="#cee6b4",style=filled];
"@app.route('/json', methods=['POST'])\n    def return_json():\n        return flask.jsonify(foo=str(flask.request.get_json())),type='decorated_definition'\nline_star:28,line_end:30|char_star:4,char_end:63"->"def return_json():\n        return flask.jsonify(foo=str(flask.request.get_json())),type='function_definition'\nline_star:29,line_end:30|char_star:4,char_end:63";
"return_json,type='identifier'\nline_star:29,line_end:29|char_star:8,char_end:19"[shape="point",fillcolor="#121013",style=filled];
"def return_json():\n        return flask.jsonify(foo=str(flask.request.get_json())),type='function_definition'\nline_star:29,line_end:30|char_star:4,char_end:63"->"return_json,type='identifier'\nline_star:29,line_end:29|char_star:8,char_end:19";
"type='INFORMATION BLOCK'\nline_star:30,line_end:30|char_star:8,char_end:63"[shape="point",fillcolor="#121013",style=filled];
"def return_json():\n        return flask.jsonify(foo=str(flask.request.get_json())),type='function_definition'\nline_star:29,line_end:30|char_star:4,char_end:63"->"type='INFORMATION BLOCK'\nline_star:30,line_end:30|char_star:8,char_end:63";
"return flask.jsonify(foo=str(flask.request.get_json())),type='return_statement'\nline_star:30,line_end:30|char_star:8,char_end:63"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:30,line_end:30|char_star:8,char_end:63"->"return flask.jsonify(foo=str(flask.request.get_json())),type='return_statement'\nline_star:30,line_end:30|char_star:8,char_end:63";
"assert rv.status_code == 400,type='assert_statement'\nline_star:33,line_end:33|char_star:4,char_end:32"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:28,line_end:33|char_star:4,char_end:32"->"assert rv.status_code == 400,type='assert_statement'\nline_star:33,line_end:33|char_star:4,char_end:32";
"rv.status_code == 400,type='comparison_operator'\nline_star:33,line_end:33|char_star:11,char_end:32"[shape="box",fillcolor="white",style=filled];
"assert rv.status_code == 400,type='assert_statement'\nline_star:33,line_end:33|char_star:4,char_end:32"->"rv.status_code == 400,type='comparison_operator'\nline_star:33,line_end:33|char_star:11,char_end:32";
"rv.status_code,type='attribute'\nline_star:33,line_end:33|char_star:11,char_end:25"[shape="box",fillcolor="white",style=filled];
"rv.status_code == 400,type='comparison_operator'\nline_star:33,line_end:33|char_star:11,char_end:32"->"rv.status_code,type='attribute'\nline_star:33,line_end:33|char_star:11,char_end:25";
"rv,type='identifier'\nline_star:33,line_end:33|char_star:11,char_end:13"[shape="point",fillcolor="#121013",style=filled];
"rv.status_code,type='attribute'\nline_star:33,line_end:33|char_star:11,char_end:25"->"rv,type='identifier'\nline_star:33,line_end:33|char_star:11,char_end:13";
"status_code,type='identifier'\nline_star:33,line_end:33|char_star:14,char_end:25"[shape="point",fillcolor="#121013",style=filled];
"rv.status_code,type='attribute'\nline_star:33,line_end:33|char_star:11,char_end:25"->"status_code,type='identifier'\nline_star:33,line_end:33|char_star:14,char_end:25";
"def test_json_custom_mimetypes(app, client):\n    @app.route('/json', methods=['POST'])\n    def return_json():\n        return flask.request.get_json()\n\n    rv = client.post('/json', data=''foo'', content_type='application/x+json')\n    assert rv.data == b'foo',type='function_definition'\nline_star:36,line_end:42|char_star:0,char_end:28"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_json_custom_mimetypes(app, client):\n    @app.route('/json', methods=['POST'])\n    def return_json():\n        return flask.request.get_json()\n\n    rv = client.post('/json', data=''foo'', content_type='application/x+json')\n    assert rv.data == b'foo',type='function_definition'\nline_star:36,line_end:42|char_star:0,char_end:28";
"test_json_custom_mimetypes,type='identifier'\nline_star:36,line_end:36|char_star:4,char_end:30"[shape="point",fillcolor="#121013",style=filled];
"def test_json_custom_mimetypes(app, client):\n    @app.route('/json', methods=['POST'])\n    def return_json():\n        return flask.request.get_json()\n\n    rv = client.post('/json', data=''foo'', content_type='application/x+json')\n    assert rv.data == b'foo',type='function_definition'\nline_star:36,line_end:42|char_star:0,char_end:28"->"test_json_custom_mimetypes,type='identifier'\nline_star:36,line_end:36|char_star:4,char_end:30";
"(app, client),type='parameters'\nline_star:36,line_end:36|char_star:30,char_end:43"[shape="box",fillcolor="white",style=filled];
"def test_json_custom_mimetypes(app, client):\n    @app.route('/json', methods=['POST'])\n    def return_json():\n        return flask.request.get_json()\n\n    rv = client.post('/json', data=''foo'', content_type='application/x+json')\n    assert rv.data == b'foo',type='function_definition'\nline_star:36,line_end:42|char_star:0,char_end:28"->"(app, client),type='parameters'\nline_star:36,line_end:36|char_star:30,char_end:43";
"app,type='identifier'\nline_star:36,line_end:36|char_star:31,char_end:34"[shape="point",fillcolor="#121013",style=filled];
"(app, client),type='parameters'\nline_star:36,line_end:36|char_star:30,char_end:43"->"app,type='identifier'\nline_star:36,line_end:36|char_star:31,char_end:34";
"client,type='identifier'\nline_star:36,line_end:36|char_star:36,char_end:42"[shape="point",fillcolor="#121013",style=filled];
"(app, client),type='parameters'\nline_star:36,line_end:36|char_star:30,char_end:43"->"client,type='identifier'\nline_star:36,line_end:36|char_star:36,char_end:42";
"type='INFORMATION BLOCK'\nline_star:37,line_end:42|char_star:4,char_end:28"[shape="point",fillcolor="#121013",style=filled];
"def test_json_custom_mimetypes(app, client):\n    @app.route('/json', methods=['POST'])\n    def return_json():\n        return flask.request.get_json()\n\n    rv = client.post('/json', data=''foo'', content_type='application/x+json')\n    assert rv.data == b'foo',type='function_definition'\nline_star:36,line_end:42|char_star:0,char_end:28"->"type='INFORMATION BLOCK'\nline_star:37,line_end:42|char_star:4,char_end:28";
"@app.route('/json', methods=['POST'])\n    def return_json():\n        return flask.request.get_json(),type='decorated_definition'\nline_star:37,line_end:39|char_star:4,char_end:39"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:37,line_end:42|char_star:4,char_end:28"->"@app.route('/json', methods=['POST'])\n    def return_json():\n        return flask.request.get_json(),type='decorated_definition'\nline_star:37,line_end:39|char_star:4,char_end:39";
"@app.route('/json', methods=['POST']),type='decorator'\nline_star:37,line_end:37|char_star:4,char_end:41"[shape="box",fillcolor="white",style=filled];
"@app.route('/json', methods=['POST'])\n    def return_json():\n        return flask.request.get_json(),type='decorated_definition'\nline_star:37,line_end:39|char_star:4,char_end:39"->"@app.route('/json', methods=['POST']),type='decorator'\nline_star:37,line_end:37|char_star:4,char_end:41";
"def return_json():\n        return flask.request.get_json(),type='function_definition'\nline_star:38,line_end:39|char_star:4,char_end:39"[shape="box",fillcolor="#cee6b4",style=filled];
"@app.route('/json', methods=['POST'])\n    def return_json():\n        return flask.request.get_json(),type='decorated_definition'\nline_star:37,line_end:39|char_star:4,char_end:39"->"def return_json():\n        return flask.request.get_json(),type='function_definition'\nline_star:38,line_end:39|char_star:4,char_end:39";
"return_json,type='identifier'\nline_star:38,line_end:38|char_star:8,char_end:19"[shape="point",fillcolor="#121013",style=filled];
"def return_json():\n        return flask.request.get_json(),type='function_definition'\nline_star:38,line_end:39|char_star:4,char_end:39"->"return_json,type='identifier'\nline_star:38,line_end:38|char_star:8,char_end:19";
"type='INFORMATION BLOCK'\nline_star:39,line_end:39|char_star:8,char_end:39"[shape="point",fillcolor="#121013",style=filled];
"def return_json():\n        return flask.request.get_json(),type='function_definition'\nline_star:38,line_end:39|char_star:4,char_end:39"->"type='INFORMATION BLOCK'\nline_star:39,line_end:39|char_star:8,char_end:39";
"return flask.request.get_json(),type='return_statement'\nline_star:39,line_end:39|char_star:8,char_end:39"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:39,line_end:39|char_star:8,char_end:39"->"return flask.request.get_json(),type='return_statement'\nline_star:39,line_end:39|char_star:8,char_end:39";
"assert rv.data == b'foo',type='assert_statement'\nline_star:42,line_end:42|char_star:4,char_end:28"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:37,line_end:42|char_star:4,char_end:28"->"assert rv.data == b'foo',type='assert_statement'\nline_star:42,line_end:42|char_star:4,char_end:28";
"rv.data == b'foo',type='comparison_operator'\nline_star:42,line_end:42|char_star:11,char_end:28"[shape="box",fillcolor="white",style=filled];
"assert rv.data == b'foo',type='assert_statement'\nline_star:42,line_end:42|char_star:4,char_end:28"->"rv.data == b'foo',type='comparison_operator'\nline_star:42,line_end:42|char_star:11,char_end:28";
"rv.data,type='attribute'\nline_star:42,line_end:42|char_star:11,char_end:18"[shape="box",fillcolor="white",style=filled];
"rv.data == b'foo',type='comparison_operator'\nline_star:42,line_end:42|char_star:11,char_end:28"->"rv.data,type='attribute'\nline_star:42,line_end:42|char_star:11,char_end:18";
"rv,type='identifier'\nline_star:42,line_end:42|char_star:11,char_end:13"[shape="point",fillcolor="#121013",style=filled];
"rv.data,type='attribute'\nline_star:42,line_end:42|char_star:11,char_end:18"->"rv,type='identifier'\nline_star:42,line_end:42|char_star:11,char_end:13";
"data,type='identifier'\nline_star:42,line_end:42|char_star:14,char_end:18"[shape="point",fillcolor="#121013",style=filled];
"rv.data,type='attribute'\nline_star:42,line_end:42|char_star:11,char_end:18"->"data,type='identifier'\nline_star:42,line_end:42|char_star:14,char_end:18";
"@pytest.mark.parametrize(\n    'test_value,expected', [(True, ''\\u2603''), (False, ''\u2603'')]\n)\ndef test_json_as_unicode(test_value, expected, app, app_ctx):\n\n    app.config['JSON_AS_ASCII'] = test_value\n    rv = flask.json.dumps('\N{SNOWMAN}')\n    assert rv == expected,type='decorated_definition'\nline_star:45,line_end:52|char_star:0,char_end:25"[shape="box",fillcolor="#c8c6a7",style=filled];
"MODULE"->"@pytest.mark.parametrize(\n    'test_value,expected', [(True, ''\\u2603''), (False, ''\u2603'')]\n)\ndef test_json_as_unicode(test_value, expected, app, app_ctx):\n\n    app.config['JSON_AS_ASCII'] = test_value\n    rv = flask.json.dumps('\N{SNOWMAN}')\n    assert rv == expected,type='decorated_definition'\nline_star:45,line_end:52|char_star:0,char_end:25";
"@pytest.mark.parametrize(\n    'test_value,expected', [(True, ''\\u2603''), (False, ''\u2603'')]\n),type='decorator'\nline_star:45,line_end:47|char_star:0,char_end:1"[shape="box",fillcolor="white",style=filled];
"@pytest.mark.parametrize(\n    'test_value,expected', [(True, ''\\u2603''), (False, ''\u2603'')]\n)\ndef test_json_as_unicode(test_value, expected, app, app_ctx):\n\n    app.config['JSON_AS_ASCII'] = test_value\n    rv = flask.json.dumps('\N{SNOWMAN}')\n    assert rv == expected,type='decorated_definition'\nline_star:45,line_end:52|char_star:0,char_end:25"->"@pytest.mark.parametrize(\n    'test_value,expected', [(True, ''\\u2603''), (False, ''\u2603'')]\n),type='decorator'\nline_star:45,line_end:47|char_star:0,char_end:1";
"def test_json_as_unicode(test_value, expected, app, app_ctx):\n\n    app.config['JSON_AS_ASCII'] = test_value\n    rv = flask.json.dumps('\N{SNOWMAN}')\n    assert rv == expected,type='function_definition'\nline_star:48,line_end:52|char_star:0,char_end:25"[shape="box",fillcolor="#cee6b4",style=filled];
"@pytest.mark.parametrize(\n    'test_value,expected', [(True, ''\\u2603''), (False, ''\u2603'')]\n)\ndef test_json_as_unicode(test_value, expected, app, app_ctx):\n\n    app.config['JSON_AS_ASCII'] = test_value\n    rv = flask.json.dumps('\N{SNOWMAN}')\n    assert rv == expected,type='decorated_definition'\nline_star:45,line_end:52|char_star:0,char_end:25"->"def test_json_as_unicode(test_value, expected, app, app_ctx):\n\n    app.config['JSON_AS_ASCII'] = test_value\n    rv = flask.json.dumps('\N{SNOWMAN}')\n    assert rv == expected,type='function_definition'\nline_star:48,line_end:52|char_star:0,char_end:25";
"test_json_as_unicode,type='identifier'\nline_star:48,line_end:48|char_star:4,char_end:24"[shape="point",fillcolor="#121013",style=filled];
"def test_json_as_unicode(test_value, expected, app, app_ctx):\n\n    app.config['JSON_AS_ASCII'] = test_value\n    rv = flask.json.dumps('\N{SNOWMAN}')\n    assert rv == expected,type='function_definition'\nline_star:48,line_end:52|char_star:0,char_end:25"->"test_json_as_unicode,type='identifier'\nline_star:48,line_end:48|char_star:4,char_end:24";
"(test_value, expected, app, app_ctx),type='parameters'\nline_star:48,line_end:48|char_star:24,char_end:60"[shape="box",fillcolor="white",style=filled];
"def test_json_as_unicode(test_value, expected, app, app_ctx):\n\n    app.config['JSON_AS_ASCII'] = test_value\n    rv = flask.json.dumps('\N{SNOWMAN}')\n    assert rv == expected,type='function_definition'\nline_star:48,line_end:52|char_star:0,char_end:25"->"(test_value, expected, app, app_ctx),type='parameters'\nline_star:48,line_end:48|char_star:24,char_end:60";
"test_value,type='identifier'\nline_star:48,line_end:48|char_star:25,char_end:35"[shape="point",fillcolor="#121013",style=filled];
"(test_value, expected, app, app_ctx),type='parameters'\nline_star:48,line_end:48|char_star:24,char_end:60"->"test_value,type='identifier'\nline_star:48,line_end:48|char_star:25,char_end:35";
"expected,type='identifier'\nline_star:48,line_end:48|char_star:37,char_end:45"[shape="point",fillcolor="#121013",style=filled];
"(test_value, expected, app, app_ctx),type='parameters'\nline_star:48,line_end:48|char_star:24,char_end:60"->"expected,type='identifier'\nline_star:48,line_end:48|char_star:37,char_end:45";
"app,type='identifier'\nline_star:48,line_end:48|char_star:47,char_end:50"[shape="point",fillcolor="#121013",style=filled];
"(test_value, expected, app, app_ctx),type='parameters'\nline_star:48,line_end:48|char_star:24,char_end:60"->"app,type='identifier'\nline_star:48,line_end:48|char_star:47,char_end:50";
"app_ctx,type='identifier'\nline_star:48,line_end:48|char_star:52,char_end:59"[shape="point",fillcolor="#121013",style=filled];
"(test_value, expected, app, app_ctx),type='parameters'\nline_star:48,line_end:48|char_star:24,char_end:60"->"app_ctx,type='identifier'\nline_star:48,line_end:48|char_star:52,char_end:59";
"type='INFORMATION BLOCK'\nline_star:50,line_end:52|char_star:4,char_end:25"[shape="point",fillcolor="#121013",style=filled];
"def test_json_as_unicode(test_value, expected, app, app_ctx):\n\n    app.config['JSON_AS_ASCII'] = test_value\n    rv = flask.json.dumps('\N{SNOWMAN}')\n    assert rv == expected,type='function_definition'\nline_star:48,line_end:52|char_star:0,char_end:25"->"type='INFORMATION BLOCK'\nline_star:50,line_end:52|char_star:4,char_end:25";
"assert rv == expected,type='assert_statement'\nline_star:52,line_end:52|char_star:4,char_end:25"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:50,line_end:52|char_star:4,char_end:25"->"assert rv == expected,type='assert_statement'\nline_star:52,line_end:52|char_star:4,char_end:25";
"rv == expected,type='comparison_operator'\nline_star:52,line_end:52|char_star:11,char_end:25"[shape="box",fillcolor="white",style=filled];
"assert rv == expected,type='assert_statement'\nline_star:52,line_end:52|char_star:4,char_end:25"->"rv == expected,type='comparison_operator'\nline_star:52,line_end:52|char_star:11,char_end:25";
"rv,type='identifier'\nline_star:52,line_end:52|char_star:11,char_end:13"[shape="point",fillcolor="#121013",style=filled];
"rv == expected,type='comparison_operator'\nline_star:52,line_end:52|char_star:11,char_end:25"->"rv,type='identifier'\nline_star:52,line_end:52|char_star:11,char_end:13";
"expected,type='identifier'\nline_star:52,line_end:52|char_star:17,char_end:25"[shape="point",fillcolor="#121013",style=filled];
"rv == expected,type='comparison_operator'\nline_star:52,line_end:52|char_star:11,char_end:25"->"expected,type='identifier'\nline_star:52,line_end:52|char_star:17,char_end:25";
"def test_json_dump_to_file(app, app_ctx):\n    test_data = {'name': 'Flask'}\n    out = io.StringIO()\n\n    flask.json.dump(test_data, out)\n    out.seek(0)\n    rv = flask.json.load(out)\n    assert rv == test_data,type='function_definition'\nline_star:55,line_end:62|char_star:0,char_end:26"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_json_dump_to_file(app, app_ctx):\n    test_data = {'name': 'Flask'}\n    out = io.StringIO()\n\n    flask.json.dump(test_data, out)\n    out.seek(0)\n    rv = flask.json.load(out)\n    assert rv == test_data,type='function_definition'\nline_star:55,line_end:62|char_star:0,char_end:26";
"test_json_dump_to_file,type='identifier'\nline_star:55,line_end:55|char_star:4,char_end:26"[shape="point",fillcolor="#121013",style=filled];
"def test_json_dump_to_file(app, app_ctx):\n    test_data = {'name': 'Flask'}\n    out = io.StringIO()\n\n    flask.json.dump(test_data, out)\n    out.seek(0)\n    rv = flask.json.load(out)\n    assert rv == test_data,type='function_definition'\nline_star:55,line_end:62|char_star:0,char_end:26"->"test_json_dump_to_file,type='identifier'\nline_star:55,line_end:55|char_star:4,char_end:26";
"(app, app_ctx),type='parameters'\nline_star:55,line_end:55|char_star:26,char_end:40"[shape="box",fillcolor="white",style=filled];
"def test_json_dump_to_file(app, app_ctx):\n    test_data = {'name': 'Flask'}\n    out = io.StringIO()\n\n    flask.json.dump(test_data, out)\n    out.seek(0)\n    rv = flask.json.load(out)\n    assert rv == test_data,type='function_definition'\nline_star:55,line_end:62|char_star:0,char_end:26"->"(app, app_ctx),type='parameters'\nline_star:55,line_end:55|char_star:26,char_end:40";
"app,type='identifier'\nline_star:55,line_end:55|char_star:27,char_end:30"[shape="point",fillcolor="#121013",style=filled];
"(app, app_ctx),type='parameters'\nline_star:55,line_end:55|char_star:26,char_end:40"->"app,type='identifier'\nline_star:55,line_end:55|char_star:27,char_end:30";
"app_ctx,type='identifier'\nline_star:55,line_end:55|char_star:32,char_end:39"[shape="point",fillcolor="#121013",style=filled];
"(app, app_ctx),type='parameters'\nline_star:55,line_end:55|char_star:26,char_end:40"->"app_ctx,type='identifier'\nline_star:55,line_end:55|char_star:32,char_end:39";
"type='INFORMATION BLOCK'\nline_star:56,line_end:62|char_star:4,char_end:26"[shape="point",fillcolor="#121013",style=filled];
"def test_json_dump_to_file(app, app_ctx):\n    test_data = {'name': 'Flask'}\n    out = io.StringIO()\n\n    flask.json.dump(test_data, out)\n    out.seek(0)\n    rv = flask.json.load(out)\n    assert rv == test_data,type='function_definition'\nline_star:55,line_end:62|char_star:0,char_end:26"->"type='INFORMATION BLOCK'\nline_star:56,line_end:62|char_star:4,char_end:26";
"assert rv == test_data,type='assert_statement'\nline_star:62,line_end:62|char_star:4,char_end:26"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:56,line_end:62|char_star:4,char_end:26"->"assert rv == test_data,type='assert_statement'\nline_star:62,line_end:62|char_star:4,char_end:26";
"rv == test_data,type='comparison_operator'\nline_star:62,line_end:62|char_star:11,char_end:26"[shape="box",fillcolor="white",style=filled];
"assert rv == test_data,type='assert_statement'\nline_star:62,line_end:62|char_star:4,char_end:26"->"rv == test_data,type='comparison_operator'\nline_star:62,line_end:62|char_star:11,char_end:26";
"rv,type='identifier'\nline_star:62,line_end:62|char_star:11,char_end:13"[shape="point",fillcolor="#121013",style=filled];
"rv == test_data,type='comparison_operator'\nline_star:62,line_end:62|char_star:11,char_end:26"->"rv,type='identifier'\nline_star:62,line_end:62|char_star:11,char_end:13";
"test_data,type='identifier'\nline_star:62,line_end:62|char_star:17,char_end:26"[shape="point",fillcolor="#121013",style=filled];
"rv == test_data,type='comparison_operator'\nline_star:62,line_end:62|char_star:11,char_end:26"->"test_data,type='identifier'\nline_star:62,line_end:62|char_star:17,char_end:26";
"@pytest.mark.parametrize(\n    'test_value', [0, -1, 1, 23, 3.14, 's', 'longer string', True, False, None]\n)\ndef test_jsonify_basic_types(test_value, app, client):\n    url = '/jsonify_basic_types'\n    app.add_url_rule(url, url, lambda x=test_value: flask.jsonify(x))\n    rv = client.get(url)\n    assert rv.mimetype == 'application/json'\n    assert flask.json.loads(rv.data) == test_value,type='decorated_definition'\nline_star:65,line_end:73|char_star:0,char_end:50"[shape="box",fillcolor="#c8c6a7",style=filled];
"MODULE"->"@pytest.mark.parametrize(\n    'test_value', [0, -1, 1, 23, 3.14, 's', 'longer string', True, False, None]\n)\ndef test_jsonify_basic_types(test_value, app, client):\n    url = '/jsonify_basic_types'\n    app.add_url_rule(url, url, lambda x=test_value: flask.jsonify(x))\n    rv = client.get(url)\n    assert rv.mimetype == 'application/json'\n    assert flask.json.loads(rv.data) == test_value,type='decorated_definition'\nline_star:65,line_end:73|char_star:0,char_end:50";
"@pytest.mark.parametrize(\n    'test_value', [0, -1, 1, 23, 3.14, 's', 'longer string', True, False, None]\n),type='decorator'\nline_star:65,line_end:67|char_star:0,char_end:1"[shape="box",fillcolor="white",style=filled];
"@pytest.mark.parametrize(\n    'test_value', [0, -1, 1, 23, 3.14, 's', 'longer string', True, False, None]\n)\ndef test_jsonify_basic_types(test_value, app, client):\n    url = '/jsonify_basic_types'\n    app.add_url_rule(url, url, lambda x=test_value: flask.jsonify(x))\n    rv = client.get(url)\n    assert rv.mimetype == 'application/json'\n    assert flask.json.loads(rv.data) == test_value,type='decorated_definition'\nline_star:65,line_end:73|char_star:0,char_end:50"->"@pytest.mark.parametrize(\n    'test_value', [0, -1, 1, 23, 3.14, 's', 'longer string', True, False, None]\n),type='decorator'\nline_star:65,line_end:67|char_star:0,char_end:1";
"def test_jsonify_basic_types(test_value, app, client):\n    url = '/jsonify_basic_types'\n    app.add_url_rule(url, url, lambda x=test_value: flask.jsonify(x))\n    rv = client.get(url)\n    assert rv.mimetype == 'application/json'\n    assert flask.json.loads(rv.data) == test_value,type='function_definition'\nline_star:68,line_end:73|char_star:0,char_end:50"[shape="box",fillcolor="#cee6b4",style=filled];
"@pytest.mark.parametrize(\n    'test_value', [0, -1, 1, 23, 3.14, 's', 'longer string', True, False, None]\n)\ndef test_jsonify_basic_types(test_value, app, client):\n    url = '/jsonify_basic_types'\n    app.add_url_rule(url, url, lambda x=test_value: flask.jsonify(x))\n    rv = client.get(url)\n    assert rv.mimetype == 'application/json'\n    assert flask.json.loads(rv.data) == test_value,type='decorated_definition'\nline_star:65,line_end:73|char_star:0,char_end:50"->"def test_jsonify_basic_types(test_value, app, client):\n    url = '/jsonify_basic_types'\n    app.add_url_rule(url, url, lambda x=test_value: flask.jsonify(x))\n    rv = client.get(url)\n    assert rv.mimetype == 'application/json'\n    assert flask.json.loads(rv.data) == test_value,type='function_definition'\nline_star:68,line_end:73|char_star:0,char_end:50";
"test_jsonify_basic_types,type='identifier'\nline_star:68,line_end:68|char_star:4,char_end:28"[shape="point",fillcolor="#121013",style=filled];
"def test_jsonify_basic_types(test_value, app, client):\n    url = '/jsonify_basic_types'\n    app.add_url_rule(url, url, lambda x=test_value: flask.jsonify(x))\n    rv = client.get(url)\n    assert rv.mimetype == 'application/json'\n    assert flask.json.loads(rv.data) == test_value,type='function_definition'\nline_star:68,line_end:73|char_star:0,char_end:50"->"test_jsonify_basic_types,type='identifier'\nline_star:68,line_end:68|char_star:4,char_end:28";
"(test_value, app, client),type='parameters'\nline_star:68,line_end:68|char_star:28,char_end:53"[shape="box",fillcolor="white",style=filled];
"def test_jsonify_basic_types(test_value, app, client):\n    url = '/jsonify_basic_types'\n    app.add_url_rule(url, url, lambda x=test_value: flask.jsonify(x))\n    rv = client.get(url)\n    assert rv.mimetype == 'application/json'\n    assert flask.json.loads(rv.data) == test_value,type='function_definition'\nline_star:68,line_end:73|char_star:0,char_end:50"->"(test_value, app, client),type='parameters'\nline_star:68,line_end:68|char_star:28,char_end:53";
"test_value,type='identifier'\nline_star:68,line_end:68|char_star:29,char_end:39"[shape="point",fillcolor="#121013",style=filled];
"(test_value, app, client),type='parameters'\nline_star:68,line_end:68|char_star:28,char_end:53"->"test_value,type='identifier'\nline_star:68,line_end:68|char_star:29,char_end:39";
"app,type='identifier'\nline_star:68,line_end:68|char_star:41,char_end:44"[shape="point",fillcolor="#121013",style=filled];
"(test_value, app, client),type='parameters'\nline_star:68,line_end:68|char_star:28,char_end:53"->"app,type='identifier'\nline_star:68,line_end:68|char_star:41,char_end:44";
"client,type='identifier'\nline_star:68,line_end:68|char_star:46,char_end:52"[shape="point",fillcolor="#121013",style=filled];
"(test_value, app, client),type='parameters'\nline_star:68,line_end:68|char_star:28,char_end:53"->"client,type='identifier'\nline_star:68,line_end:68|char_star:46,char_end:52";
"type='INFORMATION BLOCK'\nline_star:69,line_end:73|char_star:4,char_end:50"[shape="point",fillcolor="#121013",style=filled];
"def test_jsonify_basic_types(test_value, app, client):\n    url = '/jsonify_basic_types'\n    app.add_url_rule(url, url, lambda x=test_value: flask.jsonify(x))\n    rv = client.get(url)\n    assert rv.mimetype == 'application/json'\n    assert flask.json.loads(rv.data) == test_value,type='function_definition'\nline_star:68,line_end:73|char_star:0,char_end:50"->"type='INFORMATION BLOCK'\nline_star:69,line_end:73|char_star:4,char_end:50";
"assert rv.mimetype == 'application/json',type='assert_statement'\nline_star:72,line_end:72|char_star:4,char_end:44"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:69,line_end:73|char_star:4,char_end:50"->"assert rv.mimetype == 'application/json',type='assert_statement'\nline_star:72,line_end:72|char_star:4,char_end:44";
"rv.mimetype == 'application/json',type='comparison_operator'\nline_star:72,line_end:72|char_star:11,char_end:44"[shape="box",fillcolor="white",style=filled];
"assert rv.mimetype == 'application/json',type='assert_statement'\nline_star:72,line_end:72|char_star:4,char_end:44"->"rv.mimetype == 'application/json',type='comparison_operator'\nline_star:72,line_end:72|char_star:11,char_end:44";
"rv.mimetype,type='attribute'\nline_star:72,line_end:72|char_star:11,char_end:22"[shape="box",fillcolor="white",style=filled];
"rv.mimetype == 'application/json',type='comparison_operator'\nline_star:72,line_end:72|char_star:11,char_end:44"->"rv.mimetype,type='attribute'\nline_star:72,line_end:72|char_star:11,char_end:22";
"rv,type='identifier'\nline_star:72,line_end:72|char_star:11,char_end:13"[shape="point",fillcolor="#121013",style=filled];
"rv.mimetype,type='attribute'\nline_star:72,line_end:72|char_star:11,char_end:22"->"rv,type='identifier'\nline_star:72,line_end:72|char_star:11,char_end:13";
"mimetype,type='identifier'\nline_star:72,line_end:72|char_star:14,char_end:22"[shape="point",fillcolor="#121013",style=filled];
"rv.mimetype,type='attribute'\nline_star:72,line_end:72|char_star:11,char_end:22"->"mimetype,type='identifier'\nline_star:72,line_end:72|char_star:14,char_end:22";
"assert flask.json.loads(rv.data) == test_value,type='assert_statement'\nline_star:73,line_end:73|char_star:4,char_end:50"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:69,line_end:73|char_star:4,char_end:50"->"assert flask.json.loads(rv.data) == test_value,type='assert_statement'\nline_star:73,line_end:73|char_star:4,char_end:50";
"flask.json.loads(rv.data) == test_value,type='comparison_operator'\nline_star:73,line_end:73|char_star:11,char_end:50"[shape="box",fillcolor="white",style=filled];
"assert flask.json.loads(rv.data) == test_value,type='assert_statement'\nline_star:73,line_end:73|char_star:4,char_end:50"->"flask.json.loads(rv.data) == test_value,type='comparison_operator'\nline_star:73,line_end:73|char_star:11,char_end:50";
"flask.json.loads(rv.data),type='call'\nline_star:73,line_end:73|char_star:11,char_end:36"[shape="box",fillcolor="white",style=filled];
"flask.json.loads(rv.data) == test_value,type='comparison_operator'\nline_star:73,line_end:73|char_star:11,char_end:50"->"flask.json.loads(rv.data),type='call'\nline_star:73,line_end:73|char_star:11,char_end:36";
"flask.json.loads,type='attribute'\nline_star:73,line_end:73|char_star:11,char_end:27"[shape="box",fillcolor="white",style=filled];
"flask.json.loads(rv.data),type='call'\nline_star:73,line_end:73|char_star:11,char_end:36"->"flask.json.loads,type='attribute'\nline_star:73,line_end:73|char_star:11,char_end:27";
"flask.json,type='attribute'\nline_star:73,line_end:73|char_star:11,char_end:21"[shape="box",fillcolor="white",style=filled];
"flask.json.loads,type='attribute'\nline_star:73,line_end:73|char_star:11,char_end:27"->"flask.json,type='attribute'\nline_star:73,line_end:73|char_star:11,char_end:21";
"flask,type='identifier'\nline_star:73,line_end:73|char_star:11,char_end:16"[shape="point",fillcolor="#121013",style=filled];
"flask.json,type='attribute'\nline_star:73,line_end:73|char_star:11,char_end:21"->"flask,type='identifier'\nline_star:73,line_end:73|char_star:11,char_end:16";
"json,type='identifier'\nline_star:73,line_end:73|char_star:17,char_end:21"[shape="point",fillcolor="#121013",style=filled];
"flask.json,type='attribute'\nline_star:73,line_end:73|char_star:11,char_end:21"->"json,type='identifier'\nline_star:73,line_end:73|char_star:17,char_end:21";
"loads,type='identifier'\nline_star:73,line_end:73|char_star:22,char_end:27"[shape="point",fillcolor="#121013",style=filled];
"flask.json.loads,type='attribute'\nline_star:73,line_end:73|char_star:11,char_end:27"->"loads,type='identifier'\nline_star:73,line_end:73|char_star:22,char_end:27";
"(rv.data),type='argument_list'\nline_star:73,line_end:73|char_star:27,char_end:36"[shape="box",fillcolor="white",style=filled];
"flask.json.loads(rv.data),type='call'\nline_star:73,line_end:73|char_star:11,char_end:36"->"(rv.data),type='argument_list'\nline_star:73,line_end:73|char_star:27,char_end:36";
"rv.data,type='attribute'\nline_star:73,line_end:73|char_star:28,char_end:35"[shape="box",fillcolor="white",style=filled];
"(rv.data),type='argument_list'\nline_star:73,line_end:73|char_star:27,char_end:36"->"rv.data,type='attribute'\nline_star:73,line_end:73|char_star:28,char_end:35";
"rv,type='identifier'\nline_star:73,line_end:73|char_star:28,char_end:30"[shape="point",fillcolor="#121013",style=filled];
"rv.data,type='attribute'\nline_star:73,line_end:73|char_star:28,char_end:35"->"rv,type='identifier'\nline_star:73,line_end:73|char_star:28,char_end:30";
"data,type='identifier'\nline_star:73,line_end:73|char_star:31,char_end:35"[shape="point",fillcolor="#121013",style=filled];
"rv.data,type='attribute'\nline_star:73,line_end:73|char_star:28,char_end:35"->"data,type='identifier'\nline_star:73,line_end:73|char_star:31,char_end:35";
"test_value,type='identifier'\nline_star:73,line_end:73|char_star:40,char_end:50"[shape="point",fillcolor="#121013",style=filled];
"flask.json.loads(rv.data) == test_value,type='comparison_operator'\nline_star:73,line_end:73|char_star:11,char_end:50"->"test_value,type='identifier'\nline_star:73,line_end:73|char_star:40,char_end:50";
"def test_jsonify_dicts(app, client):\n    d = {\n        'a': 0,\n        'b': 23,\n        'c': 3.14,\n        'd': 't',\n        'e': 'Hi',\n        'f': True,\n        'g': False,\n        'h': ['test list', 10, False],\n        'i': {'test': 'dict'},\n    }\n\n    @app.route('/kw')\n    def return_kwargs():\n        return flask.jsonify(**d)\n\n    @app.route('/dict')\n    def return_dict():\n        return flask.jsonify(d)\n\n    for url in '/kw', '/dict':\n        rv = client.get(url)\n        assert rv.mimetype == 'application/json'\n        assert flask.json.loads(rv.data) == d,type='function_definition'\nline_star:76,line_end:100|char_star:0,char_end:45"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_jsonify_dicts(app, client):\n    d = {\n        'a': 0,\n        'b': 23,\n        'c': 3.14,\n        'd': 't',\n        'e': 'Hi',\n        'f': True,\n        'g': False,\n        'h': ['test list', 10, False],\n        'i': {'test': 'dict'},\n    }\n\n    @app.route('/kw')\n    def return_kwargs():\n        return flask.jsonify(**d)\n\n    @app.route('/dict')\n    def return_dict():\n        return flask.jsonify(d)\n\n    for url in '/kw', '/dict':\n        rv = client.get(url)\n        assert rv.mimetype == 'application/json'\n        assert flask.json.loads(rv.data) == d,type='function_definition'\nline_star:76,line_end:100|char_star:0,char_end:45";
"test_jsonify_dicts,type='identifier'\nline_star:76,line_end:76|char_star:4,char_end:22"[shape="point",fillcolor="#121013",style=filled];
"def test_jsonify_dicts(app, client):\n    d = {\n        'a': 0,\n        'b': 23,\n        'c': 3.14,\n        'd': 't',\n        'e': 'Hi',\n        'f': True,\n        'g': False,\n        'h': ['test list', 10, False],\n        'i': {'test': 'dict'},\n    }\n\n    @app.route('/kw')\n    def return_kwargs():\n        return flask.jsonify(**d)\n\n    @app.route('/dict')\n    def return_dict():\n        return flask.jsonify(d)\n\n    for url in '/kw', '/dict':\n        rv = client.get(url)\n        assert rv.mimetype == 'application/json'\n        assert flask.json.loads(rv.data) == d,type='function_definition'\nline_star:76,line_end:100|char_star:0,char_end:45"->"test_jsonify_dicts,type='identifier'\nline_star:76,line_end:76|char_star:4,char_end:22";
"(app, client),type='parameters'\nline_star:76,line_end:76|char_star:22,char_end:35"[shape="box",fillcolor="white",style=filled];
"def test_jsonify_dicts(app, client):\n    d = {\n        'a': 0,\n        'b': 23,\n        'c': 3.14,\n        'd': 't',\n        'e': 'Hi',\n        'f': True,\n        'g': False,\n        'h': ['test list', 10, False],\n        'i': {'test': 'dict'},\n    }\n\n    @app.route('/kw')\n    def return_kwargs():\n        return flask.jsonify(**d)\n\n    @app.route('/dict')\n    def return_dict():\n        return flask.jsonify(d)\n\n    for url in '/kw', '/dict':\n        rv = client.get(url)\n        assert rv.mimetype == 'application/json'\n        assert flask.json.loads(rv.data) == d,type='function_definition'\nline_star:76,line_end:100|char_star:0,char_end:45"->"(app, client),type='parameters'\nline_star:76,line_end:76|char_star:22,char_end:35";
"app,type='identifier'\nline_star:76,line_end:76|char_star:23,char_end:26"[shape="point",fillcolor="#121013",style=filled];
"(app, client),type='parameters'\nline_star:76,line_end:76|char_star:22,char_end:35"->"app,type='identifier'\nline_star:76,line_end:76|char_star:23,char_end:26";
"client,type='identifier'\nline_star:76,line_end:76|char_star:28,char_end:34"[shape="point",fillcolor="#121013",style=filled];
"(app, client),type='parameters'\nline_star:76,line_end:76|char_star:22,char_end:35"->"client,type='identifier'\nline_star:76,line_end:76|char_star:28,char_end:34";
"type='INFORMATION BLOCK'\nline_star:77,line_end:100|char_star:4,char_end:45"[shape="point",fillcolor="#121013",style=filled];
"def test_jsonify_dicts(app, client):\n    d = {\n        'a': 0,\n        'b': 23,\n        'c': 3.14,\n        'd': 't',\n        'e': 'Hi',\n        'f': True,\n        'g': False,\n        'h': ['test list', 10, False],\n        'i': {'test': 'dict'},\n    }\n\n    @app.route('/kw')\n    def return_kwargs():\n        return flask.jsonify(**d)\n\n    @app.route('/dict')\n    def return_dict():\n        return flask.jsonify(d)\n\n    for url in '/kw', '/dict':\n        rv = client.get(url)\n        assert rv.mimetype == 'application/json'\n        assert flask.json.loads(rv.data) == d,type='function_definition'\nline_star:76,line_end:100|char_star:0,char_end:45"->"type='INFORMATION BLOCK'\nline_star:77,line_end:100|char_star:4,char_end:45";
"@app.route('/kw')\n    def return_kwargs():\n        return flask.jsonify(**d),type='decorated_definition'\nline_star:89,line_end:91|char_star:4,char_end:33"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:77,line_end:100|char_star:4,char_end:45"->"@app.route('/kw')\n    def return_kwargs():\n        return flask.jsonify(**d),type='decorated_definition'\nline_star:89,line_end:91|char_star:4,char_end:33";
"@app.route('/kw'),type='decorator'\nline_star:89,line_end:89|char_star:4,char_end:21"[shape="box",fillcolor="white",style=filled];
"@app.route('/kw')\n    def return_kwargs():\n        return flask.jsonify(**d),type='decorated_definition'\nline_star:89,line_end:91|char_star:4,char_end:33"->"@app.route('/kw'),type='decorator'\nline_star:89,line_end:89|char_star:4,char_end:21";
"def return_kwargs():\n        return flask.jsonify(**d),type='function_definition'\nline_star:90,line_end:91|char_star:4,char_end:33"[shape="box",fillcolor="#cee6b4",style=filled];
"@app.route('/kw')\n    def return_kwargs():\n        return flask.jsonify(**d),type='decorated_definition'\nline_star:89,line_end:91|char_star:4,char_end:33"->"def return_kwargs():\n        return flask.jsonify(**d),type='function_definition'\nline_star:90,line_end:91|char_star:4,char_end:33";
"return_kwargs,type='identifier'\nline_star:90,line_end:90|char_star:8,char_end:21"[shape="point",fillcolor="#121013",style=filled];
"def return_kwargs():\n        return flask.jsonify(**d),type='function_definition'\nline_star:90,line_end:91|char_star:4,char_end:33"->"return_kwargs,type='identifier'\nline_star:90,line_end:90|char_star:8,char_end:21";
"type='INFORMATION BLOCK'\nline_star:91,line_end:91|char_star:8,char_end:33"[shape="point",fillcolor="#121013",style=filled];
"def return_kwargs():\n        return flask.jsonify(**d),type='function_definition'\nline_star:90,line_end:91|char_star:4,char_end:33"->"type='INFORMATION BLOCK'\nline_star:91,line_end:91|char_star:8,char_end:33";
"return flask.jsonify(**d),type='return_statement'\nline_star:91,line_end:91|char_star:8,char_end:33"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:91,line_end:91|char_star:8,char_end:33"->"return flask.jsonify(**d),type='return_statement'\nline_star:91,line_end:91|char_star:8,char_end:33";
"@app.route('/dict')\n    def return_dict():\n        return flask.jsonify(d),type='decorated_definition'\nline_star:93,line_end:95|char_star:4,char_end:31"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:77,line_end:100|char_star:4,char_end:45"->"@app.route('/dict')\n    def return_dict():\n        return flask.jsonify(d),type='decorated_definition'\nline_star:93,line_end:95|char_star:4,char_end:31";
"@app.route('/dict'),type='decorator'\nline_star:93,line_end:93|char_star:4,char_end:23"[shape="box",fillcolor="white",style=filled];
"@app.route('/dict')\n    def return_dict():\n        return flask.jsonify(d),type='decorated_definition'\nline_star:93,line_end:95|char_star:4,char_end:31"->"@app.route('/dict'),type='decorator'\nline_star:93,line_end:93|char_star:4,char_end:23";
"def return_dict():\n        return flask.jsonify(d),type='function_definition'\nline_star:94,line_end:95|char_star:4,char_end:31"[shape="box",fillcolor="#cee6b4",style=filled];
"@app.route('/dict')\n    def return_dict():\n        return flask.jsonify(d),type='decorated_definition'\nline_star:93,line_end:95|char_star:4,char_end:31"->"def return_dict():\n        return flask.jsonify(d),type='function_definition'\nline_star:94,line_end:95|char_star:4,char_end:31";
"return_dict,type='identifier'\nline_star:94,line_end:94|char_star:8,char_end:19"[shape="point",fillcolor="#121013",style=filled];
"def return_dict():\n        return flask.jsonify(d),type='function_definition'\nline_star:94,line_end:95|char_star:4,char_end:31"->"return_dict,type='identifier'\nline_star:94,line_end:94|char_star:8,char_end:19";
"type='INFORMATION BLOCK'\nline_star:95,line_end:95|char_star:8,char_end:31"[shape="point",fillcolor="#121013",style=filled];
"def return_dict():\n        return flask.jsonify(d),type='function_definition'\nline_star:94,line_end:95|char_star:4,char_end:31"->"type='INFORMATION BLOCK'\nline_star:95,line_end:95|char_star:8,char_end:31";
"return flask.jsonify(d),type='return_statement'\nline_star:95,line_end:95|char_star:8,char_end:31"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:95,line_end:95|char_star:8,char_end:31"->"return flask.jsonify(d),type='return_statement'\nline_star:95,line_end:95|char_star:8,char_end:31";
"for url in '/kw', '/dict':\n        rv = client.get(url)\n        assert rv.mimetype == 'application/json'\n        assert flask.json.loads(rv.data) == d,type='for_statement'\nline_star:97,line_end:100|char_star:4,char_end:45"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:77,line_end:100|char_star:4,char_end:45"->"for url in '/kw', '/dict':\n        rv = client.get(url)\n        assert rv.mimetype == 'application/json'\n        assert flask.json.loads(rv.data) == d,type='for_statement'\nline_star:97,line_end:100|char_star:4,char_end:45";
"def test_jsonify_arrays(app, client):\n    '''Test jsonify of lists and args unpacking.'''\n    a_list = [\n        0,\n        42,\n        3.14,\n        't',\n        'hello',\n        True,\n        False,\n        ['test list', 2, False],\n        {'test': 'dict'},\n    ]\n\n    @app.route('/args_unpack')\n    def return_args_unpack():\n        return flask.jsonify(*a_list)\n\n    @app.route('/array')\n    def return_array():\n        return flask.jsonify(a_list)\n\n    for url in '/args_unpack', '/array':\n        rv = client.get(url)\n        assert rv.mimetype == 'application/json'\n        assert flask.json.loads(rv.data) == a_list,type='function_definition'\nline_star:103,line_end:128|char_star:0,char_end:50"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_jsonify_arrays(app, client):\n    '''Test jsonify of lists and args unpacking.'''\n    a_list = [\n        0,\n        42,\n        3.14,\n        't',\n        'hello',\n        True,\n        False,\n        ['test list', 2, False],\n        {'test': 'dict'},\n    ]\n\n    @app.route('/args_unpack')\n    def return_args_unpack():\n        return flask.jsonify(*a_list)\n\n    @app.route('/array')\n    def return_array():\n        return flask.jsonify(a_list)\n\n    for url in '/args_unpack', '/array':\n        rv = client.get(url)\n        assert rv.mimetype == 'application/json'\n        assert flask.json.loads(rv.data) == a_list,type='function_definition'\nline_star:103,line_end:128|char_star:0,char_end:50";
"test_jsonify_arrays,type='identifier'\nline_star:103,line_end:103|char_star:4,char_end:23"[shape="point",fillcolor="#121013",style=filled];
"def test_jsonify_arrays(app, client):\n    '''Test jsonify of lists and args unpacking.'''\n    a_list = [\n        0,\n        42,\n        3.14,\n        't',\n        'hello',\n        True,\n        False,\n        ['test list', 2, False],\n        {'test': 'dict'},\n    ]\n\n    @app.route('/args_unpack')\n    def return_args_unpack():\n        return flask.jsonify(*a_list)\n\n    @app.route('/array')\n    def return_array():\n        return flask.jsonify(a_list)\n\n    for url in '/args_unpack', '/array':\n        rv = client.get(url)\n        assert rv.mimetype == 'application/json'\n        assert flask.json.loads(rv.data) == a_list,type='function_definition'\nline_star:103,line_end:128|char_star:0,char_end:50"->"test_jsonify_arrays,type='identifier'\nline_star:103,line_end:103|char_star:4,char_end:23";
"(app, client),type='parameters'\nline_star:103,line_end:103|char_star:23,char_end:36"[shape="box",fillcolor="white",style=filled];
"def test_jsonify_arrays(app, client):\n    '''Test jsonify of lists and args unpacking.'''\n    a_list = [\n        0,\n        42,\n        3.14,\n        't',\n        'hello',\n        True,\n        False,\n        ['test list', 2, False],\n        {'test': 'dict'},\n    ]\n\n    @app.route('/args_unpack')\n    def return_args_unpack():\n        return flask.jsonify(*a_list)\n\n    @app.route('/array')\n    def return_array():\n        return flask.jsonify(a_list)\n\n    for url in '/args_unpack', '/array':\n        rv = client.get(url)\n        assert rv.mimetype == 'application/json'\n        assert flask.json.loads(rv.data) == a_list,type='function_definition'\nline_star:103,line_end:128|char_star:0,char_end:50"->"(app, client),type='parameters'\nline_star:103,line_end:103|char_star:23,char_end:36";
"app,type='identifier'\nline_star:103,line_end:103|char_star:24,char_end:27"[shape="point",fillcolor="#121013",style=filled];
"(app, client),type='parameters'\nline_star:103,line_end:103|char_star:23,char_end:36"->"app,type='identifier'\nline_star:103,line_end:103|char_star:24,char_end:27";
"client,type='identifier'\nline_star:103,line_end:103|char_star:29,char_end:35"[shape="point",fillcolor="#121013",style=filled];
"(app, client),type='parameters'\nline_star:103,line_end:103|char_star:23,char_end:36"->"client,type='identifier'\nline_star:103,line_end:103|char_star:29,char_end:35";
"type='INFORMATION BLOCK'\nline_star:104,line_end:128|char_star:4,char_end:50"[shape="point",fillcolor="#121013",style=filled];
"def test_jsonify_arrays(app, client):\n    '''Test jsonify of lists and args unpacking.'''\n    a_list = [\n        0,\n        42,\n        3.14,\n        't',\n        'hello',\n        True,\n        False,\n        ['test list', 2, False],\n        {'test': 'dict'},\n    ]\n\n    @app.route('/args_unpack')\n    def return_args_unpack():\n        return flask.jsonify(*a_list)\n\n    @app.route('/array')\n    def return_array():\n        return flask.jsonify(a_list)\n\n    for url in '/args_unpack', '/array':\n        rv = client.get(url)\n        assert rv.mimetype == 'application/json'\n        assert flask.json.loads(rv.data) == a_list,type='function_definition'\nline_star:103,line_end:128|char_star:0,char_end:50"->"type='INFORMATION BLOCK'\nline_star:104,line_end:128|char_star:4,char_end:50";
"@app.route('/args_unpack')\n    def return_args_unpack():\n        return flask.jsonify(*a_list),type='decorated_definition'\nline_star:117,line_end:119|char_star:4,char_end:37"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:104,line_end:128|char_star:4,char_end:50"->"@app.route('/args_unpack')\n    def return_args_unpack():\n        return flask.jsonify(*a_list),type='decorated_definition'\nline_star:117,line_end:119|char_star:4,char_end:37";
"@app.route('/args_unpack'),type='decorator'\nline_star:117,line_end:117|char_star:4,char_end:30"[shape="box",fillcolor="white",style=filled];
"@app.route('/args_unpack')\n    def return_args_unpack():\n        return flask.jsonify(*a_list),type='decorated_definition'\nline_star:117,line_end:119|char_star:4,char_end:37"->"@app.route('/args_unpack'),type='decorator'\nline_star:117,line_end:117|char_star:4,char_end:30";
"def return_args_unpack():\n        return flask.jsonify(*a_list),type='function_definition'\nline_star:118,line_end:119|char_star:4,char_end:37"[shape="box",fillcolor="#cee6b4",style=filled];
"@app.route('/args_unpack')\n    def return_args_unpack():\n        return flask.jsonify(*a_list),type='decorated_definition'\nline_star:117,line_end:119|char_star:4,char_end:37"->"def return_args_unpack():\n        return flask.jsonify(*a_list),type='function_definition'\nline_star:118,line_end:119|char_star:4,char_end:37";
"return_args_unpack,type='identifier'\nline_star:118,line_end:118|char_star:8,char_end:26"[shape="point",fillcolor="#121013",style=filled];
"def return_args_unpack():\n        return flask.jsonify(*a_list),type='function_definition'\nline_star:118,line_end:119|char_star:4,char_end:37"->"return_args_unpack,type='identifier'\nline_star:118,line_end:118|char_star:8,char_end:26";
"type='INFORMATION BLOCK'\nline_star:119,line_end:119|char_star:8,char_end:37"[shape="point",fillcolor="#121013",style=filled];
"def return_args_unpack():\n        return flask.jsonify(*a_list),type='function_definition'\nline_star:118,line_end:119|char_star:4,char_end:37"->"type='INFORMATION BLOCK'\nline_star:119,line_end:119|char_star:8,char_end:37";
"return flask.jsonify(*a_list),type='return_statement'\nline_star:119,line_end:119|char_star:8,char_end:37"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:119,line_end:119|char_star:8,char_end:37"->"return flask.jsonify(*a_list),type='return_statement'\nline_star:119,line_end:119|char_star:8,char_end:37";
"@app.route('/array')\n    def return_array():\n        return flask.jsonify(a_list),type='decorated_definition'\nline_star:121,line_end:123|char_star:4,char_end:36"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:104,line_end:128|char_star:4,char_end:50"->"@app.route('/array')\n    def return_array():\n        return flask.jsonify(a_list),type='decorated_definition'\nline_star:121,line_end:123|char_star:4,char_end:36";
"@app.route('/array'),type='decorator'\nline_star:121,line_end:121|char_star:4,char_end:24"[shape="box",fillcolor="white",style=filled];
"@app.route('/array')\n    def return_array():\n        return flask.jsonify(a_list),type='decorated_definition'\nline_star:121,line_end:123|char_star:4,char_end:36"->"@app.route('/array'),type='decorator'\nline_star:121,line_end:121|char_star:4,char_end:24";
"def return_array():\n        return flask.jsonify(a_list),type='function_definition'\nline_star:122,line_end:123|char_star:4,char_end:36"[shape="box",fillcolor="#cee6b4",style=filled];
"@app.route('/array')\n    def return_array():\n        return flask.jsonify(a_list),type='decorated_definition'\nline_star:121,line_end:123|char_star:4,char_end:36"->"def return_array():\n        return flask.jsonify(a_list),type='function_definition'\nline_star:122,line_end:123|char_star:4,char_end:36";
"return_array,type='identifier'\nline_star:122,line_end:122|char_star:8,char_end:20"[shape="point",fillcolor="#121013",style=filled];
"def return_array():\n        return flask.jsonify(a_list),type='function_definition'\nline_star:122,line_end:123|char_star:4,char_end:36"->"return_array,type='identifier'\nline_star:122,line_end:122|char_star:8,char_end:20";
"type='INFORMATION BLOCK'\nline_star:123,line_end:123|char_star:8,char_end:36"[shape="point",fillcolor="#121013",style=filled];
"def return_array():\n        return flask.jsonify(a_list),type='function_definition'\nline_star:122,line_end:123|char_star:4,char_end:36"->"type='INFORMATION BLOCK'\nline_star:123,line_end:123|char_star:8,char_end:36";
"return flask.jsonify(a_list),type='return_statement'\nline_star:123,line_end:123|char_star:8,char_end:36"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:123,line_end:123|char_star:8,char_end:36"->"return flask.jsonify(a_list),type='return_statement'\nline_star:123,line_end:123|char_star:8,char_end:36";
"for url in '/args_unpack', '/array':\n        rv = client.get(url)\n        assert rv.mimetype == 'application/json'\n        assert flask.json.loads(rv.data) == a_list,type='for_statement'\nline_star:125,line_end:128|char_star:4,char_end:50"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:104,line_end:128|char_star:4,char_end:50"->"for url in '/args_unpack', '/array':\n        rv = client.get(url)\n        assert rv.mimetype == 'application/json'\n        assert flask.json.loads(rv.data) == a_list,type='for_statement'\nline_star:125,line_end:128|char_star:4,char_end:50";
"def test_jsonifytypes(app, client):\n    '''Test jsonify with datetime.date and datetime.datetime types.'''\n    test_dates = (\n        datetime.datetime(1973, 3, 11, 6, 30, 45),\n        datetime.date(1975, 1, 5),\n    )\n\n    for i, d in enumerate(test_dates):\n        url = f'/datetest{i}'\n        app.add_url_rule(url, str(i), lambda val=d: flask.jsonify(x=val))\n        rv = client.get(url)\n        assert rv.mimetype == 'application/json'\n        assert flask.json.loads(rv.data)['x'] == http_date(d.timetuple()),type='function_definition'\nline_star:131,line_end:143|char_star:0,char_end:73"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_jsonifytypes(app, client):\n    '''Test jsonify with datetime.date and datetime.datetime types.'''\n    test_dates = (\n        datetime.datetime(1973, 3, 11, 6, 30, 45),\n        datetime.date(1975, 1, 5),\n    )\n\n    for i, d in enumerate(test_dates):\n        url = f'/datetest{i}'\n        app.add_url_rule(url, str(i), lambda val=d: flask.jsonify(x=val))\n        rv = client.get(url)\n        assert rv.mimetype == 'application/json'\n        assert flask.json.loads(rv.data)['x'] == http_date(d.timetuple()),type='function_definition'\nline_star:131,line_end:143|char_star:0,char_end:73";
"test_jsonifytypes,type='identifier'\nline_star:131,line_end:131|char_star:4,char_end:21"[shape="point",fillcolor="#121013",style=filled];
"def test_jsonifytypes(app, client):\n    '''Test jsonify with datetime.date and datetime.datetime types.'''\n    test_dates = (\n        datetime.datetime(1973, 3, 11, 6, 30, 45),\n        datetime.date(1975, 1, 5),\n    )\n\n    for i, d in enumerate(test_dates):\n        url = f'/datetest{i}'\n        app.add_url_rule(url, str(i), lambda val=d: flask.jsonify(x=val))\n        rv = client.get(url)\n        assert rv.mimetype == 'application/json'\n        assert flask.json.loads(rv.data)['x'] == http_date(d.timetuple()),type='function_definition'\nline_star:131,line_end:143|char_star:0,char_end:73"->"test_jsonifytypes,type='identifier'\nline_star:131,line_end:131|char_star:4,char_end:21";
"(app, client),type='parameters'\nline_star:131,line_end:131|char_star:21,char_end:34"[shape="box",fillcolor="white",style=filled];
"def test_jsonifytypes(app, client):\n    '''Test jsonify with datetime.date and datetime.datetime types.'''\n    test_dates = (\n        datetime.datetime(1973, 3, 11, 6, 30, 45),\n        datetime.date(1975, 1, 5),\n    )\n\n    for i, d in enumerate(test_dates):\n        url = f'/datetest{i}'\n        app.add_url_rule(url, str(i), lambda val=d: flask.jsonify(x=val))\n        rv = client.get(url)\n        assert rv.mimetype == 'application/json'\n        assert flask.json.loads(rv.data)['x'] == http_date(d.timetuple()),type='function_definition'\nline_star:131,line_end:143|char_star:0,char_end:73"->"(app, client),type='parameters'\nline_star:131,line_end:131|char_star:21,char_end:34";
"app,type='identifier'\nline_star:131,line_end:131|char_star:22,char_end:25"[shape="point",fillcolor="#121013",style=filled];
"(app, client),type='parameters'\nline_star:131,line_end:131|char_star:21,char_end:34"->"app,type='identifier'\nline_star:131,line_end:131|char_star:22,char_end:25";
"client,type='identifier'\nline_star:131,line_end:131|char_star:27,char_end:33"[shape="point",fillcolor="#121013",style=filled];
"(app, client),type='parameters'\nline_star:131,line_end:131|char_star:21,char_end:34"->"client,type='identifier'\nline_star:131,line_end:131|char_star:27,char_end:33";
"type='INFORMATION BLOCK'\nline_star:132,line_end:143|char_star:4,char_end:73"[shape="point",fillcolor="#121013",style=filled];
"def test_jsonifytypes(app, client):\n    '''Test jsonify with datetime.date and datetime.datetime types.'''\n    test_dates = (\n        datetime.datetime(1973, 3, 11, 6, 30, 45),\n        datetime.date(1975, 1, 5),\n    )\n\n    for i, d in enumerate(test_dates):\n        url = f'/datetest{i}'\n        app.add_url_rule(url, str(i), lambda val=d: flask.jsonify(x=val))\n        rv = client.get(url)\n        assert rv.mimetype == 'application/json'\n        assert flask.json.loads(rv.data)['x'] == http_date(d.timetuple()),type='function_definition'\nline_star:131,line_end:143|char_star:0,char_end:73"->"type='INFORMATION BLOCK'\nline_star:132,line_end:143|char_star:4,char_end:73";
"for i, d in enumerate(test_dates):\n        url = f'/datetest{i}'\n        app.add_url_rule(url, str(i), lambda val=d: flask.jsonify(x=val))\n        rv = client.get(url)\n        assert rv.mimetype == 'application/json'\n        assert flask.json.loads(rv.data)['x'] == http_date(d.timetuple()),type='for_statement'\nline_star:138,line_end:143|char_star:4,char_end:73"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:132,line_end:143|char_star:4,char_end:73"->"for i, d in enumerate(test_dates):\n        url = f'/datetest{i}'\n        app.add_url_rule(url, str(i), lambda val=d: flask.jsonify(x=val))\n        rv = client.get(url)\n        assert rv.mimetype == 'application/json'\n        assert flask.json.loads(rv.data)['x'] == http_date(d.timetuple()),type='for_statement'\nline_star:138,line_end:143|char_star:4,char_end:73";
"class FixedOffset(datetime.tzinfo):\n    '''Fixed offset in hours east from UTC.\n\n    This is a slight adaptation of the ``FixedOffset`` example found in\n    https://docs.python.org/2.7/library/datetime.html.\n    '''\n\n    def __init__(self, hours, name):\n        self.__offset = datetime.timedelta(hours=hours)\n        self.__name = name\n\n    def utcoffset(self, dt):\n        return self.__offset\n\n    def tzname(self, dt):\n        return self.__name\n\n    def dst(self, dt):\n        return datetime.timedelta(),type='class_definition'\nline_star:146,line_end:164|char_star:0,char_end:35"[shape="box",fillcolor="#ffdf91",style=filled];
"MODULE"->"class FixedOffset(datetime.tzinfo):\n    '''Fixed offset in hours east from UTC.\n\n    This is a slight adaptation of the ``FixedOffset`` example found in\n    https://docs.python.org/2.7/library/datetime.html.\n    '''\n\n    def __init__(self, hours, name):\n        self.__offset = datetime.timedelta(hours=hours)\n        self.__name = name\n\n    def utcoffset(self, dt):\n        return self.__offset\n\n    def tzname(self, dt):\n        return self.__name\n\n    def dst(self, dt):\n        return datetime.timedelta(),type='class_definition'\nline_star:146,line_end:164|char_star:0,char_end:35";
"FixedOffset,type='identifier'\nline_star:146,line_end:146|char_star:6,char_end:17"[shape="point",fillcolor="#121013",style=filled];
"class FixedOffset(datetime.tzinfo):\n    '''Fixed offset in hours east from UTC.\n\n    This is a slight adaptation of the ``FixedOffset`` example found in\n    https://docs.python.org/2.7/library/datetime.html.\n    '''\n\n    def __init__(self, hours, name):\n        self.__offset = datetime.timedelta(hours=hours)\n        self.__name = name\n\n    def utcoffset(self, dt):\n        return self.__offset\n\n    def tzname(self, dt):\n        return self.__name\n\n    def dst(self, dt):\n        return datetime.timedelta(),type='class_definition'\nline_star:146,line_end:164|char_star:0,char_end:35"->"FixedOffset,type='identifier'\nline_star:146,line_end:146|char_star:6,char_end:17";
"(datetime.tzinfo),type='argument_list'\nline_star:146,line_end:146|char_star:17,char_end:34"[shape="box",fillcolor="white",style=filled];
"class FixedOffset(datetime.tzinfo):\n    '''Fixed offset in hours east from UTC.\n\n    This is a slight adaptation of the ``FixedOffset`` example found in\n    https://docs.python.org/2.7/library/datetime.html.\n    '''\n\n    def __init__(self, hours, name):\n        self.__offset = datetime.timedelta(hours=hours)\n        self.__name = name\n\n    def utcoffset(self, dt):\n        return self.__offset\n\n    def tzname(self, dt):\n        return self.__name\n\n    def dst(self, dt):\n        return datetime.timedelta(),type='class_definition'\nline_star:146,line_end:164|char_star:0,char_end:35"->"(datetime.tzinfo),type='argument_list'\nline_star:146,line_end:146|char_star:17,char_end:34";
"datetime.tzinfo,type='attribute'\nline_star:146,line_end:146|char_star:18,char_end:33"[shape="box",fillcolor="white",style=filled];
"(datetime.tzinfo),type='argument_list'\nline_star:146,line_end:146|char_star:17,char_end:34"->"datetime.tzinfo,type='attribute'\nline_star:146,line_end:146|char_star:18,char_end:33";
"datetime,type='identifier'\nline_star:146,line_end:146|char_star:18,char_end:26"[shape="point",fillcolor="#121013",style=filled];
"datetime.tzinfo,type='attribute'\nline_star:146,line_end:146|char_star:18,char_end:33"->"datetime,type='identifier'\nline_star:146,line_end:146|char_star:18,char_end:26";
"tzinfo,type='identifier'\nline_star:146,line_end:146|char_star:27,char_end:33"[shape="point",fillcolor="#121013",style=filled];
"datetime.tzinfo,type='attribute'\nline_star:146,line_end:146|char_star:18,char_end:33"->"tzinfo,type='identifier'\nline_star:146,line_end:146|char_star:27,char_end:33";
"type='INFORMATION BLOCK'\nline_star:147,line_end:164|char_star:4,char_end:35"[shape="point",fillcolor="#121013",style=filled];
"class FixedOffset(datetime.tzinfo):\n    '''Fixed offset in hours east from UTC.\n\n    This is a slight adaptation of the ``FixedOffset`` example found in\n    https://docs.python.org/2.7/library/datetime.html.\n    '''\n\n    def __init__(self, hours, name):\n        self.__offset = datetime.timedelta(hours=hours)\n        self.__name = name\n\n    def utcoffset(self, dt):\n        return self.__offset\n\n    def tzname(self, dt):\n        return self.__name\n\n    def dst(self, dt):\n        return datetime.timedelta(),type='class_definition'\nline_star:146,line_end:164|char_star:0,char_end:35"->"type='INFORMATION BLOCK'\nline_star:147,line_end:164|char_star:4,char_end:35";
"def __init__(self, hours, name):\n        self.__offset = datetime.timedelta(hours=hours)\n        self.__name = name,type='function_definition'\nline_star:153,line_end:155|char_star:4,char_end:26"[shape="box",fillcolor="#cee6b4",style=filled];
"type='INFORMATION BLOCK'\nline_star:147,line_end:164|char_star:4,char_end:35"->"def __init__(self, hours, name):\n        self.__offset = datetime.timedelta(hours=hours)\n        self.__name = name,type='function_definition'\nline_star:153,line_end:155|char_star:4,char_end:26";
"__init__,type='identifier'\nline_star:153,line_end:153|char_star:8,char_end:16"[shape="point",fillcolor="#121013",style=filled];
"def __init__(self, hours, name):\n        self.__offset = datetime.timedelta(hours=hours)\n        self.__name = name,type='function_definition'\nline_star:153,line_end:155|char_star:4,char_end:26"->"__init__,type='identifier'\nline_star:153,line_end:153|char_star:8,char_end:16";
"(self, hours, name),type='parameters'\nline_star:153,line_end:153|char_star:16,char_end:35"[shape="box",fillcolor="white",style=filled];
"def __init__(self, hours, name):\n        self.__offset = datetime.timedelta(hours=hours)\n        self.__name = name,type='function_definition'\nline_star:153,line_end:155|char_star:4,char_end:26"->"(self, hours, name),type='parameters'\nline_star:153,line_end:153|char_star:16,char_end:35";
"self,type='identifier'\nline_star:153,line_end:153|char_star:17,char_end:21"[shape="point",fillcolor="#121013",style=filled];
"(self, hours, name),type='parameters'\nline_star:153,line_end:153|char_star:16,char_end:35"->"self,type='identifier'\nline_star:153,line_end:153|char_star:17,char_end:21";
"hours,type='identifier'\nline_star:153,line_end:153|char_star:23,char_end:28"[shape="point",fillcolor="#121013",style=filled];
"(self, hours, name),type='parameters'\nline_star:153,line_end:153|char_star:16,char_end:35"->"hours,type='identifier'\nline_star:153,line_end:153|char_star:23,char_end:28";
"name,type='identifier'\nline_star:153,line_end:153|char_star:30,char_end:34"[shape="point",fillcolor="#121013",style=filled];
"(self, hours, name),type='parameters'\nline_star:153,line_end:153|char_star:16,char_end:35"->"name,type='identifier'\nline_star:153,line_end:153|char_star:30,char_end:34";
"type='INFORMATION BLOCK'\nline_star:154,line_end:155|char_star:8,char_end:26"[shape="point",fillcolor="#121013",style=filled];
"def __init__(self, hours, name):\n        self.__offset = datetime.timedelta(hours=hours)\n        self.__name = name,type='function_definition'\nline_star:153,line_end:155|char_star:4,char_end:26"->"type='INFORMATION BLOCK'\nline_star:154,line_end:155|char_star:8,char_end:26";
"def utcoffset(self, dt):\n        return self.__offset,type='function_definition'\nline_star:157,line_end:158|char_star:4,char_end:28"[shape="box",fillcolor="#cee6b4",style=filled];
"type='INFORMATION BLOCK'\nline_star:147,line_end:164|char_star:4,char_end:35"->"def utcoffset(self, dt):\n        return self.__offset,type='function_definition'\nline_star:157,line_end:158|char_star:4,char_end:28";
"utcoffset,type='identifier'\nline_star:157,line_end:157|char_star:8,char_end:17"[shape="point",fillcolor="#121013",style=filled];
"def utcoffset(self, dt):\n        return self.__offset,type='function_definition'\nline_star:157,line_end:158|char_star:4,char_end:28"->"utcoffset,type='identifier'\nline_star:157,line_end:157|char_star:8,char_end:17";
"(self, dt),type='parameters'\nline_star:157,line_end:157|char_star:17,char_end:27"[shape="box",fillcolor="white",style=filled];
"def utcoffset(self, dt):\n        return self.__offset,type='function_definition'\nline_star:157,line_end:158|char_star:4,char_end:28"->"(self, dt),type='parameters'\nline_star:157,line_end:157|char_star:17,char_end:27";
"self,type='identifier'\nline_star:157,line_end:157|char_star:18,char_end:22"[shape="point",fillcolor="#121013",style=filled];
"(self, dt),type='parameters'\nline_star:157,line_end:157|char_star:17,char_end:27"->"self,type='identifier'\nline_star:157,line_end:157|char_star:18,char_end:22";
"dt,type='identifier'\nline_star:157,line_end:157|char_star:24,char_end:26"[shape="point",fillcolor="#121013",style=filled];
"(self, dt),type='parameters'\nline_star:157,line_end:157|char_star:17,char_end:27"->"dt,type='identifier'\nline_star:157,line_end:157|char_star:24,char_end:26";
"type='INFORMATION BLOCK'\nline_star:158,line_end:158|char_star:8,char_end:28"[shape="point",fillcolor="#121013",style=filled];
"def utcoffset(self, dt):\n        return self.__offset,type='function_definition'\nline_star:157,line_end:158|char_star:4,char_end:28"->"type='INFORMATION BLOCK'\nline_star:158,line_end:158|char_star:8,char_end:28";
"return self.__offset,type='return_statement'\nline_star:158,line_end:158|char_star:8,char_end:28"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:158,line_end:158|char_star:8,char_end:28"->"return self.__offset,type='return_statement'\nline_star:158,line_end:158|char_star:8,char_end:28";
"def tzname(self, dt):\n        return self.__name,type='function_definition'\nline_star:160,line_end:161|char_star:4,char_end:26"[shape="box",fillcolor="#cee6b4",style=filled];
"type='INFORMATION BLOCK'\nline_star:147,line_end:164|char_star:4,char_end:35"->"def tzname(self, dt):\n        return self.__name,type='function_definition'\nline_star:160,line_end:161|char_star:4,char_end:26";
"tzname,type='identifier'\nline_star:160,line_end:160|char_star:8,char_end:14"[shape="point",fillcolor="#121013",style=filled];
"def tzname(self, dt):\n        return self.__name,type='function_definition'\nline_star:160,line_end:161|char_star:4,char_end:26"->"tzname,type='identifier'\nline_star:160,line_end:160|char_star:8,char_end:14";
"(self, dt),type='parameters'\nline_star:160,line_end:160|char_star:14,char_end:24"[shape="box",fillcolor="white",style=filled];
"def tzname(self, dt):\n        return self.__name,type='function_definition'\nline_star:160,line_end:161|char_star:4,char_end:26"->"(self, dt),type='parameters'\nline_star:160,line_end:160|char_star:14,char_end:24";
"self,type='identifier'\nline_star:160,line_end:160|char_star:15,char_end:19"[shape="point",fillcolor="#121013",style=filled];
"(self, dt),type='parameters'\nline_star:160,line_end:160|char_star:14,char_end:24"->"self,type='identifier'\nline_star:160,line_end:160|char_star:15,char_end:19";
"dt,type='identifier'\nline_star:160,line_end:160|char_star:21,char_end:23"[shape="point",fillcolor="#121013",style=filled];
"(self, dt),type='parameters'\nline_star:160,line_end:160|char_star:14,char_end:24"->"dt,type='identifier'\nline_star:160,line_end:160|char_star:21,char_end:23";
"type='INFORMATION BLOCK'\nline_star:161,line_end:161|char_star:8,char_end:26"[shape="point",fillcolor="#121013",style=filled];
"def tzname(self, dt):\n        return self.__name,type='function_definition'\nline_star:160,line_end:161|char_star:4,char_end:26"->"type='INFORMATION BLOCK'\nline_star:161,line_end:161|char_star:8,char_end:26";
"return self.__name,type='return_statement'\nline_star:161,line_end:161|char_star:8,char_end:26"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:161,line_end:161|char_star:8,char_end:26"->"return self.__name,type='return_statement'\nline_star:161,line_end:161|char_star:8,char_end:26";
"def dst(self, dt):\n        return datetime.timedelta(),type='function_definition'\nline_star:163,line_end:164|char_star:4,char_end:35"[shape="box",fillcolor="#cee6b4",style=filled];
"type='INFORMATION BLOCK'\nline_star:147,line_end:164|char_star:4,char_end:35"->"def dst(self, dt):\n        return datetime.timedelta(),type='function_definition'\nline_star:163,line_end:164|char_star:4,char_end:35";
"dst,type='identifier'\nline_star:163,line_end:163|char_star:8,char_end:11"[shape="point",fillcolor="#121013",style=filled];
"def dst(self, dt):\n        return datetime.timedelta(),type='function_definition'\nline_star:163,line_end:164|char_star:4,char_end:35"->"dst,type='identifier'\nline_star:163,line_end:163|char_star:8,char_end:11";
"(self, dt),type='parameters'\nline_star:163,line_end:163|char_star:11,char_end:21"[shape="box",fillcolor="white",style=filled];
"def dst(self, dt):\n        return datetime.timedelta(),type='function_definition'\nline_star:163,line_end:164|char_star:4,char_end:35"->"(self, dt),type='parameters'\nline_star:163,line_end:163|char_star:11,char_end:21";
"self,type='identifier'\nline_star:163,line_end:163|char_star:12,char_end:16"[shape="point",fillcolor="#121013",style=filled];
"(self, dt),type='parameters'\nline_star:163,line_end:163|char_star:11,char_end:21"->"self,type='identifier'\nline_star:163,line_end:163|char_star:12,char_end:16";
"dt,type='identifier'\nline_star:163,line_end:163|char_star:18,char_end:20"[shape="point",fillcolor="#121013",style=filled];
"(self, dt),type='parameters'\nline_star:163,line_end:163|char_star:11,char_end:21"->"dt,type='identifier'\nline_star:163,line_end:163|char_star:18,char_end:20";
"type='INFORMATION BLOCK'\nline_star:164,line_end:164|char_star:8,char_end:35"[shape="point",fillcolor="#121013",style=filled];
"def dst(self, dt):\n        return datetime.timedelta(),type='function_definition'\nline_star:163,line_end:164|char_star:4,char_end:35"->"type='INFORMATION BLOCK'\nline_star:164,line_end:164|char_star:8,char_end:35";
"return datetime.timedelta(),type='return_statement'\nline_star:164,line_end:164|char_star:8,char_end:35"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:164,line_end:164|char_star:8,char_end:35"->"return datetime.timedelta(),type='return_statement'\nline_star:164,line_end:164|char_star:8,char_end:35";
"@pytest.mark.parametrize('tz', (('UTC', 0), ('PST', -8), ('KST', 9)))\ndef test_jsonify_aware_datetimes(tz):\n    '''Test if aware datetime.datetime objects are converted into GMT.'''\n    tzinfo = FixedOffset(hours=tz[1], name=tz[0])\n    dt = datetime.datetime(2017, 1, 1, 12, 34, 56, tzinfo=tzinfo)\n    gmt = FixedOffset(hours=0, name='GMT')\n    expected = dt.astimezone(gmt).strftime(''%a, %d %b %Y %H:%M:%S %Z'')\n    assert flask.json.JSONEncoder().encode(dt) == expected,type='decorated_definition'\nline_star:167,line_end:174|char_star:0,char_end:58"[shape="box",fillcolor="#c8c6a7",style=filled];
"MODULE"->"@pytest.mark.parametrize('tz', (('UTC', 0), ('PST', -8), ('KST', 9)))\ndef test_jsonify_aware_datetimes(tz):\n    '''Test if aware datetime.datetime objects are converted into GMT.'''\n    tzinfo = FixedOffset(hours=tz[1], name=tz[0])\n    dt = datetime.datetime(2017, 1, 1, 12, 34, 56, tzinfo=tzinfo)\n    gmt = FixedOffset(hours=0, name='GMT')\n    expected = dt.astimezone(gmt).strftime(''%a, %d %b %Y %H:%M:%S %Z'')\n    assert flask.json.JSONEncoder().encode(dt) == expected,type='decorated_definition'\nline_star:167,line_end:174|char_star:0,char_end:58";
"@pytest.mark.parametrize('tz', (('UTC', 0), ('PST', -8), ('KST', 9))),type='decorator'\nline_star:167,line_end:167|char_star:0,char_end:69"[shape="box",fillcolor="white",style=filled];
"@pytest.mark.parametrize('tz', (('UTC', 0), ('PST', -8), ('KST', 9)))\ndef test_jsonify_aware_datetimes(tz):\n    '''Test if aware datetime.datetime objects are converted into GMT.'''\n    tzinfo = FixedOffset(hours=tz[1], name=tz[0])\n    dt = datetime.datetime(2017, 1, 1, 12, 34, 56, tzinfo=tzinfo)\n    gmt = FixedOffset(hours=0, name='GMT')\n    expected = dt.astimezone(gmt).strftime(''%a, %d %b %Y %H:%M:%S %Z'')\n    assert flask.json.JSONEncoder().encode(dt) == expected,type='decorated_definition'\nline_star:167,line_end:174|char_star:0,char_end:58"->"@pytest.mark.parametrize('tz', (('UTC', 0), ('PST', -8), ('KST', 9))),type='decorator'\nline_star:167,line_end:167|char_star:0,char_end:69";
"def test_jsonify_aware_datetimes(tz):\n    '''Test if aware datetime.datetime objects are converted into GMT.'''\n    tzinfo = FixedOffset(hours=tz[1], name=tz[0])\n    dt = datetime.datetime(2017, 1, 1, 12, 34, 56, tzinfo=tzinfo)\n    gmt = FixedOffset(hours=0, name='GMT')\n    expected = dt.astimezone(gmt).strftime(''%a, %d %b %Y %H:%M:%S %Z'')\n    assert flask.json.JSONEncoder().encode(dt) == expected,type='function_definition'\nline_star:168,line_end:174|char_star:0,char_end:58"[shape="box",fillcolor="#cee6b4",style=filled];
"@pytest.mark.parametrize('tz', (('UTC', 0), ('PST', -8), ('KST', 9)))\ndef test_jsonify_aware_datetimes(tz):\n    '''Test if aware datetime.datetime objects are converted into GMT.'''\n    tzinfo = FixedOffset(hours=tz[1], name=tz[0])\n    dt = datetime.datetime(2017, 1, 1, 12, 34, 56, tzinfo=tzinfo)\n    gmt = FixedOffset(hours=0, name='GMT')\n    expected = dt.astimezone(gmt).strftime(''%a, %d %b %Y %H:%M:%S %Z'')\n    assert flask.json.JSONEncoder().encode(dt) == expected,type='decorated_definition'\nline_star:167,line_end:174|char_star:0,char_end:58"->"def test_jsonify_aware_datetimes(tz):\n    '''Test if aware datetime.datetime objects are converted into GMT.'''\n    tzinfo = FixedOffset(hours=tz[1], name=tz[0])\n    dt = datetime.datetime(2017, 1, 1, 12, 34, 56, tzinfo=tzinfo)\n    gmt = FixedOffset(hours=0, name='GMT')\n    expected = dt.astimezone(gmt).strftime(''%a, %d %b %Y %H:%M:%S %Z'')\n    assert flask.json.JSONEncoder().encode(dt) == expected,type='function_definition'\nline_star:168,line_end:174|char_star:0,char_end:58";
"test_jsonify_aware_datetimes,type='identifier'\nline_star:168,line_end:168|char_star:4,char_end:32"[shape="point",fillcolor="#121013",style=filled];
"def test_jsonify_aware_datetimes(tz):\n    '''Test if aware datetime.datetime objects are converted into GMT.'''\n    tzinfo = FixedOffset(hours=tz[1], name=tz[0])\n    dt = datetime.datetime(2017, 1, 1, 12, 34, 56, tzinfo=tzinfo)\n    gmt = FixedOffset(hours=0, name='GMT')\n    expected = dt.astimezone(gmt).strftime(''%a, %d %b %Y %H:%M:%S %Z'')\n    assert flask.json.JSONEncoder().encode(dt) == expected,type='function_definition'\nline_star:168,line_end:174|char_star:0,char_end:58"->"test_jsonify_aware_datetimes,type='identifier'\nline_star:168,line_end:168|char_star:4,char_end:32";
"(tz),type='parameters'\nline_star:168,line_end:168|char_star:32,char_end:36"[shape="box",fillcolor="white",style=filled];
"def test_jsonify_aware_datetimes(tz):\n    '''Test if aware datetime.datetime objects are converted into GMT.'''\n    tzinfo = FixedOffset(hours=tz[1], name=tz[0])\n    dt = datetime.datetime(2017, 1, 1, 12, 34, 56, tzinfo=tzinfo)\n    gmt = FixedOffset(hours=0, name='GMT')\n    expected = dt.astimezone(gmt).strftime(''%a, %d %b %Y %H:%M:%S %Z'')\n    assert flask.json.JSONEncoder().encode(dt) == expected,type='function_definition'\nline_star:168,line_end:174|char_star:0,char_end:58"->"(tz),type='parameters'\nline_star:168,line_end:168|char_star:32,char_end:36";
"tz,type='identifier'\nline_star:168,line_end:168|char_star:33,char_end:35"[shape="point",fillcolor="#121013",style=filled];
"(tz),type='parameters'\nline_star:168,line_end:168|char_star:32,char_end:36"->"tz,type='identifier'\nline_star:168,line_end:168|char_star:33,char_end:35";
"type='INFORMATION BLOCK'\nline_star:169,line_end:174|char_star:4,char_end:58"[shape="point",fillcolor="#121013",style=filled];
"def test_jsonify_aware_datetimes(tz):\n    '''Test if aware datetime.datetime objects are converted into GMT.'''\n    tzinfo = FixedOffset(hours=tz[1], name=tz[0])\n    dt = datetime.datetime(2017, 1, 1, 12, 34, 56, tzinfo=tzinfo)\n    gmt = FixedOffset(hours=0, name='GMT')\n    expected = dt.astimezone(gmt).strftime(''%a, %d %b %Y %H:%M:%S %Z'')\n    assert flask.json.JSONEncoder().encode(dt) == expected,type='function_definition'\nline_star:168,line_end:174|char_star:0,char_end:58"->"type='INFORMATION BLOCK'\nline_star:169,line_end:174|char_star:4,char_end:58";
"assert flask.json.JSONEncoder().encode(dt) == expected,type='assert_statement'\nline_star:174,line_end:174|char_star:4,char_end:58"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:169,line_end:174|char_star:4,char_end:58"->"assert flask.json.JSONEncoder().encode(dt) == expected,type='assert_statement'\nline_star:174,line_end:174|char_star:4,char_end:58";
"flask.json.JSONEncoder().encode(dt) == expected,type='comparison_operator'\nline_star:174,line_end:174|char_star:11,char_end:58"[shape="box",fillcolor="white",style=filled];
"assert flask.json.JSONEncoder().encode(dt) == expected,type='assert_statement'\nline_star:174,line_end:174|char_star:4,char_end:58"->"flask.json.JSONEncoder().encode(dt) == expected,type='comparison_operator'\nline_star:174,line_end:174|char_star:11,char_end:58";
"flask.json.JSONEncoder().encode(dt),type='call'\nline_star:174,line_end:174|char_star:11,char_end:46"[shape="box",fillcolor="white",style=filled];
"flask.json.JSONEncoder().encode(dt) == expected,type='comparison_operator'\nline_star:174,line_end:174|char_star:11,char_end:58"->"flask.json.JSONEncoder().encode(dt),type='call'\nline_star:174,line_end:174|char_star:11,char_end:46";
"flask.json.JSONEncoder().encode,type='attribute'\nline_star:174,line_end:174|char_star:11,char_end:42"[shape="box",fillcolor="white",style=filled];
"flask.json.JSONEncoder().encode(dt),type='call'\nline_star:174,line_end:174|char_star:11,char_end:46"->"flask.json.JSONEncoder().encode,type='attribute'\nline_star:174,line_end:174|char_star:11,char_end:42";
"flask.json.JSONEncoder(),type='call'\nline_star:174,line_end:174|char_star:11,char_end:35"[shape="box",fillcolor="white",style=filled];
"flask.json.JSONEncoder().encode,type='attribute'\nline_star:174,line_end:174|char_star:11,char_end:42"->"flask.json.JSONEncoder(),type='call'\nline_star:174,line_end:174|char_star:11,char_end:35";
"flask.json.JSONEncoder,type='attribute'\nline_star:174,line_end:174|char_star:11,char_end:33"[shape="box",fillcolor="white",style=filled];
"flask.json.JSONEncoder(),type='call'\nline_star:174,line_end:174|char_star:11,char_end:35"->"flask.json.JSONEncoder,type='attribute'\nline_star:174,line_end:174|char_star:11,char_end:33";
"flask.json,type='attribute'\nline_star:174,line_end:174|char_star:11,char_end:21"[shape="box",fillcolor="white",style=filled];
"flask.json.JSONEncoder,type='attribute'\nline_star:174,line_end:174|char_star:11,char_end:33"->"flask.json,type='attribute'\nline_star:174,line_end:174|char_star:11,char_end:21";
"flask,type='identifier'\nline_star:174,line_end:174|char_star:11,char_end:16"[shape="point",fillcolor="#121013",style=filled];
"flask.json,type='attribute'\nline_star:174,line_end:174|char_star:11,char_end:21"->"flask,type='identifier'\nline_star:174,line_end:174|char_star:11,char_end:16";
"json,type='identifier'\nline_star:174,line_end:174|char_star:17,char_end:21"[shape="point",fillcolor="#121013",style=filled];
"flask.json,type='attribute'\nline_star:174,line_end:174|char_star:11,char_end:21"->"json,type='identifier'\nline_star:174,line_end:174|char_star:17,char_end:21";
"JSONEncoder,type='identifier'\nline_star:174,line_end:174|char_star:22,char_end:33"[shape="point",fillcolor="#121013",style=filled];
"flask.json.JSONEncoder,type='attribute'\nline_star:174,line_end:174|char_star:11,char_end:33"->"JSONEncoder,type='identifier'\nline_star:174,line_end:174|char_star:22,char_end:33";
"encode,type='identifier'\nline_star:174,line_end:174|char_star:36,char_end:42"[shape="point",fillcolor="#121013",style=filled];
"flask.json.JSONEncoder().encode,type='attribute'\nline_star:174,line_end:174|char_star:11,char_end:42"->"encode,type='identifier'\nline_star:174,line_end:174|char_star:36,char_end:42";
"(dt),type='argument_list'\nline_star:174,line_end:174|char_star:42,char_end:46"[shape="box",fillcolor="white",style=filled];
"flask.json.JSONEncoder().encode(dt),type='call'\nline_star:174,line_end:174|char_star:11,char_end:46"->"(dt),type='argument_list'\nline_star:174,line_end:174|char_star:42,char_end:46";
"dt,type='identifier'\nline_star:174,line_end:174|char_star:43,char_end:45"[shape="point",fillcolor="#121013",style=filled];
"(dt),type='argument_list'\nline_star:174,line_end:174|char_star:42,char_end:46"->"dt,type='identifier'\nline_star:174,line_end:174|char_star:43,char_end:45";
"expected,type='identifier'\nline_star:174,line_end:174|char_star:50,char_end:58"[shape="point",fillcolor="#121013",style=filled];
"flask.json.JSONEncoder().encode(dt) == expected,type='comparison_operator'\nline_star:174,line_end:174|char_star:11,char_end:58"->"expected,type='identifier'\nline_star:174,line_end:174|char_star:50,char_end:58";
"def test_jsonify_uuid_types(app, client):\n    '''Test jsonify with uuid.UUID types'''\n\n    test_uuid = uuid.UUID(bytes=b'\xDE\xAD\xBE\xEF' * 4)\n    url = '/uuid_test'\n    app.add_url_rule(url, url, lambda: flask.jsonify(x=test_uuid))\n\n    rv = client.get(url)\n\n    rv_x = flask.json.loads(rv.data)['x']\n    assert rv_x == str(test_uuid)\n    rv_uuid = uuid.UUID(rv_x)\n    assert rv_uuid == test_uuid,type='function_definition'\nline_star:177,line_end:189|char_star:0,char_end:31"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_jsonify_uuid_types(app, client):\n    '''Test jsonify with uuid.UUID types'''\n\n    test_uuid = uuid.UUID(bytes=b'\xDE\xAD\xBE\xEF' * 4)\n    url = '/uuid_test'\n    app.add_url_rule(url, url, lambda: flask.jsonify(x=test_uuid))\n\n    rv = client.get(url)\n\n    rv_x = flask.json.loads(rv.data)['x']\n    assert rv_x == str(test_uuid)\n    rv_uuid = uuid.UUID(rv_x)\n    assert rv_uuid == test_uuid,type='function_definition'\nline_star:177,line_end:189|char_star:0,char_end:31";
"test_jsonify_uuid_types,type='identifier'\nline_star:177,line_end:177|char_star:4,char_end:27"[shape="point",fillcolor="#121013",style=filled];
"def test_jsonify_uuid_types(app, client):\n    '''Test jsonify with uuid.UUID types'''\n\n    test_uuid = uuid.UUID(bytes=b'\xDE\xAD\xBE\xEF' * 4)\n    url = '/uuid_test'\n    app.add_url_rule(url, url, lambda: flask.jsonify(x=test_uuid))\n\n    rv = client.get(url)\n\n    rv_x = flask.json.loads(rv.data)['x']\n    assert rv_x == str(test_uuid)\n    rv_uuid = uuid.UUID(rv_x)\n    assert rv_uuid == test_uuid,type='function_definition'\nline_star:177,line_end:189|char_star:0,char_end:31"->"test_jsonify_uuid_types,type='identifier'\nline_star:177,line_end:177|char_star:4,char_end:27";
"(app, client),type='parameters'\nline_star:177,line_end:177|char_star:27,char_end:40"[shape="box",fillcolor="white",style=filled];
"def test_jsonify_uuid_types(app, client):\n    '''Test jsonify with uuid.UUID types'''\n\n    test_uuid = uuid.UUID(bytes=b'\xDE\xAD\xBE\xEF' * 4)\n    url = '/uuid_test'\n    app.add_url_rule(url, url, lambda: flask.jsonify(x=test_uuid))\n\n    rv = client.get(url)\n\n    rv_x = flask.json.loads(rv.data)['x']\n    assert rv_x == str(test_uuid)\n    rv_uuid = uuid.UUID(rv_x)\n    assert rv_uuid == test_uuid,type='function_definition'\nline_star:177,line_end:189|char_star:0,char_end:31"->"(app, client),type='parameters'\nline_star:177,line_end:177|char_star:27,char_end:40";
"app,type='identifier'\nline_star:177,line_end:177|char_star:28,char_end:31"[shape="point",fillcolor="#121013",style=filled];
"(app, client),type='parameters'\nline_star:177,line_end:177|char_star:27,char_end:40"->"app,type='identifier'\nline_star:177,line_end:177|char_star:28,char_end:31";
"client,type='identifier'\nline_star:177,line_end:177|char_star:33,char_end:39"[shape="point",fillcolor="#121013",style=filled];
"(app, client),type='parameters'\nline_star:177,line_end:177|char_star:27,char_end:40"->"client,type='identifier'\nline_star:177,line_end:177|char_star:33,char_end:39";
"type='INFORMATION BLOCK'\nline_star:178,line_end:189|char_star:4,char_end:31"[shape="point",fillcolor="#121013",style=filled];
"def test_jsonify_uuid_types(app, client):\n    '''Test jsonify with uuid.UUID types'''\n\n    test_uuid = uuid.UUID(bytes=b'\xDE\xAD\xBE\xEF' * 4)\n    url = '/uuid_test'\n    app.add_url_rule(url, url, lambda: flask.jsonify(x=test_uuid))\n\n    rv = client.get(url)\n\n    rv_x = flask.json.loads(rv.data)['x']\n    assert rv_x == str(test_uuid)\n    rv_uuid = uuid.UUID(rv_x)\n    assert rv_uuid == test_uuid,type='function_definition'\nline_star:177,line_end:189|char_star:0,char_end:31"->"type='INFORMATION BLOCK'\nline_star:178,line_end:189|char_star:4,char_end:31";
"assert rv_x == str(test_uuid),type='assert_statement'\nline_star:187,line_end:187|char_star:4,char_end:33"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:178,line_end:189|char_star:4,char_end:31"->"assert rv_x == str(test_uuid),type='assert_statement'\nline_star:187,line_end:187|char_star:4,char_end:33";
"rv_x == str(test_uuid),type='comparison_operator'\nline_star:187,line_end:187|char_star:11,char_end:33"[shape="box",fillcolor="white",style=filled];
"assert rv_x == str(test_uuid),type='assert_statement'\nline_star:187,line_end:187|char_star:4,char_end:33"->"rv_x == str(test_uuid),type='comparison_operator'\nline_star:187,line_end:187|char_star:11,char_end:33";
"rv_x,type='identifier'\nline_star:187,line_end:187|char_star:11,char_end:15"[shape="point",fillcolor="#121013",style=filled];
"rv_x == str(test_uuid),type='comparison_operator'\nline_star:187,line_end:187|char_star:11,char_end:33"->"rv_x,type='identifier'\nline_star:187,line_end:187|char_star:11,char_end:15";
"str(test_uuid),type='call'\nline_star:187,line_end:187|char_star:19,char_end:33"[shape="box",fillcolor="white",style=filled];
"rv_x == str(test_uuid),type='comparison_operator'\nline_star:187,line_end:187|char_star:11,char_end:33"->"str(test_uuid),type='call'\nline_star:187,line_end:187|char_star:19,char_end:33";
"str,type='identifier'\nline_star:187,line_end:187|char_star:19,char_end:22"[shape="point",fillcolor="#121013",style=filled];
"str(test_uuid),type='call'\nline_star:187,line_end:187|char_star:19,char_end:33"->"str,type='identifier'\nline_star:187,line_end:187|char_star:19,char_end:22";
"(test_uuid),type='argument_list'\nline_star:187,line_end:187|char_star:22,char_end:33"[shape="box",fillcolor="white",style=filled];
"str(test_uuid),type='call'\nline_star:187,line_end:187|char_star:19,char_end:33"->"(test_uuid),type='argument_list'\nline_star:187,line_end:187|char_star:22,char_end:33";
"test_uuid,type='identifier'\nline_star:187,line_end:187|char_star:23,char_end:32"[shape="point",fillcolor="#121013",style=filled];
"(test_uuid),type='argument_list'\nline_star:187,line_end:187|char_star:22,char_end:33"->"test_uuid,type='identifier'\nline_star:187,line_end:187|char_star:23,char_end:32";
"assert rv_uuid == test_uuid,type='assert_statement'\nline_star:189,line_end:189|char_star:4,char_end:31"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:178,line_end:189|char_star:4,char_end:31"->"assert rv_uuid == test_uuid,type='assert_statement'\nline_star:189,line_end:189|char_star:4,char_end:31";
"rv_uuid == test_uuid,type='comparison_operator'\nline_star:189,line_end:189|char_star:11,char_end:31"[shape="box",fillcolor="white",style=filled];
"assert rv_uuid == test_uuid,type='assert_statement'\nline_star:189,line_end:189|char_star:4,char_end:31"->"rv_uuid == test_uuid,type='comparison_operator'\nline_star:189,line_end:189|char_star:11,char_end:31";
"rv_uuid,type='identifier'\nline_star:189,line_end:189|char_star:11,char_end:18"[shape="point",fillcolor="#121013",style=filled];
"rv_uuid == test_uuid,type='comparison_operator'\nline_star:189,line_end:189|char_star:11,char_end:31"->"rv_uuid,type='identifier'\nline_star:189,line_end:189|char_star:11,char_end:18";
"test_uuid,type='identifier'\nline_star:189,line_end:189|char_star:22,char_end:31"[shape="point",fillcolor="#121013",style=filled];
"rv_uuid == test_uuid,type='comparison_operator'\nline_star:189,line_end:189|char_star:11,char_end:31"->"test_uuid,type='identifier'\nline_star:189,line_end:189|char_star:22,char_end:31";
"def test_json_attr(app, client):\n    @app.route('/add', methods=['POST'])\n    def add():\n        json = flask.request.get_json()\n        return str(json['a'] + json['b'])\n\n    rv = client.post(\n        '/add',\n        data=flask.json.dumps({'a': 1, 'b': 2}),\n        content_type='application/json',\n    )\n    assert rv.data == b'3',type='function_definition'\nline_star:192,line_end:203|char_star:0,char_end:26"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_json_attr(app, client):\n    @app.route('/add', methods=['POST'])\n    def add():\n        json = flask.request.get_json()\n        return str(json['a'] + json['b'])\n\n    rv = client.post(\n        '/add',\n        data=flask.json.dumps({'a': 1, 'b': 2}),\n        content_type='application/json',\n    )\n    assert rv.data == b'3',type='function_definition'\nline_star:192,line_end:203|char_star:0,char_end:26";
"test_json_attr,type='identifier'\nline_star:192,line_end:192|char_star:4,char_end:18"[shape="point",fillcolor="#121013",style=filled];
"def test_json_attr(app, client):\n    @app.route('/add', methods=['POST'])\n    def add():\n        json = flask.request.get_json()\n        return str(json['a'] + json['b'])\n\n    rv = client.post(\n        '/add',\n        data=flask.json.dumps({'a': 1, 'b': 2}),\n        content_type='application/json',\n    )\n    assert rv.data == b'3',type='function_definition'\nline_star:192,line_end:203|char_star:0,char_end:26"->"test_json_attr,type='identifier'\nline_star:192,line_end:192|char_star:4,char_end:18";
"(app, client),type='parameters'\nline_star:192,line_end:192|char_star:18,char_end:31"[shape="box",fillcolor="white",style=filled];
"def test_json_attr(app, client):\n    @app.route('/add', methods=['POST'])\n    def add():\n        json = flask.request.get_json()\n        return str(json['a'] + json['b'])\n\n    rv = client.post(\n        '/add',\n        data=flask.json.dumps({'a': 1, 'b': 2}),\n        content_type='application/json',\n    )\n    assert rv.data == b'3',type='function_definition'\nline_star:192,line_end:203|char_star:0,char_end:26"->"(app, client),type='parameters'\nline_star:192,line_end:192|char_star:18,char_end:31";
"app,type='identifier'\nline_star:192,line_end:192|char_star:19,char_end:22"[shape="point",fillcolor="#121013",style=filled];
"(app, client),type='parameters'\nline_star:192,line_end:192|char_star:18,char_end:31"->"app,type='identifier'\nline_star:192,line_end:192|char_star:19,char_end:22";
"client,type='identifier'\nline_star:192,line_end:192|char_star:24,char_end:30"[shape="point",fillcolor="#121013",style=filled];
"(app, client),type='parameters'\nline_star:192,line_end:192|char_star:18,char_end:31"->"client,type='identifier'\nline_star:192,line_end:192|char_star:24,char_end:30";
"type='INFORMATION BLOCK'\nline_star:193,line_end:203|char_star:4,char_end:26"[shape="point",fillcolor="#121013",style=filled];
"def test_json_attr(app, client):\n    @app.route('/add', methods=['POST'])\n    def add():\n        json = flask.request.get_json()\n        return str(json['a'] + json['b'])\n\n    rv = client.post(\n        '/add',\n        data=flask.json.dumps({'a': 1, 'b': 2}),\n        content_type='application/json',\n    )\n    assert rv.data == b'3',type='function_definition'\nline_star:192,line_end:203|char_star:0,char_end:26"->"type='INFORMATION BLOCK'\nline_star:193,line_end:203|char_star:4,char_end:26";
"@app.route('/add', methods=['POST'])\n    def add():\n        json = flask.request.get_json()\n        return str(json['a'] + json['b']),type='decorated_definition'\nline_star:193,line_end:196|char_star:4,char_end:41"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:193,line_end:203|char_star:4,char_end:26"->"@app.route('/add', methods=['POST'])\n    def add():\n        json = flask.request.get_json()\n        return str(json['a'] + json['b']),type='decorated_definition'\nline_star:193,line_end:196|char_star:4,char_end:41";
"@app.route('/add', methods=['POST']),type='decorator'\nline_star:193,line_end:193|char_star:4,char_end:40"[shape="box",fillcolor="white",style=filled];
"@app.route('/add', methods=['POST'])\n    def add():\n        json = flask.request.get_json()\n        return str(json['a'] + json['b']),type='decorated_definition'\nline_star:193,line_end:196|char_star:4,char_end:41"->"@app.route('/add', methods=['POST']),type='decorator'\nline_star:193,line_end:193|char_star:4,char_end:40";
"def add():\n        json = flask.request.get_json()\n        return str(json['a'] + json['b']),type='function_definition'\nline_star:194,line_end:196|char_star:4,char_end:41"[shape="box",fillcolor="#cee6b4",style=filled];
"@app.route('/add', methods=['POST'])\n    def add():\n        json = flask.request.get_json()\n        return str(json['a'] + json['b']),type='decorated_definition'\nline_star:193,line_end:196|char_star:4,char_end:41"->"def add():\n        json = flask.request.get_json()\n        return str(json['a'] + json['b']),type='function_definition'\nline_star:194,line_end:196|char_star:4,char_end:41";
"add,type='identifier'\nline_star:194,line_end:194|char_star:8,char_end:11"[shape="point",fillcolor="#121013",style=filled];
"def add():\n        json = flask.request.get_json()\n        return str(json['a'] + json['b']),type='function_definition'\nline_star:194,line_end:196|char_star:4,char_end:41"->"add,type='identifier'\nline_star:194,line_end:194|char_star:8,char_end:11";
"type='INFORMATION BLOCK'\nline_star:195,line_end:196|char_star:8,char_end:41"[shape="point",fillcolor="#121013",style=filled];
"def add():\n        json = flask.request.get_json()\n        return str(json['a'] + json['b']),type='function_definition'\nline_star:194,line_end:196|char_star:4,char_end:41"->"type='INFORMATION BLOCK'\nline_star:195,line_end:196|char_star:8,char_end:41";
"return str(json['a'] + json['b']),type='return_statement'\nline_star:196,line_end:196|char_star:8,char_end:41"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:195,line_end:196|char_star:8,char_end:41"->"return str(json['a'] + json['b']),type='return_statement'\nline_star:196,line_end:196|char_star:8,char_end:41";
"assert rv.data == b'3',type='assert_statement'\nline_star:203,line_end:203|char_star:4,char_end:26"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:193,line_end:203|char_star:4,char_end:26"->"assert rv.data == b'3',type='assert_statement'\nline_star:203,line_end:203|char_star:4,char_end:26";
"rv.data == b'3',type='comparison_operator'\nline_star:203,line_end:203|char_star:11,char_end:26"[shape="box",fillcolor="white",style=filled];
"assert rv.data == b'3',type='assert_statement'\nline_star:203,line_end:203|char_star:4,char_end:26"->"rv.data == b'3',type='comparison_operator'\nline_star:203,line_end:203|char_star:11,char_end:26";
"rv.data,type='attribute'\nline_star:203,line_end:203|char_star:11,char_end:18"[shape="box",fillcolor="white",style=filled];
"rv.data == b'3',type='comparison_operator'\nline_star:203,line_end:203|char_star:11,char_end:26"->"rv.data,type='attribute'\nline_star:203,line_end:203|char_star:11,char_end:18";
"rv,type='identifier'\nline_star:203,line_end:203|char_star:11,char_end:13"[shape="point",fillcolor="#121013",style=filled];
"rv.data,type='attribute'\nline_star:203,line_end:203|char_star:11,char_end:18"->"rv,type='identifier'\nline_star:203,line_end:203|char_star:11,char_end:13";
"data,type='identifier'\nline_star:203,line_end:203|char_star:14,char_end:18"[shape="point",fillcolor="#121013",style=filled];
"rv.data,type='attribute'\nline_star:203,line_end:203|char_star:11,char_end:18"->"data,type='identifier'\nline_star:203,line_end:203|char_star:14,char_end:18";
"def test_tojson_filter(app, req_ctx):\n    # The tojson filter is tested in Jinja, this confirms that it's\n    # using Flask's dumps.\n    rv = flask.render_template_string(\n        'const data = {{ data|tojson }};',\n        data={'name': '</script>', 'time': datetime.datetime(2021, 2, 1, 7, 15)},\n    )\n    assert rv == (\n        'const data = {'name': '\\u003c/script\\u003e','\n        ' 'time': 'Mon, 01 Feb 2021 07:15:00 GMT'};'\n    ),type='function_definition'\nline_star:206,line_end:216|char_star:0,char_end:5"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_tojson_filter(app, req_ctx):\n    # The tojson filter is tested in Jinja, this confirms that it's\n    # using Flask's dumps.\n    rv = flask.render_template_string(\n        'const data = {{ data|tojson }};',\n        data={'name': '</script>', 'time': datetime.datetime(2021, 2, 1, 7, 15)},\n    )\n    assert rv == (\n        'const data = {'name': '\\u003c/script\\u003e','\n        ' 'time': 'Mon, 01 Feb 2021 07:15:00 GMT'};'\n    ),type='function_definition'\nline_star:206,line_end:216|char_star:0,char_end:5";
"test_tojson_filter,type='identifier'\nline_star:206,line_end:206|char_star:4,char_end:22"[shape="point",fillcolor="#121013",style=filled];
"def test_tojson_filter(app, req_ctx):\n    # The tojson filter is tested in Jinja, this confirms that it's\n    # using Flask's dumps.\n    rv = flask.render_template_string(\n        'const data = {{ data|tojson }};',\n        data={'name': '</script>', 'time': datetime.datetime(2021, 2, 1, 7, 15)},\n    )\n    assert rv == (\n        'const data = {'name': '\\u003c/script\\u003e','\n        ' 'time': 'Mon, 01 Feb 2021 07:15:00 GMT'};'\n    ),type='function_definition'\nline_star:206,line_end:216|char_star:0,char_end:5"->"test_tojson_filter,type='identifier'\nline_star:206,line_end:206|char_star:4,char_end:22";
"(app, req_ctx),type='parameters'\nline_star:206,line_end:206|char_star:22,char_end:36"[shape="box",fillcolor="white",style=filled];
"def test_tojson_filter(app, req_ctx):\n    # The tojson filter is tested in Jinja, this confirms that it's\n    # using Flask's dumps.\n    rv = flask.render_template_string(\n        'const data = {{ data|tojson }};',\n        data={'name': '</script>', 'time': datetime.datetime(2021, 2, 1, 7, 15)},\n    )\n    assert rv == (\n        'const data = {'name': '\\u003c/script\\u003e','\n        ' 'time': 'Mon, 01 Feb 2021 07:15:00 GMT'};'\n    ),type='function_definition'\nline_star:206,line_end:216|char_star:0,char_end:5"->"(app, req_ctx),type='parameters'\nline_star:206,line_end:206|char_star:22,char_end:36";
"app,type='identifier'\nline_star:206,line_end:206|char_star:23,char_end:26"[shape="point",fillcolor="#121013",style=filled];
"(app, req_ctx),type='parameters'\nline_star:206,line_end:206|char_star:22,char_end:36"->"app,type='identifier'\nline_star:206,line_end:206|char_star:23,char_end:26";
"req_ctx,type='identifier'\nline_star:206,line_end:206|char_star:28,char_end:35"[shape="point",fillcolor="#121013",style=filled];
"(app, req_ctx),type='parameters'\nline_star:206,line_end:206|char_star:22,char_end:36"->"req_ctx,type='identifier'\nline_star:206,line_end:206|char_star:28,char_end:35";
"# The tojson filter is tested in Jinja, this confirms that it's,type='comment'\nline_star:207,line_end:207|char_star:4,char_end:67"[shape="box",fillcolor="#f0c929",style=filled];
"def test_tojson_filter(app, req_ctx):\n    # The tojson filter is tested in Jinja, this confirms that it's\n    # using Flask's dumps.\n    rv = flask.render_template_string(\n        'const data = {{ data|tojson }};',\n        data={'name': '</script>', 'time': datetime.datetime(2021, 2, 1, 7, 15)},\n    )\n    assert rv == (\n        'const data = {'name': '\\u003c/script\\u003e','\n        ' 'time': 'Mon, 01 Feb 2021 07:15:00 GMT'};'\n    ),type='function_definition'\nline_star:206,line_end:216|char_star:0,char_end:5"->"# The tojson filter is tested in Jinja, this confirms that it's,type='comment'\nline_star:207,line_end:207|char_star:4,char_end:67";
"# using Flask's dumps.,type='comment'\nline_star:208,line_end:208|char_star:4,char_end:26"[shape="box",fillcolor="#f0c929",style=filled];
"def test_tojson_filter(app, req_ctx):\n    # The tojson filter is tested in Jinja, this confirms that it's\n    # using Flask's dumps.\n    rv = flask.render_template_string(\n        'const data = {{ data|tojson }};',\n        data={'name': '</script>', 'time': datetime.datetime(2021, 2, 1, 7, 15)},\n    )\n    assert rv == (\n        'const data = {'name': '\\u003c/script\\u003e','\n        ' 'time': 'Mon, 01 Feb 2021 07:15:00 GMT'};'\n    ),type='function_definition'\nline_star:206,line_end:216|char_star:0,char_end:5"->"# using Flask's dumps.,type='comment'\nline_star:208,line_end:208|char_star:4,char_end:26";
"type='INFORMATION BLOCK'\nline_star:209,line_end:216|char_star:4,char_end:5"[shape="point",fillcolor="#121013",style=filled];
"def test_tojson_filter(app, req_ctx):\n    # The tojson filter is tested in Jinja, this confirms that it's\n    # using Flask's dumps.\n    rv = flask.render_template_string(\n        'const data = {{ data|tojson }};',\n        data={'name': '</script>', 'time': datetime.datetime(2021, 2, 1, 7, 15)},\n    )\n    assert rv == (\n        'const data = {'name': '\\u003c/script\\u003e','\n        ' 'time': 'Mon, 01 Feb 2021 07:15:00 GMT'};'\n    ),type='function_definition'\nline_star:206,line_end:216|char_star:0,char_end:5"->"type='INFORMATION BLOCK'\nline_star:209,line_end:216|char_star:4,char_end:5";
"assert rv == (\n        'const data = {'name': '\\u003c/script\\u003e','\n        ' 'time': 'Mon, 01 Feb 2021 07:15:00 GMT'};'\n    ),type='assert_statement'\nline_star:213,line_end:216|char_star:4,char_end:5"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:209,line_end:216|char_star:4,char_end:5"->"assert rv == (\n        'const data = {'name': '\\u003c/script\\u003e','\n        ' 'time': 'Mon, 01 Feb 2021 07:15:00 GMT'};'\n    ),type='assert_statement'\nline_star:213,line_end:216|char_star:4,char_end:5";
"rv == (\n        'const data = {'name': '\\u003c/script\\u003e','\n        ' 'time': 'Mon, 01 Feb 2021 07:15:00 GMT'};'\n    ),type='comparison_operator'\nline_star:213,line_end:216|char_star:11,char_end:5"[shape="box",fillcolor="white",style=filled];
"assert rv == (\n        'const data = {'name': '\\u003c/script\\u003e','\n        ' 'time': 'Mon, 01 Feb 2021 07:15:00 GMT'};'\n    ),type='assert_statement'\nline_star:213,line_end:216|char_star:4,char_end:5"->"rv == (\n        'const data = {'name': '\\u003c/script\\u003e','\n        ' 'time': 'Mon, 01 Feb 2021 07:15:00 GMT'};'\n    ),type='comparison_operator'\nline_star:213,line_end:216|char_star:11,char_end:5";
"rv,type='identifier'\nline_star:213,line_end:213|char_star:11,char_end:13"[shape="point",fillcolor="#121013",style=filled];
"rv == (\n        'const data = {'name': '\\u003c/script\\u003e','\n        ' 'time': 'Mon, 01 Feb 2021 07:15:00 GMT'};'\n    ),type='comparison_operator'\nline_star:213,line_end:216|char_star:11,char_end:5"->"rv,type='identifier'\nline_star:213,line_end:213|char_star:11,char_end:13";
"(\n        'const data = {'name': '\\u003c/script\\u003e','\n        ' 'time': 'Mon, 01 Feb 2021 07:15:00 GMT'};'\n    ),type='parenthesized_expression'\nline_star:213,line_end:216|char_star:17,char_end:5"[shape="box",fillcolor="white",style=filled];
"rv == (\n        'const data = {'name': '\\u003c/script\\u003e','\n        ' 'time': 'Mon, 01 Feb 2021 07:15:00 GMT'};'\n    ),type='comparison_operator'\nline_star:213,line_end:216|char_star:11,char_end:5"->"(\n        'const data = {'name': '\\u003c/script\\u003e','\n        ' 'time': 'Mon, 01 Feb 2021 07:15:00 GMT'};'\n    ),type='parenthesized_expression'\nline_star:213,line_end:216|char_star:17,char_end:5";
"'const data = {'name': '\\u003c/script\\u003e','\n        ' 'time': 'Mon, 01 Feb 2021 07:15:00 GMT'};',type='concatenated_string'\nline_star:214,line_end:215|char_star:8,char_end:52"[shape="box",fillcolor="white",style=filled];
"(\n        'const data = {'name': '\\u003c/script\\u003e','\n        ' 'time': 'Mon, 01 Feb 2021 07:15:00 GMT'};'\n    ),type='parenthesized_expression'\nline_star:213,line_end:216|char_star:17,char_end:5"->"'const data = {'name': '\\u003c/script\\u003e','\n        ' 'time': 'Mon, 01 Feb 2021 07:15:00 GMT'};',type='concatenated_string'\nline_star:214,line_end:215|char_star:8,char_end:52";
"def test_json_customization(app, client):\n    class X:  # noqa: B903, for Python2 compatibility\n        def __init__(self, val):\n            self.val = val\n\n    class MyEncoder(flask.json.JSONEncoder):\n        def default(self, o):\n            if isinstance(o, X):\n                return f'<{o.val}>'\n            return flask.json.JSONEncoder.default(self, o)\n\n    class MyDecoder(flask.json.JSONDecoder):\n        def __init__(self, *args, **kwargs):\n            kwargs.setdefault('object_hook', self.object_hook)\n            flask.json.JSONDecoder.__init__(self, *args, **kwargs)\n\n        def object_hook(self, obj):\n            if len(obj) == 1 and '_foo' in obj:\n                return X(obj['_foo'])\n            return obj\n\n    app.json_encoder = MyEncoder\n    app.json_decoder = MyDecoder\n\n    @app.route('/', methods=['POST'])\n    def index():\n        return flask.json.dumps(flask.request.get_json()['x'])\n\n    rv = client.post(\n        '/',\n        data=flask.json.dumps({'x': {'_foo': 42}}),\n        content_type='application/json',\n    )\n    assert rv.data == b''<42>'',type='function_definition'\nline_star:219,line_end:252|char_star:0,char_end:31"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_json_customization(app, client):\n    class X:  # noqa: B903, for Python2 compatibility\n        def __init__(self, val):\n            self.val = val\n\n    class MyEncoder(flask.json.JSONEncoder):\n        def default(self, o):\n            if isinstance(o, X):\n                return f'<{o.val}>'\n            return flask.json.JSONEncoder.default(self, o)\n\n    class MyDecoder(flask.json.JSONDecoder):\n        def __init__(self, *args, **kwargs):\n            kwargs.setdefault('object_hook', self.object_hook)\n            flask.json.JSONDecoder.__init__(self, *args, **kwargs)\n\n        def object_hook(self, obj):\n            if len(obj) == 1 and '_foo' in obj:\n                return X(obj['_foo'])\n            return obj\n\n    app.json_encoder = MyEncoder\n    app.json_decoder = MyDecoder\n\n    @app.route('/', methods=['POST'])\n    def index():\n        return flask.json.dumps(flask.request.get_json()['x'])\n\n    rv = client.post(\n        '/',\n        data=flask.json.dumps({'x': {'_foo': 42}}),\n        content_type='application/json',\n    )\n    assert rv.data == b''<42>'',type='function_definition'\nline_star:219,line_end:252|char_star:0,char_end:31";
"test_json_customization,type='identifier'\nline_star:219,line_end:219|char_star:4,char_end:27"[shape="point",fillcolor="#121013",style=filled];
"def test_json_customization(app, client):\n    class X:  # noqa: B903, for Python2 compatibility\n        def __init__(self, val):\n            self.val = val\n\n    class MyEncoder(flask.json.JSONEncoder):\n        def default(self, o):\n            if isinstance(o, X):\n                return f'<{o.val}>'\n            return flask.json.JSONEncoder.default(self, o)\n\n    class MyDecoder(flask.json.JSONDecoder):\n        def __init__(self, *args, **kwargs):\n            kwargs.setdefault('object_hook', self.object_hook)\n            flask.json.JSONDecoder.__init__(self, *args, **kwargs)\n\n        def object_hook(self, obj):\n            if len(obj) == 1 and '_foo' in obj:\n                return X(obj['_foo'])\n            return obj\n\n    app.json_encoder = MyEncoder\n    app.json_decoder = MyDecoder\n\n    @app.route('/', methods=['POST'])\n    def index():\n        return flask.json.dumps(flask.request.get_json()['x'])\n\n    rv = client.post(\n        '/',\n        data=flask.json.dumps({'x': {'_foo': 42}}),\n        content_type='application/json',\n    )\n    assert rv.data == b''<42>'',type='function_definition'\nline_star:219,line_end:252|char_star:0,char_end:31"->"test_json_customization,type='identifier'\nline_star:219,line_end:219|char_star:4,char_end:27";
"(app, client),type='parameters'\nline_star:219,line_end:219|char_star:27,char_end:40"[shape="box",fillcolor="white",style=filled];
"def test_json_customization(app, client):\n    class X:  # noqa: B903, for Python2 compatibility\n        def __init__(self, val):\n            self.val = val\n\n    class MyEncoder(flask.json.JSONEncoder):\n        def default(self, o):\n            if isinstance(o, X):\n                return f'<{o.val}>'\n            return flask.json.JSONEncoder.default(self, o)\n\n    class MyDecoder(flask.json.JSONDecoder):\n        def __init__(self, *args, **kwargs):\n            kwargs.setdefault('object_hook', self.object_hook)\n            flask.json.JSONDecoder.__init__(self, *args, **kwargs)\n\n        def object_hook(self, obj):\n            if len(obj) == 1 and '_foo' in obj:\n                return X(obj['_foo'])\n            return obj\n\n    app.json_encoder = MyEncoder\n    app.json_decoder = MyDecoder\n\n    @app.route('/', methods=['POST'])\n    def index():\n        return flask.json.dumps(flask.request.get_json()['x'])\n\n    rv = client.post(\n        '/',\n        data=flask.json.dumps({'x': {'_foo': 42}}),\n        content_type='application/json',\n    )\n    assert rv.data == b''<42>'',type='function_definition'\nline_star:219,line_end:252|char_star:0,char_end:31"->"(app, client),type='parameters'\nline_star:219,line_end:219|char_star:27,char_end:40";
"app,type='identifier'\nline_star:219,line_end:219|char_star:28,char_end:31"[shape="point",fillcolor="#121013",style=filled];
"(app, client),type='parameters'\nline_star:219,line_end:219|char_star:27,char_end:40"->"app,type='identifier'\nline_star:219,line_end:219|char_star:28,char_end:31";
"client,type='identifier'\nline_star:219,line_end:219|char_star:33,char_end:39"[shape="point",fillcolor="#121013",style=filled];
"(app, client),type='parameters'\nline_star:219,line_end:219|char_star:27,char_end:40"->"client,type='identifier'\nline_star:219,line_end:219|char_star:33,char_end:39";
"type='INFORMATION BLOCK'\nline_star:220,line_end:252|char_star:4,char_end:31"[shape="point",fillcolor="#121013",style=filled];
"def test_json_customization(app, client):\n    class X:  # noqa: B903, for Python2 compatibility\n        def __init__(self, val):\n            self.val = val\n\n    class MyEncoder(flask.json.JSONEncoder):\n        def default(self, o):\n            if isinstance(o, X):\n                return f'<{o.val}>'\n            return flask.json.JSONEncoder.default(self, o)\n\n    class MyDecoder(flask.json.JSONDecoder):\n        def __init__(self, *args, **kwargs):\n            kwargs.setdefault('object_hook', self.object_hook)\n            flask.json.JSONDecoder.__init__(self, *args, **kwargs)\n\n        def object_hook(self, obj):\n            if len(obj) == 1 and '_foo' in obj:\n                return X(obj['_foo'])\n            return obj\n\n    app.json_encoder = MyEncoder\n    app.json_decoder = MyDecoder\n\n    @app.route('/', methods=['POST'])\n    def index():\n        return flask.json.dumps(flask.request.get_json()['x'])\n\n    rv = client.post(\n        '/',\n        data=flask.json.dumps({'x': {'_foo': 42}}),\n        content_type='application/json',\n    )\n    assert rv.data == b''<42>'',type='function_definition'\nline_star:219,line_end:252|char_star:0,char_end:31"->"type='INFORMATION BLOCK'\nline_star:220,line_end:252|char_star:4,char_end:31";
"class X:  # noqa: B903, for Python2 compatibility\n        def __init__(self, val):\n            self.val = val,type='class_definition'\nline_star:220,line_end:222|char_star:4,char_end:26"[shape="box",fillcolor="#ffdf91",style=filled];
"type='INFORMATION BLOCK'\nline_star:220,line_end:252|char_star:4,char_end:31"->"class X:  # noqa: B903, for Python2 compatibility\n        def __init__(self, val):\n            self.val = val,type='class_definition'\nline_star:220,line_end:222|char_star:4,char_end:26";
"X,type='identifier'\nline_star:220,line_end:220|char_star:10,char_end:11"[shape="point",fillcolor="#121013",style=filled];
"class X:  # noqa: B903, for Python2 compatibility\n        def __init__(self, val):\n            self.val = val,type='class_definition'\nline_star:220,line_end:222|char_star:4,char_end:26"->"X,type='identifier'\nline_star:220,line_end:220|char_star:10,char_end:11";
"# noqa: B903, for Python2 compatibility,type='comment'\nline_star:220,line_end:220|char_star:14,char_end:53"[shape="box",fillcolor="#f0c929",style=filled];
"class X:  # noqa: B903, for Python2 compatibility\n        def __init__(self, val):\n            self.val = val,type='class_definition'\nline_star:220,line_end:222|char_star:4,char_end:26"->"# noqa: B903, for Python2 compatibility,type='comment'\nline_star:220,line_end:220|char_star:14,char_end:53";
"type='INFORMATION BLOCK'\nline_star:221,line_end:222|char_star:8,char_end:26"[shape="point",fillcolor="#121013",style=filled];
"class X:  # noqa: B903, for Python2 compatibility\n        def __init__(self, val):\n            self.val = val,type='class_definition'\nline_star:220,line_end:222|char_star:4,char_end:26"->"type='INFORMATION BLOCK'\nline_star:221,line_end:222|char_star:8,char_end:26";
"def __init__(self, val):\n            self.val = val,type='function_definition'\nline_star:221,line_end:222|char_star:8,char_end:26"[shape="box",fillcolor="#cee6b4",style=filled];
"type='INFORMATION BLOCK'\nline_star:221,line_end:222|char_star:8,char_end:26"->"def __init__(self, val):\n            self.val = val,type='function_definition'\nline_star:221,line_end:222|char_star:8,char_end:26";
"__init__,type='identifier'\nline_star:221,line_end:221|char_star:12,char_end:20"[shape="point",fillcolor="#121013",style=filled];
"def __init__(self, val):\n            self.val = val,type='function_definition'\nline_star:221,line_end:222|char_star:8,char_end:26"->"__init__,type='identifier'\nline_star:221,line_end:221|char_star:12,char_end:20";
"(self, val),type='parameters'\nline_star:221,line_end:221|char_star:20,char_end:31"[shape="box",fillcolor="white",style=filled];
"def __init__(self, val):\n            self.val = val,type='function_definition'\nline_star:221,line_end:222|char_star:8,char_end:26"->"(self, val),type='parameters'\nline_star:221,line_end:221|char_star:20,char_end:31";
"self,type='identifier'\nline_star:221,line_end:221|char_star:21,char_end:25"[shape="point",fillcolor="#121013",style=filled];
"(self, val),type='parameters'\nline_star:221,line_end:221|char_star:20,char_end:31"->"self,type='identifier'\nline_star:221,line_end:221|char_star:21,char_end:25";
"val,type='identifier'\nline_star:221,line_end:221|char_star:27,char_end:30"[shape="point",fillcolor="#121013",style=filled];
"(self, val),type='parameters'\nline_star:221,line_end:221|char_star:20,char_end:31"->"val,type='identifier'\nline_star:221,line_end:221|char_star:27,char_end:30";
"type='INFORMATION BLOCK'\nline_star:222,line_end:222|char_star:12,char_end:26"[shape="point",fillcolor="#121013",style=filled];
"def __init__(self, val):\n            self.val = val,type='function_definition'\nline_star:221,line_end:222|char_star:8,char_end:26"->"type='INFORMATION BLOCK'\nline_star:222,line_end:222|char_star:12,char_end:26";
"class MyEncoder(flask.json.JSONEncoder):\n        def default(self, o):\n            if isinstance(o, X):\n                return f'<{o.val}>'\n            return flask.json.JSONEncoder.default(self, o),type='class_definition'\nline_star:224,line_end:228|char_star:4,char_end:58"[shape="box",fillcolor="#ffdf91",style=filled];
"type='INFORMATION BLOCK'\nline_star:220,line_end:252|char_star:4,char_end:31"->"class MyEncoder(flask.json.JSONEncoder):\n        def default(self, o):\n            if isinstance(o, X):\n                return f'<{o.val}>'\n            return flask.json.JSONEncoder.default(self, o),type='class_definition'\nline_star:224,line_end:228|char_star:4,char_end:58";
"MyEncoder,type='identifier'\nline_star:224,line_end:224|char_star:10,char_end:19"[shape="point",fillcolor="#121013",style=filled];
"class MyEncoder(flask.json.JSONEncoder):\n        def default(self, o):\n            if isinstance(o, X):\n                return f'<{o.val}>'\n            return flask.json.JSONEncoder.default(self, o),type='class_definition'\nline_star:224,line_end:228|char_star:4,char_end:58"->"MyEncoder,type='identifier'\nline_star:224,line_end:224|char_star:10,char_end:19";
"(flask.json.JSONEncoder),type='argument_list'\nline_star:224,line_end:224|char_star:19,char_end:43"[shape="box",fillcolor="white",style=filled];
"class MyEncoder(flask.json.JSONEncoder):\n        def default(self, o):\n            if isinstance(o, X):\n                return f'<{o.val}>'\n            return flask.json.JSONEncoder.default(self, o),type='class_definition'\nline_star:224,line_end:228|char_star:4,char_end:58"->"(flask.json.JSONEncoder),type='argument_list'\nline_star:224,line_end:224|char_star:19,char_end:43";
"flask.json.JSONEncoder,type='attribute'\nline_star:224,line_end:224|char_star:20,char_end:42"[shape="box",fillcolor="white",style=filled];
"(flask.json.JSONEncoder),type='argument_list'\nline_star:224,line_end:224|char_star:19,char_end:43"->"flask.json.JSONEncoder,type='attribute'\nline_star:224,line_end:224|char_star:20,char_end:42";
"flask.json,type='attribute'\nline_star:224,line_end:224|char_star:20,char_end:30"[shape="box",fillcolor="white",style=filled];
"flask.json.JSONEncoder,type='attribute'\nline_star:224,line_end:224|char_star:20,char_end:42"->"flask.json,type='attribute'\nline_star:224,line_end:224|char_star:20,char_end:30";
"flask,type='identifier'\nline_star:224,line_end:224|char_star:20,char_end:25"[shape="point",fillcolor="#121013",style=filled];
"flask.json,type='attribute'\nline_star:224,line_end:224|char_star:20,char_end:30"->"flask,type='identifier'\nline_star:224,line_end:224|char_star:20,char_end:25";
"json,type='identifier'\nline_star:224,line_end:224|char_star:26,char_end:30"[shape="point",fillcolor="#121013",style=filled];
"flask.json,type='attribute'\nline_star:224,line_end:224|char_star:20,char_end:30"->"json,type='identifier'\nline_star:224,line_end:224|char_star:26,char_end:30";
"JSONEncoder,type='identifier'\nline_star:224,line_end:224|char_star:31,char_end:42"[shape="point",fillcolor="#121013",style=filled];
"flask.json.JSONEncoder,type='attribute'\nline_star:224,line_end:224|char_star:20,char_end:42"->"JSONEncoder,type='identifier'\nline_star:224,line_end:224|char_star:31,char_end:42";
"type='INFORMATION BLOCK'\nline_star:225,line_end:228|char_star:8,char_end:58"[shape="point",fillcolor="#121013",style=filled];
"class MyEncoder(flask.json.JSONEncoder):\n        def default(self, o):\n            if isinstance(o, X):\n                return f'<{o.val}>'\n            return flask.json.JSONEncoder.default(self, o),type='class_definition'\nline_star:224,line_end:228|char_star:4,char_end:58"->"type='INFORMATION BLOCK'\nline_star:225,line_end:228|char_star:8,char_end:58";
"def default(self, o):\n            if isinstance(o, X):\n                return f'<{o.val}>'\n            return flask.json.JSONEncoder.default(self, o),type='function_definition'\nline_star:225,line_end:228|char_star:8,char_end:58"[shape="box",fillcolor="#cee6b4",style=filled];
"type='INFORMATION BLOCK'\nline_star:225,line_end:228|char_star:8,char_end:58"->"def default(self, o):\n            if isinstance(o, X):\n                return f'<{o.val}>'\n            return flask.json.JSONEncoder.default(self, o),type='function_definition'\nline_star:225,line_end:228|char_star:8,char_end:58";
"default,type='identifier'\nline_star:225,line_end:225|char_star:12,char_end:19"[shape="point",fillcolor="#121013",style=filled];
"def default(self, o):\n            if isinstance(o, X):\n                return f'<{o.val}>'\n            return flask.json.JSONEncoder.default(self, o),type='function_definition'\nline_star:225,line_end:228|char_star:8,char_end:58"->"default,type='identifier'\nline_star:225,line_end:225|char_star:12,char_end:19";
"(self, o),type='parameters'\nline_star:225,line_end:225|char_star:19,char_end:28"[shape="box",fillcolor="white",style=filled];
"def default(self, o):\n            if isinstance(o, X):\n                return f'<{o.val}>'\n            return flask.json.JSONEncoder.default(self, o),type='function_definition'\nline_star:225,line_end:228|char_star:8,char_end:58"->"(self, o),type='parameters'\nline_star:225,line_end:225|char_star:19,char_end:28";
"self,type='identifier'\nline_star:225,line_end:225|char_star:20,char_end:24"[shape="point",fillcolor="#121013",style=filled];
"(self, o),type='parameters'\nline_star:225,line_end:225|char_star:19,char_end:28"->"self,type='identifier'\nline_star:225,line_end:225|char_star:20,char_end:24";
"o,type='identifier'\nline_star:225,line_end:225|char_star:26,char_end:27"[shape="point",fillcolor="#121013",style=filled];
"(self, o),type='parameters'\nline_star:225,line_end:225|char_star:19,char_end:28"->"o,type='identifier'\nline_star:225,line_end:225|char_star:26,char_end:27";
"type='INFORMATION BLOCK'\nline_star:226,line_end:228|char_star:12,char_end:58"[shape="point",fillcolor="#121013",style=filled];
"def default(self, o):\n            if isinstance(o, X):\n                return f'<{o.val}>'\n            return flask.json.JSONEncoder.default(self, o),type='function_definition'\nline_star:225,line_end:228|char_star:8,char_end:58"->"type='INFORMATION BLOCK'\nline_star:226,line_end:228|char_star:12,char_end:58";
"if isinstance(o, X):\n                return f'<{o.val}>',type='if_statement'\nline_star:226,line_end:227|char_star:12,char_end:35"[shape="box",fillcolor="#9ecca4",style=filled];
"type='INFORMATION BLOCK'\nline_star:226,line_end:228|char_star:12,char_end:58"->"if isinstance(o, X):\n                return f'<{o.val}>',type='if_statement'\nline_star:226,line_end:227|char_star:12,char_end:35";
"return flask.json.JSONEncoder.default(self, o),type='return_statement'\nline_star:228,line_end:228|char_star:12,char_end:58"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:226,line_end:228|char_star:12,char_end:58"->"return flask.json.JSONEncoder.default(self, o),type='return_statement'\nline_star:228,line_end:228|char_star:12,char_end:58";
"class MyDecoder(flask.json.JSONDecoder):\n        def __init__(self, *args, **kwargs):\n            kwargs.setdefault('object_hook', self.object_hook)\n            flask.json.JSONDecoder.__init__(self, *args, **kwargs)\n\n        def object_hook(self, obj):\n            if len(obj) == 1 and '_foo' in obj:\n                return X(obj['_foo'])\n            return obj,type='class_definition'\nline_star:230,line_end:238|char_star:4,char_end:22"[shape="box",fillcolor="#ffdf91",style=filled];
"type='INFORMATION BLOCK'\nline_star:220,line_end:252|char_star:4,char_end:31"->"class MyDecoder(flask.json.JSONDecoder):\n        def __init__(self, *args, **kwargs):\n            kwargs.setdefault('object_hook', self.object_hook)\n            flask.json.JSONDecoder.__init__(self, *args, **kwargs)\n\n        def object_hook(self, obj):\n            if len(obj) == 1 and '_foo' in obj:\n                return X(obj['_foo'])\n            return obj,type='class_definition'\nline_star:230,line_end:238|char_star:4,char_end:22";
"MyDecoder,type='identifier'\nline_star:230,line_end:230|char_star:10,char_end:19"[shape="point",fillcolor="#121013",style=filled];
"class MyDecoder(flask.json.JSONDecoder):\n        def __init__(self, *args, **kwargs):\n            kwargs.setdefault('object_hook', self.object_hook)\n            flask.json.JSONDecoder.__init__(self, *args, **kwargs)\n\n        def object_hook(self, obj):\n            if len(obj) == 1 and '_foo' in obj:\n                return X(obj['_foo'])\n            return obj,type='class_definition'\nline_star:230,line_end:238|char_star:4,char_end:22"->"MyDecoder,type='identifier'\nline_star:230,line_end:230|char_star:10,char_end:19";
"(flask.json.JSONDecoder),type='argument_list'\nline_star:230,line_end:230|char_star:19,char_end:43"[shape="box",fillcolor="white",style=filled];
"class MyDecoder(flask.json.JSONDecoder):\n        def __init__(self, *args, **kwargs):\n            kwargs.setdefault('object_hook', self.object_hook)\n            flask.json.JSONDecoder.__init__(self, *args, **kwargs)\n\n        def object_hook(self, obj):\n            if len(obj) == 1 and '_foo' in obj:\n                return X(obj['_foo'])\n            return obj,type='class_definition'\nline_star:230,line_end:238|char_star:4,char_end:22"->"(flask.json.JSONDecoder),type='argument_list'\nline_star:230,line_end:230|char_star:19,char_end:43";
"flask.json.JSONDecoder,type='attribute'\nline_star:230,line_end:230|char_star:20,char_end:42"[shape="box",fillcolor="white",style=filled];
"(flask.json.JSONDecoder),type='argument_list'\nline_star:230,line_end:230|char_star:19,char_end:43"->"flask.json.JSONDecoder,type='attribute'\nline_star:230,line_end:230|char_star:20,char_end:42";
"flask.json,type='attribute'\nline_star:230,line_end:230|char_star:20,char_end:30"[shape="box",fillcolor="white",style=filled];
"flask.json.JSONDecoder,type='attribute'\nline_star:230,line_end:230|char_star:20,char_end:42"->"flask.json,type='attribute'\nline_star:230,line_end:230|char_star:20,char_end:30";
"flask,type='identifier'\nline_star:230,line_end:230|char_star:20,char_end:25"[shape="point",fillcolor="#121013",style=filled];
"flask.json,type='attribute'\nline_star:230,line_end:230|char_star:20,char_end:30"->"flask,type='identifier'\nline_star:230,line_end:230|char_star:20,char_end:25";
"json,type='identifier'\nline_star:230,line_end:230|char_star:26,char_end:30"[shape="point",fillcolor="#121013",style=filled];
"flask.json,type='attribute'\nline_star:230,line_end:230|char_star:20,char_end:30"->"json,type='identifier'\nline_star:230,line_end:230|char_star:26,char_end:30";
"JSONDecoder,type='identifier'\nline_star:230,line_end:230|char_star:31,char_end:42"[shape="point",fillcolor="#121013",style=filled];
"flask.json.JSONDecoder,type='attribute'\nline_star:230,line_end:230|char_star:20,char_end:42"->"JSONDecoder,type='identifier'\nline_star:230,line_end:230|char_star:31,char_end:42";
"type='INFORMATION BLOCK'\nline_star:231,line_end:238|char_star:8,char_end:22"[shape="point",fillcolor="#121013",style=filled];
"class MyDecoder(flask.json.JSONDecoder):\n        def __init__(self, *args, **kwargs):\n            kwargs.setdefault('object_hook', self.object_hook)\n            flask.json.JSONDecoder.__init__(self, *args, **kwargs)\n\n        def object_hook(self, obj):\n            if len(obj) == 1 and '_foo' in obj:\n                return X(obj['_foo'])\n            return obj,type='class_definition'\nline_star:230,line_end:238|char_star:4,char_end:22"->"type='INFORMATION BLOCK'\nline_star:231,line_end:238|char_star:8,char_end:22";
"def __init__(self, *args, **kwargs):\n            kwargs.setdefault('object_hook', self.object_hook)\n            flask.json.JSONDecoder.__init__(self, *args, **kwargs),type='function_definition'\nline_star:231,line_end:233|char_star:8,char_end:66"[shape="box",fillcolor="#cee6b4",style=filled];
"type='INFORMATION BLOCK'\nline_star:231,line_end:238|char_star:8,char_end:22"->"def __init__(self, *args, **kwargs):\n            kwargs.setdefault('object_hook', self.object_hook)\n            flask.json.JSONDecoder.__init__(self, *args, **kwargs),type='function_definition'\nline_star:231,line_end:233|char_star:8,char_end:66";
"__init__,type='identifier'\nline_star:231,line_end:231|char_star:12,char_end:20"[shape="point",fillcolor="#121013",style=filled];
"def __init__(self, *args, **kwargs):\n            kwargs.setdefault('object_hook', self.object_hook)\n            flask.json.JSONDecoder.__init__(self, *args, **kwargs),type='function_definition'\nline_star:231,line_end:233|char_star:8,char_end:66"->"__init__,type='identifier'\nline_star:231,line_end:231|char_star:12,char_end:20";
"(self, *args, **kwargs),type='parameters'\nline_star:231,line_end:231|char_star:20,char_end:43"[shape="box",fillcolor="white",style=filled];
"def __init__(self, *args, **kwargs):\n            kwargs.setdefault('object_hook', self.object_hook)\n            flask.json.JSONDecoder.__init__(self, *args, **kwargs),type='function_definition'\nline_star:231,line_end:233|char_star:8,char_end:66"->"(self, *args, **kwargs),type='parameters'\nline_star:231,line_end:231|char_star:20,char_end:43";
"self,type='identifier'\nline_star:231,line_end:231|char_star:21,char_end:25"[shape="point",fillcolor="#121013",style=filled];
"(self, *args, **kwargs),type='parameters'\nline_star:231,line_end:231|char_star:20,char_end:43"->"self,type='identifier'\nline_star:231,line_end:231|char_star:21,char_end:25";
"*args,type='list_splat_pattern'\nline_star:231,line_end:231|char_star:27,char_end:32"[shape="box",fillcolor="white",style=filled];
"(self, *args, **kwargs),type='parameters'\nline_star:231,line_end:231|char_star:20,char_end:43"->"*args,type='list_splat_pattern'\nline_star:231,line_end:231|char_star:27,char_end:32";
"*,type='*'\nline_star:231,line_end:231|char_star:27,char_end:28"[shape="box",fillcolor="white",style=filled];
"*args,type='list_splat_pattern'\nline_star:231,line_end:231|char_star:27,char_end:32"->"*,type='*'\nline_star:231,line_end:231|char_star:27,char_end:28";
"args,type='identifier'\nline_star:231,line_end:231|char_star:28,char_end:32"[shape="point",fillcolor="#121013",style=filled];
"*args,type='list_splat_pattern'\nline_star:231,line_end:231|char_star:27,char_end:32"->"args,type='identifier'\nline_star:231,line_end:231|char_star:28,char_end:32";
"**kwargs,type='dictionary_splat_pattern'\nline_star:231,line_end:231|char_star:34,char_end:42"[shape="box",fillcolor="white",style=filled];
"(self, *args, **kwargs),type='parameters'\nline_star:231,line_end:231|char_star:20,char_end:43"->"**kwargs,type='dictionary_splat_pattern'\nline_star:231,line_end:231|char_star:34,char_end:42";
"**,type='**'\nline_star:231,line_end:231|char_star:34,char_end:36"[shape="box",fillcolor="white",style=filled];
"**kwargs,type='dictionary_splat_pattern'\nline_star:231,line_end:231|char_star:34,char_end:42"->"**,type='**'\nline_star:231,line_end:231|char_star:34,char_end:36";
"kwargs,type='identifier'\nline_star:231,line_end:231|char_star:36,char_end:42"[shape="point",fillcolor="#121013",style=filled];
"**kwargs,type='dictionary_splat_pattern'\nline_star:231,line_end:231|char_star:34,char_end:42"->"kwargs,type='identifier'\nline_star:231,line_end:231|char_star:36,char_end:42";
"type='INFORMATION BLOCK'\nline_star:232,line_end:233|char_star:12,char_end:66"[shape="point",fillcolor="#121013",style=filled];
"def __init__(self, *args, **kwargs):\n            kwargs.setdefault('object_hook', self.object_hook)\n            flask.json.JSONDecoder.__init__(self, *args, **kwargs),type='function_definition'\nline_star:231,line_end:233|char_star:8,char_end:66"->"type='INFORMATION BLOCK'\nline_star:232,line_end:233|char_star:12,char_end:66";
"def object_hook(self, obj):\n            if len(obj) == 1 and '_foo' in obj:\n                return X(obj['_foo'])\n            return obj,type='function_definition'\nline_star:235,line_end:238|char_star:8,char_end:22"[shape="box",fillcolor="#cee6b4",style=filled];
"type='INFORMATION BLOCK'\nline_star:231,line_end:238|char_star:8,char_end:22"->"def object_hook(self, obj):\n            if len(obj) == 1 and '_foo' in obj:\n                return X(obj['_foo'])\n            return obj,type='function_definition'\nline_star:235,line_end:238|char_star:8,char_end:22";
"object_hook,type='identifier'\nline_star:235,line_end:235|char_star:12,char_end:23"[shape="point",fillcolor="#121013",style=filled];
"def object_hook(self, obj):\n            if len(obj) == 1 and '_foo' in obj:\n                return X(obj['_foo'])\n            return obj,type='function_definition'\nline_star:235,line_end:238|char_star:8,char_end:22"->"object_hook,type='identifier'\nline_star:235,line_end:235|char_star:12,char_end:23";
"(self, obj),type='parameters'\nline_star:235,line_end:235|char_star:23,char_end:34"[shape="box",fillcolor="white",style=filled];
"def object_hook(self, obj):\n            if len(obj) == 1 and '_foo' in obj:\n                return X(obj['_foo'])\n            return obj,type='function_definition'\nline_star:235,line_end:238|char_star:8,char_end:22"->"(self, obj),type='parameters'\nline_star:235,line_end:235|char_star:23,char_end:34";
"self,type='identifier'\nline_star:235,line_end:235|char_star:24,char_end:28"[shape="point",fillcolor="#121013",style=filled];
"(self, obj),type='parameters'\nline_star:235,line_end:235|char_star:23,char_end:34"->"self,type='identifier'\nline_star:235,line_end:235|char_star:24,char_end:28";
"obj,type='identifier'\nline_star:235,line_end:235|char_star:30,char_end:33"[shape="point",fillcolor="#121013",style=filled];
"(self, obj),type='parameters'\nline_star:235,line_end:235|char_star:23,char_end:34"->"obj,type='identifier'\nline_star:235,line_end:235|char_star:30,char_end:33";
"type='INFORMATION BLOCK'\nline_star:236,line_end:238|char_star:12,char_end:22"[shape="point",fillcolor="#121013",style=filled];
"def object_hook(self, obj):\n            if len(obj) == 1 and '_foo' in obj:\n                return X(obj['_foo'])\n            return obj,type='function_definition'\nline_star:235,line_end:238|char_star:8,char_end:22"->"type='INFORMATION BLOCK'\nline_star:236,line_end:238|char_star:12,char_end:22";
"if len(obj) == 1 and '_foo' in obj:\n                return X(obj['_foo']),type='if_statement'\nline_star:236,line_end:237|char_star:12,char_end:37"[shape="box",fillcolor="#9ecca4",style=filled];
"type='INFORMATION BLOCK'\nline_star:236,line_end:238|char_star:12,char_end:22"->"if len(obj) == 1 and '_foo' in obj:\n                return X(obj['_foo']),type='if_statement'\nline_star:236,line_end:237|char_star:12,char_end:37";
"return obj,type='return_statement'\nline_star:238,line_end:238|char_star:12,char_end:22"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:236,line_end:238|char_star:12,char_end:22"->"return obj,type='return_statement'\nline_star:238,line_end:238|char_star:12,char_end:22";
"@app.route('/', methods=['POST'])\n    def index():\n        return flask.json.dumps(flask.request.get_json()['x']),type='decorated_definition'\nline_star:243,line_end:245|char_star:4,char_end:62"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:220,line_end:252|char_star:4,char_end:31"->"@app.route('/', methods=['POST'])\n    def index():\n        return flask.json.dumps(flask.request.get_json()['x']),type='decorated_definition'\nline_star:243,line_end:245|char_star:4,char_end:62";
"@app.route('/', methods=['POST']),type='decorator'\nline_star:243,line_end:243|char_star:4,char_end:37"[shape="box",fillcolor="white",style=filled];
"@app.route('/', methods=['POST'])\n    def index():\n        return flask.json.dumps(flask.request.get_json()['x']),type='decorated_definition'\nline_star:243,line_end:245|char_star:4,char_end:62"->"@app.route('/', methods=['POST']),type='decorator'\nline_star:243,line_end:243|char_star:4,char_end:37";
"def index():\n        return flask.json.dumps(flask.request.get_json()['x']),type='function_definition'\nline_star:244,line_end:245|char_star:4,char_end:62"[shape="box",fillcolor="#cee6b4",style=filled];
"@app.route('/', methods=['POST'])\n    def index():\n        return flask.json.dumps(flask.request.get_json()['x']),type='decorated_definition'\nline_star:243,line_end:245|char_star:4,char_end:62"->"def index():\n        return flask.json.dumps(flask.request.get_json()['x']),type='function_definition'\nline_star:244,line_end:245|char_star:4,char_end:62";
"index,type='identifier'\nline_star:244,line_end:244|char_star:8,char_end:13"[shape="point",fillcolor="#121013",style=filled];
"def index():\n        return flask.json.dumps(flask.request.get_json()['x']),type='function_definition'\nline_star:244,line_end:245|char_star:4,char_end:62"->"index,type='identifier'\nline_star:244,line_end:244|char_star:8,char_end:13";
"type='INFORMATION BLOCK'\nline_star:245,line_end:245|char_star:8,char_end:62"[shape="point",fillcolor="#121013",style=filled];
"def index():\n        return flask.json.dumps(flask.request.get_json()['x']),type='function_definition'\nline_star:244,line_end:245|char_star:4,char_end:62"->"type='INFORMATION BLOCK'\nline_star:245,line_end:245|char_star:8,char_end:62";
"return flask.json.dumps(flask.request.get_json()['x']),type='return_statement'\nline_star:245,line_end:245|char_star:8,char_end:62"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:245,line_end:245|char_star:8,char_end:62"->"return flask.json.dumps(flask.request.get_json()['x']),type='return_statement'\nline_star:245,line_end:245|char_star:8,char_end:62";
"assert rv.data == b''<42>'',type='assert_statement'\nline_star:252,line_end:252|char_star:4,char_end:31"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:220,line_end:252|char_star:4,char_end:31"->"assert rv.data == b''<42>'',type='assert_statement'\nline_star:252,line_end:252|char_star:4,char_end:31";
"rv.data == b''<42>'',type='comparison_operator'\nline_star:252,line_end:252|char_star:11,char_end:31"[shape="box",fillcolor="white",style=filled];
"assert rv.data == b''<42>'',type='assert_statement'\nline_star:252,line_end:252|char_star:4,char_end:31"->"rv.data == b''<42>'',type='comparison_operator'\nline_star:252,line_end:252|char_star:11,char_end:31";
"rv.data,type='attribute'\nline_star:252,line_end:252|char_star:11,char_end:18"[shape="box",fillcolor="white",style=filled];
"rv.data == b''<42>'',type='comparison_operator'\nline_star:252,line_end:252|char_star:11,char_end:31"->"rv.data,type='attribute'\nline_star:252,line_end:252|char_star:11,char_end:18";
"rv,type='identifier'\nline_star:252,line_end:252|char_star:11,char_end:13"[shape="point",fillcolor="#121013",style=filled];
"rv.data,type='attribute'\nline_star:252,line_end:252|char_star:11,char_end:18"->"rv,type='identifier'\nline_star:252,line_end:252|char_star:11,char_end:13";
"data,type='identifier'\nline_star:252,line_end:252|char_star:14,char_end:18"[shape="point",fillcolor="#121013",style=filled];
"rv.data,type='attribute'\nline_star:252,line_end:252|char_star:11,char_end:18"->"data,type='identifier'\nline_star:252,line_end:252|char_star:14,char_end:18";
"def test_blueprint_json_customization(app, client):\n    class X:\n        __slots__ = ('val',)\n\n        def __init__(self, val):\n            self.val = val\n\n    class MyEncoder(flask.json.JSONEncoder):\n        def default(self, o):\n            if isinstance(o, X):\n                return f'<{o.val}>'\n\n            return flask.json.JSONEncoder.default(self, o)\n\n    class MyDecoder(flask.json.JSONDecoder):\n        def __init__(self, *args, **kwargs):\n            kwargs.setdefault('object_hook', self.object_hook)\n            flask.json.JSONDecoder.__init__(self, *args, **kwargs)\n\n        def object_hook(self, obj):\n            if len(obj) == 1 and '_foo' in obj:\n                return X(obj['_foo'])\n\n            return obj\n\n    bp = flask.Blueprint('bp', __name__)\n    bp.json_encoder = MyEncoder\n    bp.json_decoder = MyDecoder\n\n    @bp.route('/bp', methods=['POST'])\n    def index():\n        return flask.json.dumps(flask.request.get_json()['x'])\n\n    app.register_blueprint(bp)\n\n    rv = client.post(\n        '/bp',\n        data=flask.json.dumps({'x': {'_foo': 42}}),\n        content_type='application/json',\n    )\n    assert rv.data == b''<42>'',type='function_definition'\nline_star:255,line_end:295|char_star:0,char_end:31"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_blueprint_json_customization(app, client):\n    class X:\n        __slots__ = ('val',)\n\n        def __init__(self, val):\n            self.val = val\n\n    class MyEncoder(flask.json.JSONEncoder):\n        def default(self, o):\n            if isinstance(o, X):\n                return f'<{o.val}>'\n\n            return flask.json.JSONEncoder.default(self, o)\n\n    class MyDecoder(flask.json.JSONDecoder):\n        def __init__(self, *args, **kwargs):\n            kwargs.setdefault('object_hook', self.object_hook)\n            flask.json.JSONDecoder.__init__(self, *args, **kwargs)\n\n        def object_hook(self, obj):\n            if len(obj) == 1 and '_foo' in obj:\n                return X(obj['_foo'])\n\n            return obj\n\n    bp = flask.Blueprint('bp', __name__)\n    bp.json_encoder = MyEncoder\n    bp.json_decoder = MyDecoder\n\n    @bp.route('/bp', methods=['POST'])\n    def index():\n        return flask.json.dumps(flask.request.get_json()['x'])\n\n    app.register_blueprint(bp)\n\n    rv = client.post(\n        '/bp',\n        data=flask.json.dumps({'x': {'_foo': 42}}),\n        content_type='application/json',\n    )\n    assert rv.data == b''<42>'',type='function_definition'\nline_star:255,line_end:295|char_star:0,char_end:31";
"test_blueprint_json_customization,type='identifier'\nline_star:255,line_end:255|char_star:4,char_end:37"[shape="point",fillcolor="#121013",style=filled];
"def test_blueprint_json_customization(app, client):\n    class X:\n        __slots__ = ('val',)\n\n        def __init__(self, val):\n            self.val = val\n\n    class MyEncoder(flask.json.JSONEncoder):\n        def default(self, o):\n            if isinstance(o, X):\n                return f'<{o.val}>'\n\n            return flask.json.JSONEncoder.default(self, o)\n\n    class MyDecoder(flask.json.JSONDecoder):\n        def __init__(self, *args, **kwargs):\n            kwargs.setdefault('object_hook', self.object_hook)\n            flask.json.JSONDecoder.__init__(self, *args, **kwargs)\n\n        def object_hook(self, obj):\n            if len(obj) == 1 and '_foo' in obj:\n                return X(obj['_foo'])\n\n            return obj\n\n    bp = flask.Blueprint('bp', __name__)\n    bp.json_encoder = MyEncoder\n    bp.json_decoder = MyDecoder\n\n    @bp.route('/bp', methods=['POST'])\n    def index():\n        return flask.json.dumps(flask.request.get_json()['x'])\n\n    app.register_blueprint(bp)\n\n    rv = client.post(\n        '/bp',\n        data=flask.json.dumps({'x': {'_foo': 42}}),\n        content_type='application/json',\n    )\n    assert rv.data == b''<42>'',type='function_definition'\nline_star:255,line_end:295|char_star:0,char_end:31"->"test_blueprint_json_customization,type='identifier'\nline_star:255,line_end:255|char_star:4,char_end:37";
"(app, client),type='parameters'\nline_star:255,line_end:255|char_star:37,char_end:50"[shape="box",fillcolor="white",style=filled];
"def test_blueprint_json_customization(app, client):\n    class X:\n        __slots__ = ('val',)\n\n        def __init__(self, val):\n            self.val = val\n\n    class MyEncoder(flask.json.JSONEncoder):\n        def default(self, o):\n            if isinstance(o, X):\n                return f'<{o.val}>'\n\n            return flask.json.JSONEncoder.default(self, o)\n\n    class MyDecoder(flask.json.JSONDecoder):\n        def __init__(self, *args, **kwargs):\n            kwargs.setdefault('object_hook', self.object_hook)\n            flask.json.JSONDecoder.__init__(self, *args, **kwargs)\n\n        def object_hook(self, obj):\n            if len(obj) == 1 and '_foo' in obj:\n                return X(obj['_foo'])\n\n            return obj\n\n    bp = flask.Blueprint('bp', __name__)\n    bp.json_encoder = MyEncoder\n    bp.json_decoder = MyDecoder\n\n    @bp.route('/bp', methods=['POST'])\n    def index():\n        return flask.json.dumps(flask.request.get_json()['x'])\n\n    app.register_blueprint(bp)\n\n    rv = client.post(\n        '/bp',\n        data=flask.json.dumps({'x': {'_foo': 42}}),\n        content_type='application/json',\n    )\n    assert rv.data == b''<42>'',type='function_definition'\nline_star:255,line_end:295|char_star:0,char_end:31"->"(app, client),type='parameters'\nline_star:255,line_end:255|char_star:37,char_end:50";
"app,type='identifier'\nline_star:255,line_end:255|char_star:38,char_end:41"[shape="point",fillcolor="#121013",style=filled];
"(app, client),type='parameters'\nline_star:255,line_end:255|char_star:37,char_end:50"->"app,type='identifier'\nline_star:255,line_end:255|char_star:38,char_end:41";
"client,type='identifier'\nline_star:255,line_end:255|char_star:43,char_end:49"[shape="point",fillcolor="#121013",style=filled];
"(app, client),type='parameters'\nline_star:255,line_end:255|char_star:37,char_end:50"->"client,type='identifier'\nline_star:255,line_end:255|char_star:43,char_end:49";
"type='INFORMATION BLOCK'\nline_star:256,line_end:295|char_star:4,char_end:31"[shape="point",fillcolor="#121013",style=filled];
"def test_blueprint_json_customization(app, client):\n    class X:\n        __slots__ = ('val',)\n\n        def __init__(self, val):\n            self.val = val\n\n    class MyEncoder(flask.json.JSONEncoder):\n        def default(self, o):\n            if isinstance(o, X):\n                return f'<{o.val}>'\n\n            return flask.json.JSONEncoder.default(self, o)\n\n    class MyDecoder(flask.json.JSONDecoder):\n        def __init__(self, *args, **kwargs):\n            kwargs.setdefault('object_hook', self.object_hook)\n            flask.json.JSONDecoder.__init__(self, *args, **kwargs)\n\n        def object_hook(self, obj):\n            if len(obj) == 1 and '_foo' in obj:\n                return X(obj['_foo'])\n\n            return obj\n\n    bp = flask.Blueprint('bp', __name__)\n    bp.json_encoder = MyEncoder\n    bp.json_decoder = MyDecoder\n\n    @bp.route('/bp', methods=['POST'])\n    def index():\n        return flask.json.dumps(flask.request.get_json()['x'])\n\n    app.register_blueprint(bp)\n\n    rv = client.post(\n        '/bp',\n        data=flask.json.dumps({'x': {'_foo': 42}}),\n        content_type='application/json',\n    )\n    assert rv.data == b''<42>'',type='function_definition'\nline_star:255,line_end:295|char_star:0,char_end:31"->"type='INFORMATION BLOCK'\nline_star:256,line_end:295|char_star:4,char_end:31";
"class X:\n        __slots__ = ('val',)\n\n        def __init__(self, val):\n            self.val = val,type='class_definition'\nline_star:256,line_end:260|char_star:4,char_end:26"[shape="box",fillcolor="#ffdf91",style=filled];
"type='INFORMATION BLOCK'\nline_star:256,line_end:295|char_star:4,char_end:31"->"class X:\n        __slots__ = ('val',)\n\n        def __init__(self, val):\n            self.val = val,type='class_definition'\nline_star:256,line_end:260|char_star:4,char_end:26";
"X,type='identifier'\nline_star:256,line_end:256|char_star:10,char_end:11"[shape="point",fillcolor="#121013",style=filled];
"class X:\n        __slots__ = ('val',)\n\n        def __init__(self, val):\n            self.val = val,type='class_definition'\nline_star:256,line_end:260|char_star:4,char_end:26"->"X,type='identifier'\nline_star:256,line_end:256|char_star:10,char_end:11";
"type='INFORMATION BLOCK'\nline_star:257,line_end:260|char_star:8,char_end:26"[shape="point",fillcolor="#121013",style=filled];
"class X:\n        __slots__ = ('val',)\n\n        def __init__(self, val):\n            self.val = val,type='class_definition'\nline_star:256,line_end:260|char_star:4,char_end:26"->"type='INFORMATION BLOCK'\nline_star:257,line_end:260|char_star:8,char_end:26";
"def __init__(self, val):\n            self.val = val,type='function_definition'\nline_star:259,line_end:260|char_star:8,char_end:26"[shape="box",fillcolor="#cee6b4",style=filled];
"type='INFORMATION BLOCK'\nline_star:257,line_end:260|char_star:8,char_end:26"->"def __init__(self, val):\n            self.val = val,type='function_definition'\nline_star:259,line_end:260|char_star:8,char_end:26";
"__init__,type='identifier'\nline_star:259,line_end:259|char_star:12,char_end:20"[shape="point",fillcolor="#121013",style=filled];
"def __init__(self, val):\n            self.val = val,type='function_definition'\nline_star:259,line_end:260|char_star:8,char_end:26"->"__init__,type='identifier'\nline_star:259,line_end:259|char_star:12,char_end:20";
"(self, val),type='parameters'\nline_star:259,line_end:259|char_star:20,char_end:31"[shape="box",fillcolor="white",style=filled];
"def __init__(self, val):\n            self.val = val,type='function_definition'\nline_star:259,line_end:260|char_star:8,char_end:26"->"(self, val),type='parameters'\nline_star:259,line_end:259|char_star:20,char_end:31";
"self,type='identifier'\nline_star:259,line_end:259|char_star:21,char_end:25"[shape="point",fillcolor="#121013",style=filled];
"(self, val),type='parameters'\nline_star:259,line_end:259|char_star:20,char_end:31"->"self,type='identifier'\nline_star:259,line_end:259|char_star:21,char_end:25";
"val,type='identifier'\nline_star:259,line_end:259|char_star:27,char_end:30"[shape="point",fillcolor="#121013",style=filled];
"(self, val),type='parameters'\nline_star:259,line_end:259|char_star:20,char_end:31"->"val,type='identifier'\nline_star:259,line_end:259|char_star:27,char_end:30";
"type='INFORMATION BLOCK'\nline_star:260,line_end:260|char_star:12,char_end:26"[shape="point",fillcolor="#121013",style=filled];
"def __init__(self, val):\n            self.val = val,type='function_definition'\nline_star:259,line_end:260|char_star:8,char_end:26"->"type='INFORMATION BLOCK'\nline_star:260,line_end:260|char_star:12,char_end:26";
"class MyEncoder(flask.json.JSONEncoder):\n        def default(self, o):\n            if isinstance(o, X):\n                return f'<{o.val}>'\n\n            return flask.json.JSONEncoder.default(self, o),type='class_definition'\nline_star:262,line_end:267|char_star:4,char_end:58"[shape="box",fillcolor="#ffdf91",style=filled];
"type='INFORMATION BLOCK'\nline_star:256,line_end:295|char_star:4,char_end:31"->"class MyEncoder(flask.json.JSONEncoder):\n        def default(self, o):\n            if isinstance(o, X):\n                return f'<{o.val}>'\n\n            return flask.json.JSONEncoder.default(self, o),type='class_definition'\nline_star:262,line_end:267|char_star:4,char_end:58";
"MyEncoder,type='identifier'\nline_star:262,line_end:262|char_star:10,char_end:19"[shape="point",fillcolor="#121013",style=filled];
"class MyEncoder(flask.json.JSONEncoder):\n        def default(self, o):\n            if isinstance(o, X):\n                return f'<{o.val}>'\n\n            return flask.json.JSONEncoder.default(self, o),type='class_definition'\nline_star:262,line_end:267|char_star:4,char_end:58"->"MyEncoder,type='identifier'\nline_star:262,line_end:262|char_star:10,char_end:19";
"(flask.json.JSONEncoder),type='argument_list'\nline_star:262,line_end:262|char_star:19,char_end:43"[shape="box",fillcolor="white",style=filled];
"class MyEncoder(flask.json.JSONEncoder):\n        def default(self, o):\n            if isinstance(o, X):\n                return f'<{o.val}>'\n\n            return flask.json.JSONEncoder.default(self, o),type='class_definition'\nline_star:262,line_end:267|char_star:4,char_end:58"->"(flask.json.JSONEncoder),type='argument_list'\nline_star:262,line_end:262|char_star:19,char_end:43";
"flask.json.JSONEncoder,type='attribute'\nline_star:262,line_end:262|char_star:20,char_end:42"[shape="box",fillcolor="white",style=filled];
"(flask.json.JSONEncoder),type='argument_list'\nline_star:262,line_end:262|char_star:19,char_end:43"->"flask.json.JSONEncoder,type='attribute'\nline_star:262,line_end:262|char_star:20,char_end:42";
"flask.json,type='attribute'\nline_star:262,line_end:262|char_star:20,char_end:30"[shape="box",fillcolor="white",style=filled];
"flask.json.JSONEncoder,type='attribute'\nline_star:262,line_end:262|char_star:20,char_end:42"->"flask.json,type='attribute'\nline_star:262,line_end:262|char_star:20,char_end:30";
"flask,type='identifier'\nline_star:262,line_end:262|char_star:20,char_end:25"[shape="point",fillcolor="#121013",style=filled];
"flask.json,type='attribute'\nline_star:262,line_end:262|char_star:20,char_end:30"->"flask,type='identifier'\nline_star:262,line_end:262|char_star:20,char_end:25";
"json,type='identifier'\nline_star:262,line_end:262|char_star:26,char_end:30"[shape="point",fillcolor="#121013",style=filled];
"flask.json,type='attribute'\nline_star:262,line_end:262|char_star:20,char_end:30"->"json,type='identifier'\nline_star:262,line_end:262|char_star:26,char_end:30";
"JSONEncoder,type='identifier'\nline_star:262,line_end:262|char_star:31,char_end:42"[shape="point",fillcolor="#121013",style=filled];
"flask.json.JSONEncoder,type='attribute'\nline_star:262,line_end:262|char_star:20,char_end:42"->"JSONEncoder,type='identifier'\nline_star:262,line_end:262|char_star:31,char_end:42";
"type='INFORMATION BLOCK'\nline_star:263,line_end:267|char_star:8,char_end:58"[shape="point",fillcolor="#121013",style=filled];
"class MyEncoder(flask.json.JSONEncoder):\n        def default(self, o):\n            if isinstance(o, X):\n                return f'<{o.val}>'\n\n            return flask.json.JSONEncoder.default(self, o),type='class_definition'\nline_star:262,line_end:267|char_star:4,char_end:58"->"type='INFORMATION BLOCK'\nline_star:263,line_end:267|char_star:8,char_end:58";
"def default(self, o):\n            if isinstance(o, X):\n                return f'<{o.val}>'\n\n            return flask.json.JSONEncoder.default(self, o),type='function_definition'\nline_star:263,line_end:267|char_star:8,char_end:58"[shape="box",fillcolor="#cee6b4",style=filled];
"type='INFORMATION BLOCK'\nline_star:263,line_end:267|char_star:8,char_end:58"->"def default(self, o):\n            if isinstance(o, X):\n                return f'<{o.val}>'\n\n            return flask.json.JSONEncoder.default(self, o),type='function_definition'\nline_star:263,line_end:267|char_star:8,char_end:58";
"default,type='identifier'\nline_star:263,line_end:263|char_star:12,char_end:19"[shape="point",fillcolor="#121013",style=filled];
"def default(self, o):\n            if isinstance(o, X):\n                return f'<{o.val}>'\n\n            return flask.json.JSONEncoder.default(self, o),type='function_definition'\nline_star:263,line_end:267|char_star:8,char_end:58"->"default,type='identifier'\nline_star:263,line_end:263|char_star:12,char_end:19";
"(self, o),type='parameters'\nline_star:263,line_end:263|char_star:19,char_end:28"[shape="box",fillcolor="white",style=filled];
"def default(self, o):\n            if isinstance(o, X):\n                return f'<{o.val}>'\n\n            return flask.json.JSONEncoder.default(self, o),type='function_definition'\nline_star:263,line_end:267|char_star:8,char_end:58"->"(self, o),type='parameters'\nline_star:263,line_end:263|char_star:19,char_end:28";
"self,type='identifier'\nline_star:263,line_end:263|char_star:20,char_end:24"[shape="point",fillcolor="#121013",style=filled];
"(self, o),type='parameters'\nline_star:263,line_end:263|char_star:19,char_end:28"->"self,type='identifier'\nline_star:263,line_end:263|char_star:20,char_end:24";
"o,type='identifier'\nline_star:263,line_end:263|char_star:26,char_end:27"[shape="point",fillcolor="#121013",style=filled];
"(self, o),type='parameters'\nline_star:263,line_end:263|char_star:19,char_end:28"->"o,type='identifier'\nline_star:263,line_end:263|char_star:26,char_end:27";
"type='INFORMATION BLOCK'\nline_star:264,line_end:267|char_star:12,char_end:58"[shape="point",fillcolor="#121013",style=filled];
"def default(self, o):\n            if isinstance(o, X):\n                return f'<{o.val}>'\n\n            return flask.json.JSONEncoder.default(self, o),type='function_definition'\nline_star:263,line_end:267|char_star:8,char_end:58"->"type='INFORMATION BLOCK'\nline_star:264,line_end:267|char_star:12,char_end:58";
"if isinstance(o, X):\n                return f'<{o.val}>',type='if_statement'\nline_star:264,line_end:265|char_star:12,char_end:35"[shape="box",fillcolor="#9ecca4",style=filled];
"type='INFORMATION BLOCK'\nline_star:264,line_end:267|char_star:12,char_end:58"->"if isinstance(o, X):\n                return f'<{o.val}>',type='if_statement'\nline_star:264,line_end:265|char_star:12,char_end:35";
"return flask.json.JSONEncoder.default(self, o),type='return_statement'\nline_star:267,line_end:267|char_star:12,char_end:58"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:264,line_end:267|char_star:12,char_end:58"->"return flask.json.JSONEncoder.default(self, o),type='return_statement'\nline_star:267,line_end:267|char_star:12,char_end:58";
"class MyDecoder(flask.json.JSONDecoder):\n        def __init__(self, *args, **kwargs):\n            kwargs.setdefault('object_hook', self.object_hook)\n            flask.json.JSONDecoder.__init__(self, *args, **kwargs)\n\n        def object_hook(self, obj):\n            if len(obj) == 1 and '_foo' in obj:\n                return X(obj['_foo'])\n\n            return obj,type='class_definition'\nline_star:269,line_end:278|char_star:4,char_end:22"[shape="box",fillcolor="#ffdf91",style=filled];
"type='INFORMATION BLOCK'\nline_star:256,line_end:295|char_star:4,char_end:31"->"class MyDecoder(flask.json.JSONDecoder):\n        def __init__(self, *args, **kwargs):\n            kwargs.setdefault('object_hook', self.object_hook)\n            flask.json.JSONDecoder.__init__(self, *args, **kwargs)\n\n        def object_hook(self, obj):\n            if len(obj) == 1 and '_foo' in obj:\n                return X(obj['_foo'])\n\n            return obj,type='class_definition'\nline_star:269,line_end:278|char_star:4,char_end:22";
"MyDecoder,type='identifier'\nline_star:269,line_end:269|char_star:10,char_end:19"[shape="point",fillcolor="#121013",style=filled];
"class MyDecoder(flask.json.JSONDecoder):\n        def __init__(self, *args, **kwargs):\n            kwargs.setdefault('object_hook', self.object_hook)\n            flask.json.JSONDecoder.__init__(self, *args, **kwargs)\n\n        def object_hook(self, obj):\n            if len(obj) == 1 and '_foo' in obj:\n                return X(obj['_foo'])\n\n            return obj,type='class_definition'\nline_star:269,line_end:278|char_star:4,char_end:22"->"MyDecoder,type='identifier'\nline_star:269,line_end:269|char_star:10,char_end:19";
"(flask.json.JSONDecoder),type='argument_list'\nline_star:269,line_end:269|char_star:19,char_end:43"[shape="box",fillcolor="white",style=filled];
"class MyDecoder(flask.json.JSONDecoder):\n        def __init__(self, *args, **kwargs):\n            kwargs.setdefault('object_hook', self.object_hook)\n            flask.json.JSONDecoder.__init__(self, *args, **kwargs)\n\n        def object_hook(self, obj):\n            if len(obj) == 1 and '_foo' in obj:\n                return X(obj['_foo'])\n\n            return obj,type='class_definition'\nline_star:269,line_end:278|char_star:4,char_end:22"->"(flask.json.JSONDecoder),type='argument_list'\nline_star:269,line_end:269|char_star:19,char_end:43";
"flask.json.JSONDecoder,type='attribute'\nline_star:269,line_end:269|char_star:20,char_end:42"[shape="box",fillcolor="white",style=filled];
"(flask.json.JSONDecoder),type='argument_list'\nline_star:269,line_end:269|char_star:19,char_end:43"->"flask.json.JSONDecoder,type='attribute'\nline_star:269,line_end:269|char_star:20,char_end:42";
"flask.json,type='attribute'\nline_star:269,line_end:269|char_star:20,char_end:30"[shape="box",fillcolor="white",style=filled];
"flask.json.JSONDecoder,type='attribute'\nline_star:269,line_end:269|char_star:20,char_end:42"->"flask.json,type='attribute'\nline_star:269,line_end:269|char_star:20,char_end:30";
"flask,type='identifier'\nline_star:269,line_end:269|char_star:20,char_end:25"[shape="point",fillcolor="#121013",style=filled];
"flask.json,type='attribute'\nline_star:269,line_end:269|char_star:20,char_end:30"->"flask,type='identifier'\nline_star:269,line_end:269|char_star:20,char_end:25";
"json,type='identifier'\nline_star:269,line_end:269|char_star:26,char_end:30"[shape="point",fillcolor="#121013",style=filled];
"flask.json,type='attribute'\nline_star:269,line_end:269|char_star:20,char_end:30"->"json,type='identifier'\nline_star:269,line_end:269|char_star:26,char_end:30";
"JSONDecoder,type='identifier'\nline_star:269,line_end:269|char_star:31,char_end:42"[shape="point",fillcolor="#121013",style=filled];
"flask.json.JSONDecoder,type='attribute'\nline_star:269,line_end:269|char_star:20,char_end:42"->"JSONDecoder,type='identifier'\nline_star:269,line_end:269|char_star:31,char_end:42";
"type='INFORMATION BLOCK'\nline_star:270,line_end:278|char_star:8,char_end:22"[shape="point",fillcolor="#121013",style=filled];
"class MyDecoder(flask.json.JSONDecoder):\n        def __init__(self, *args, **kwargs):\n            kwargs.setdefault('object_hook', self.object_hook)\n            flask.json.JSONDecoder.__init__(self, *args, **kwargs)\n\n        def object_hook(self, obj):\n            if len(obj) == 1 and '_foo' in obj:\n                return X(obj['_foo'])\n\n            return obj,type='class_definition'\nline_star:269,line_end:278|char_star:4,char_end:22"->"type='INFORMATION BLOCK'\nline_star:270,line_end:278|char_star:8,char_end:22";
"def __init__(self, *args, **kwargs):\n            kwargs.setdefault('object_hook', self.object_hook)\n            flask.json.JSONDecoder.__init__(self, *args, **kwargs),type='function_definition'\nline_star:270,line_end:272|char_star:8,char_end:66"[shape="box",fillcolor="#cee6b4",style=filled];
"type='INFORMATION BLOCK'\nline_star:270,line_end:278|char_star:8,char_end:22"->"def __init__(self, *args, **kwargs):\n            kwargs.setdefault('object_hook', self.object_hook)\n            flask.json.JSONDecoder.__init__(self, *args, **kwargs),type='function_definition'\nline_star:270,line_end:272|char_star:8,char_end:66";
"__init__,type='identifier'\nline_star:270,line_end:270|char_star:12,char_end:20"[shape="point",fillcolor="#121013",style=filled];
"def __init__(self, *args, **kwargs):\n            kwargs.setdefault('object_hook', self.object_hook)\n            flask.json.JSONDecoder.__init__(self, *args, **kwargs),type='function_definition'\nline_star:270,line_end:272|char_star:8,char_end:66"->"__init__,type='identifier'\nline_star:270,line_end:270|char_star:12,char_end:20";
"(self, *args, **kwargs),type='parameters'\nline_star:270,line_end:270|char_star:20,char_end:43"[shape="box",fillcolor="white",style=filled];
"def __init__(self, *args, **kwargs):\n            kwargs.setdefault('object_hook', self.object_hook)\n            flask.json.JSONDecoder.__init__(self, *args, **kwargs),type='function_definition'\nline_star:270,line_end:272|char_star:8,char_end:66"->"(self, *args, **kwargs),type='parameters'\nline_star:270,line_end:270|char_star:20,char_end:43";
"self,type='identifier'\nline_star:270,line_end:270|char_star:21,char_end:25"[shape="point",fillcolor="#121013",style=filled];
"(self, *args, **kwargs),type='parameters'\nline_star:270,line_end:270|char_star:20,char_end:43"->"self,type='identifier'\nline_star:270,line_end:270|char_star:21,char_end:25";
"*args,type='list_splat_pattern'\nline_star:270,line_end:270|char_star:27,char_end:32"[shape="box",fillcolor="white",style=filled];
"(self, *args, **kwargs),type='parameters'\nline_star:270,line_end:270|char_star:20,char_end:43"->"*args,type='list_splat_pattern'\nline_star:270,line_end:270|char_star:27,char_end:32";
"*,type='*'\nline_star:270,line_end:270|char_star:27,char_end:28"[shape="box",fillcolor="white",style=filled];
"*args,type='list_splat_pattern'\nline_star:270,line_end:270|char_star:27,char_end:32"->"*,type='*'\nline_star:270,line_end:270|char_star:27,char_end:28";
"args,type='identifier'\nline_star:270,line_end:270|char_star:28,char_end:32"[shape="point",fillcolor="#121013",style=filled];
"*args,type='list_splat_pattern'\nline_star:270,line_end:270|char_star:27,char_end:32"->"args,type='identifier'\nline_star:270,line_end:270|char_star:28,char_end:32";
"**kwargs,type='dictionary_splat_pattern'\nline_star:270,line_end:270|char_star:34,char_end:42"[shape="box",fillcolor="white",style=filled];
"(self, *args, **kwargs),type='parameters'\nline_star:270,line_end:270|char_star:20,char_end:43"->"**kwargs,type='dictionary_splat_pattern'\nline_star:270,line_end:270|char_star:34,char_end:42";
"**,type='**'\nline_star:270,line_end:270|char_star:34,char_end:36"[shape="box",fillcolor="white",style=filled];
"**kwargs,type='dictionary_splat_pattern'\nline_star:270,line_end:270|char_star:34,char_end:42"->"**,type='**'\nline_star:270,line_end:270|char_star:34,char_end:36";
"kwargs,type='identifier'\nline_star:270,line_end:270|char_star:36,char_end:42"[shape="point",fillcolor="#121013",style=filled];
"**kwargs,type='dictionary_splat_pattern'\nline_star:270,line_end:270|char_star:34,char_end:42"->"kwargs,type='identifier'\nline_star:270,line_end:270|char_star:36,char_end:42";
"type='INFORMATION BLOCK'\nline_star:271,line_end:272|char_star:12,char_end:66"[shape="point",fillcolor="#121013",style=filled];
"def __init__(self, *args, **kwargs):\n            kwargs.setdefault('object_hook', self.object_hook)\n            flask.json.JSONDecoder.__init__(self, *args, **kwargs),type='function_definition'\nline_star:270,line_end:272|char_star:8,char_end:66"->"type='INFORMATION BLOCK'\nline_star:271,line_end:272|char_star:12,char_end:66";
"def object_hook(self, obj):\n            if len(obj) == 1 and '_foo' in obj:\n                return X(obj['_foo'])\n\n            return obj,type='function_definition'\nline_star:274,line_end:278|char_star:8,char_end:22"[shape="box",fillcolor="#cee6b4",style=filled];
"type='INFORMATION BLOCK'\nline_star:270,line_end:278|char_star:8,char_end:22"->"def object_hook(self, obj):\n            if len(obj) == 1 and '_foo' in obj:\n                return X(obj['_foo'])\n\n            return obj,type='function_definition'\nline_star:274,line_end:278|char_star:8,char_end:22";
"object_hook,type='identifier'\nline_star:274,line_end:274|char_star:12,char_end:23"[shape="point",fillcolor="#121013",style=filled];
"def object_hook(self, obj):\n            if len(obj) == 1 and '_foo' in obj:\n                return X(obj['_foo'])\n\n            return obj,type='function_definition'\nline_star:274,line_end:278|char_star:8,char_end:22"->"object_hook,type='identifier'\nline_star:274,line_end:274|char_star:12,char_end:23";
"(self, obj),type='parameters'\nline_star:274,line_end:274|char_star:23,char_end:34"[shape="box",fillcolor="white",style=filled];
"def object_hook(self, obj):\n            if len(obj) == 1 and '_foo' in obj:\n                return X(obj['_foo'])\n\n            return obj,type='function_definition'\nline_star:274,line_end:278|char_star:8,char_end:22"->"(self, obj),type='parameters'\nline_star:274,line_end:274|char_star:23,char_end:34";
"self,type='identifier'\nline_star:274,line_end:274|char_star:24,char_end:28"[shape="point",fillcolor="#121013",style=filled];
"(self, obj),type='parameters'\nline_star:274,line_end:274|char_star:23,char_end:34"->"self,type='identifier'\nline_star:274,line_end:274|char_star:24,char_end:28";
"obj,type='identifier'\nline_star:274,line_end:274|char_star:30,char_end:33"[shape="point",fillcolor="#121013",style=filled];
"(self, obj),type='parameters'\nline_star:274,line_end:274|char_star:23,char_end:34"->"obj,type='identifier'\nline_star:274,line_end:274|char_star:30,char_end:33";
"type='INFORMATION BLOCK'\nline_star:275,line_end:278|char_star:12,char_end:22"[shape="point",fillcolor="#121013",style=filled];
"def object_hook(self, obj):\n            if len(obj) == 1 and '_foo' in obj:\n                return X(obj['_foo'])\n\n            return obj,type='function_definition'\nline_star:274,line_end:278|char_star:8,char_end:22"->"type='INFORMATION BLOCK'\nline_star:275,line_end:278|char_star:12,char_end:22";
"if len(obj) == 1 and '_foo' in obj:\n                return X(obj['_foo']),type='if_statement'\nline_star:275,line_end:276|char_star:12,char_end:37"[shape="box",fillcolor="#9ecca4",style=filled];
"type='INFORMATION BLOCK'\nline_star:275,line_end:278|char_star:12,char_end:22"->"if len(obj) == 1 and '_foo' in obj:\n                return X(obj['_foo']),type='if_statement'\nline_star:275,line_end:276|char_star:12,char_end:37";
"return obj,type='return_statement'\nline_star:278,line_end:278|char_star:12,char_end:22"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:275,line_end:278|char_star:12,char_end:22"->"return obj,type='return_statement'\nline_star:278,line_end:278|char_star:12,char_end:22";
"@bp.route('/bp', methods=['POST'])\n    def index():\n        return flask.json.dumps(flask.request.get_json()['x']),type='decorated_definition'\nline_star:284,line_end:286|char_star:4,char_end:62"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:256,line_end:295|char_star:4,char_end:31"->"@bp.route('/bp', methods=['POST'])\n    def index():\n        return flask.json.dumps(flask.request.get_json()['x']),type='decorated_definition'\nline_star:284,line_end:286|char_star:4,char_end:62";
"@bp.route('/bp', methods=['POST']),type='decorator'\nline_star:284,line_end:284|char_star:4,char_end:38"[shape="box",fillcolor="white",style=filled];
"@bp.route('/bp', methods=['POST'])\n    def index():\n        return flask.json.dumps(flask.request.get_json()['x']),type='decorated_definition'\nline_star:284,line_end:286|char_star:4,char_end:62"->"@bp.route('/bp', methods=['POST']),type='decorator'\nline_star:284,line_end:284|char_star:4,char_end:38";
"def index():\n        return flask.json.dumps(flask.request.get_json()['x']),type='function_definition'\nline_star:285,line_end:286|char_star:4,char_end:62"[shape="box",fillcolor="#cee6b4",style=filled];
"@bp.route('/bp', methods=['POST'])\n    def index():\n        return flask.json.dumps(flask.request.get_json()['x']),type='decorated_definition'\nline_star:284,line_end:286|char_star:4,char_end:62"->"def index():\n        return flask.json.dumps(flask.request.get_json()['x']),type='function_definition'\nline_star:285,line_end:286|char_star:4,char_end:62";
"index,type='identifier'\nline_star:285,line_end:285|char_star:8,char_end:13"[shape="point",fillcolor="#121013",style=filled];
"def index():\n        return flask.json.dumps(flask.request.get_json()['x']),type='function_definition'\nline_star:285,line_end:286|char_star:4,char_end:62"->"index,type='identifier'\nline_star:285,line_end:285|char_star:8,char_end:13";
"type='INFORMATION BLOCK'\nline_star:286,line_end:286|char_star:8,char_end:62"[shape="point",fillcolor="#121013",style=filled];
"def index():\n        return flask.json.dumps(flask.request.get_json()['x']),type='function_definition'\nline_star:285,line_end:286|char_star:4,char_end:62"->"type='INFORMATION BLOCK'\nline_star:286,line_end:286|char_star:8,char_end:62";
"return flask.json.dumps(flask.request.get_json()['x']),type='return_statement'\nline_star:286,line_end:286|char_star:8,char_end:62"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:286,line_end:286|char_star:8,char_end:62"->"return flask.json.dumps(flask.request.get_json()['x']),type='return_statement'\nline_star:286,line_end:286|char_star:8,char_end:62";
"assert rv.data == b''<42>'',type='assert_statement'\nline_star:295,line_end:295|char_star:4,char_end:31"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:256,line_end:295|char_star:4,char_end:31"->"assert rv.data == b''<42>'',type='assert_statement'\nline_star:295,line_end:295|char_star:4,char_end:31";
"rv.data == b''<42>'',type='comparison_operator'\nline_star:295,line_end:295|char_star:11,char_end:31"[shape="box",fillcolor="white",style=filled];
"assert rv.data == b''<42>'',type='assert_statement'\nline_star:295,line_end:295|char_star:4,char_end:31"->"rv.data == b''<42>'',type='comparison_operator'\nline_star:295,line_end:295|char_star:11,char_end:31";
"rv.data,type='attribute'\nline_star:295,line_end:295|char_star:11,char_end:18"[shape="box",fillcolor="white",style=filled];
"rv.data == b''<42>'',type='comparison_operator'\nline_star:295,line_end:295|char_star:11,char_end:31"->"rv.data,type='attribute'\nline_star:295,line_end:295|char_star:11,char_end:18";
"rv,type='identifier'\nline_star:295,line_end:295|char_star:11,char_end:13"[shape="point",fillcolor="#121013",style=filled];
"rv.data,type='attribute'\nline_star:295,line_end:295|char_star:11,char_end:18"->"rv,type='identifier'\nline_star:295,line_end:295|char_star:11,char_end:13";
"data,type='identifier'\nline_star:295,line_end:295|char_star:14,char_end:18"[shape="point",fillcolor="#121013",style=filled];
"rv.data,type='attribute'\nline_star:295,line_end:295|char_star:11,char_end:18"->"data,type='identifier'\nline_star:295,line_end:295|char_star:14,char_end:18";
"def _has_encoding(name):\n    try:\n        import codecs\n\n        codecs.lookup(name)\n        return True\n    except LookupError:\n        return False,type='function_definition'\nline_star:298,line_end:305|char_star:0,char_end:20"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def _has_encoding(name):\n    try:\n        import codecs\n\n        codecs.lookup(name)\n        return True\n    except LookupError:\n        return False,type='function_definition'\nline_star:298,line_end:305|char_star:0,char_end:20";
"_has_encoding,type='identifier'\nline_star:298,line_end:298|char_star:4,char_end:17"[shape="point",fillcolor="#121013",style=filled];
"def _has_encoding(name):\n    try:\n        import codecs\n\n        codecs.lookup(name)\n        return True\n    except LookupError:\n        return False,type='function_definition'\nline_star:298,line_end:305|char_star:0,char_end:20"->"_has_encoding,type='identifier'\nline_star:298,line_end:298|char_star:4,char_end:17";
"(name),type='parameters'\nline_star:298,line_end:298|char_star:17,char_end:23"[shape="box",fillcolor="white",style=filled];
"def _has_encoding(name):\n    try:\n        import codecs\n\n        codecs.lookup(name)\n        return True\n    except LookupError:\n        return False,type='function_definition'\nline_star:298,line_end:305|char_star:0,char_end:20"->"(name),type='parameters'\nline_star:298,line_end:298|char_star:17,char_end:23";
"name,type='identifier'\nline_star:298,line_end:298|char_star:18,char_end:22"[shape="point",fillcolor="#121013",style=filled];
"(name),type='parameters'\nline_star:298,line_end:298|char_star:17,char_end:23"->"name,type='identifier'\nline_star:298,line_end:298|char_star:18,char_end:22";
"type='INFORMATION BLOCK'\nline_star:299,line_end:305|char_star:4,char_end:20"[shape="point",fillcolor="#121013",style=filled];
"def _has_encoding(name):\n    try:\n        import codecs\n\n        codecs.lookup(name)\n        return True\n    except LookupError:\n        return False,type='function_definition'\nline_star:298,line_end:305|char_star:0,char_end:20"->"type='INFORMATION BLOCK'\nline_star:299,line_end:305|char_star:4,char_end:20";
"try:\n        import codecs\n\n        codecs.lookup(name)\n        return True\n    except LookupError:\n        return False,type='try_statement'\nline_star:299,line_end:305|char_star:4,char_end:20"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:299,line_end:305|char_star:4,char_end:20"->"try:\n        import codecs\n\n        codecs.lookup(name)\n        return True\n    except LookupError:\n        return False,type='try_statement'\nline_star:299,line_end:305|char_star:4,char_end:20";
"try,type='try'\nline_star:299,line_end:299|char_star:4,char_end:7"[shape="box",fillcolor="white",style=filled];
"try:\n        import codecs\n\n        codecs.lookup(name)\n        return True\n    except LookupError:\n        return False,type='try_statement'\nline_star:299,line_end:305|char_star:4,char_end:20"->"try,type='try'\nline_star:299,line_end:299|char_star:4,char_end:7";
"type='INFORMATION BLOCK'\nline_star:300,line_end:303|char_star:8,char_end:19"[shape="point",fillcolor="#121013",style=filled];
"try:\n        import codecs\n\n        codecs.lookup(name)\n        return True\n    except LookupError:\n        return False,type='try_statement'\nline_star:299,line_end:305|char_star:4,char_end:20"->"type='INFORMATION BLOCK'\nline_star:300,line_end:303|char_star:8,char_end:19";
"import codecs,type='import_statement'\nline_star:300,line_end:300|char_star:8,char_end:21"[shape="box",fillcolor="#f48b29",style=filled];
"type='INFORMATION BLOCK'\nline_star:300,line_end:303|char_star:8,char_end:19"->"import codecs,type='import_statement'\nline_star:300,line_end:300|char_star:8,char_end:21";
"return True,type='return_statement'\nline_star:303,line_end:303|char_star:8,char_end:19"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:300,line_end:303|char_star:8,char_end:19"->"return True,type='return_statement'\nline_star:303,line_end:303|char_star:8,char_end:19";
"except LookupError:\n        return False,type='except_clause'\nline_star:304,line_end:305|char_star:4,char_end:20"[shape="box",fillcolor="white",style=filled];
"try:\n        import codecs\n\n        codecs.lookup(name)\n        return True\n    except LookupError:\n        return False,type='try_statement'\nline_star:299,line_end:305|char_star:4,char_end:20"->"except LookupError:\n        return False,type='except_clause'\nline_star:304,line_end:305|char_star:4,char_end:20";
"except,type='except'\nline_star:304,line_end:304|char_star:4,char_end:10"[shape="box",fillcolor="white",style=filled];
"except LookupError:\n        return False,type='except_clause'\nline_star:304,line_end:305|char_star:4,char_end:20"->"except,type='except'\nline_star:304,line_end:304|char_star:4,char_end:10";
"LookupError,type='identifier'\nline_star:304,line_end:304|char_star:11,char_end:22"[shape="point",fillcolor="#121013",style=filled];
"except LookupError:\n        return False,type='except_clause'\nline_star:304,line_end:305|char_star:4,char_end:20"->"LookupError,type='identifier'\nline_star:304,line_end:304|char_star:11,char_end:22";
"type='INFORMATION BLOCK'\nline_star:305,line_end:305|char_star:8,char_end:20"[shape="point",fillcolor="#121013",style=filled];
"except LookupError:\n        return False,type='except_clause'\nline_star:304,line_end:305|char_star:4,char_end:20"->"type='INFORMATION BLOCK'\nline_star:305,line_end:305|char_star:8,char_end:20";
"return False,type='return_statement'\nline_star:305,line_end:305|char_star:8,char_end:20"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:305,line_end:305|char_star:8,char_end:20"->"return False,type='return_statement'\nline_star:305,line_end:305|char_star:8,char_end:20";
"@pytest.mark.skipif(\n    not _has_encoding('euc-kr'), reason='The euc-kr encoding is required.'\n)\ndef test_modified_url_encoding(app, client):\n    class ModifiedRequest(flask.Request):\n        url_charset = 'euc-kr'\n\n    app.request_class = ModifiedRequest\n    app.url_map.charset = 'euc-kr'\n\n    @app.route('/')\n    def index():\n        return flask.request.args['foo']\n\n    rv = client.get('/', query_string={'foo': '정상처리'}, charset='euc-kr')\n    assert rv.status_code == 200\n    assert rv.get_data(as_text=True) == '정상처리',type='decorated_definition'\nline_star:308,line_end:324|char_star:0,char_end:54"[shape="box",fillcolor="#c8c6a7",style=filled];
"MODULE"->"@pytest.mark.skipif(\n    not _has_encoding('euc-kr'), reason='The euc-kr encoding is required.'\n)\ndef test_modified_url_encoding(app, client):\n    class ModifiedRequest(flask.Request):\n        url_charset = 'euc-kr'\n\n    app.request_class = ModifiedRequest\n    app.url_map.charset = 'euc-kr'\n\n    @app.route('/')\n    def index():\n        return flask.request.args['foo']\n\n    rv = client.get('/', query_string={'foo': '정상처리'}, charset='euc-kr')\n    assert rv.status_code == 200\n    assert rv.get_data(as_text=True) == '정상처리',type='decorated_definition'\nline_star:308,line_end:324|char_star:0,char_end:54";
"@pytest.mark.skipif(\n    not _has_encoding('euc-kr'), reason='The euc-kr encoding is required.'\n),type='decorator'\nline_star:308,line_end:310|char_star:0,char_end:1"[shape="box",fillcolor="white",style=filled];
"@pytest.mark.skipif(\n    not _has_encoding('euc-kr'), reason='The euc-kr encoding is required.'\n)\ndef test_modified_url_encoding(app, client):\n    class ModifiedRequest(flask.Request):\n        url_charset = 'euc-kr'\n\n    app.request_class = ModifiedRequest\n    app.url_map.charset = 'euc-kr'\n\n    @app.route('/')\n    def index():\n        return flask.request.args['foo']\n\n    rv = client.get('/', query_string={'foo': '정상처리'}, charset='euc-kr')\n    assert rv.status_code == 200\n    assert rv.get_data(as_text=True) == '정상처리',type='decorated_definition'\nline_star:308,line_end:324|char_star:0,char_end:54"->"@pytest.mark.skipif(\n    not _has_encoding('euc-kr'), reason='The euc-kr encoding is required.'\n),type='decorator'\nline_star:308,line_end:310|char_star:0,char_end:1";
"def test_modified_url_encoding(app, client):\n    class ModifiedRequest(flask.Request):\n        url_charset = 'euc-kr'\n\n    app.request_class = ModifiedRequest\n    app.url_map.charset = 'euc-kr'\n\n    @app.route('/')\n    def index():\n        return flask.request.args['foo']\n\n    rv = client.get('/', query_string={'foo': '정상처리'}, charset='euc-kr')\n    assert rv.status_code == 200\n    assert rv.get_data(as_text=True) == '정상처리',type='function_definition'\nline_star:311,line_end:324|char_star:0,char_end:54"[shape="box",fillcolor="#cee6b4",style=filled];
"@pytest.mark.skipif(\n    not _has_encoding('euc-kr'), reason='The euc-kr encoding is required.'\n)\ndef test_modified_url_encoding(app, client):\n    class ModifiedRequest(flask.Request):\n        url_charset = 'euc-kr'\n\n    app.request_class = ModifiedRequest\n    app.url_map.charset = 'euc-kr'\n\n    @app.route('/')\n    def index():\n        return flask.request.args['foo']\n\n    rv = client.get('/', query_string={'foo': '정상처리'}, charset='euc-kr')\n    assert rv.status_code == 200\n    assert rv.get_data(as_text=True) == '정상처리',type='decorated_definition'\nline_star:308,line_end:324|char_star:0,char_end:54"->"def test_modified_url_encoding(app, client):\n    class ModifiedRequest(flask.Request):\n        url_charset = 'euc-kr'\n\n    app.request_class = ModifiedRequest\n    app.url_map.charset = 'euc-kr'\n\n    @app.route('/')\n    def index():\n        return flask.request.args['foo']\n\n    rv = client.get('/', query_string={'foo': '정상처리'}, charset='euc-kr')\n    assert rv.status_code == 200\n    assert rv.get_data(as_text=True) == '정상처리',type='function_definition'\nline_star:311,line_end:324|char_star:0,char_end:54";
"test_modified_url_encoding,type='identifier'\nline_star:311,line_end:311|char_star:4,char_end:30"[shape="point",fillcolor="#121013",style=filled];
"def test_modified_url_encoding(app, client):\n    class ModifiedRequest(flask.Request):\n        url_charset = 'euc-kr'\n\n    app.request_class = ModifiedRequest\n    app.url_map.charset = 'euc-kr'\n\n    @app.route('/')\n    def index():\n        return flask.request.args['foo']\n\n    rv = client.get('/', query_string={'foo': '정상처리'}, charset='euc-kr')\n    assert rv.status_code == 200\n    assert rv.get_data(as_text=True) == '정상처리',type='function_definition'\nline_star:311,line_end:324|char_star:0,char_end:54"->"test_modified_url_encoding,type='identifier'\nline_star:311,line_end:311|char_star:4,char_end:30";
"(app, client),type='parameters'\nline_star:311,line_end:311|char_star:30,char_end:43"[shape="box",fillcolor="white",style=filled];
"def test_modified_url_encoding(app, client):\n    class ModifiedRequest(flask.Request):\n        url_charset = 'euc-kr'\n\n    app.request_class = ModifiedRequest\n    app.url_map.charset = 'euc-kr'\n\n    @app.route('/')\n    def index():\n        return flask.request.args['foo']\n\n    rv = client.get('/', query_string={'foo': '정상처리'}, charset='euc-kr')\n    assert rv.status_code == 200\n    assert rv.get_data(as_text=True) == '정상처리',type='function_definition'\nline_star:311,line_end:324|char_star:0,char_end:54"->"(app, client),type='parameters'\nline_star:311,line_end:311|char_star:30,char_end:43";
"app,type='identifier'\nline_star:311,line_end:311|char_star:31,char_end:34"[shape="point",fillcolor="#121013",style=filled];
"(app, client),type='parameters'\nline_star:311,line_end:311|char_star:30,char_end:43"->"app,type='identifier'\nline_star:311,line_end:311|char_star:31,char_end:34";
"client,type='identifier'\nline_star:311,line_end:311|char_star:36,char_end:42"[shape="point",fillcolor="#121013",style=filled];
"(app, client),type='parameters'\nline_star:311,line_end:311|char_star:30,char_end:43"->"client,type='identifier'\nline_star:311,line_end:311|char_star:36,char_end:42";
"type='INFORMATION BLOCK'\nline_star:312,line_end:324|char_star:4,char_end:54"[shape="point",fillcolor="#121013",style=filled];
"def test_modified_url_encoding(app, client):\n    class ModifiedRequest(flask.Request):\n        url_charset = 'euc-kr'\n\n    app.request_class = ModifiedRequest\n    app.url_map.charset = 'euc-kr'\n\n    @app.route('/')\n    def index():\n        return flask.request.args['foo']\n\n    rv = client.get('/', query_string={'foo': '정상처리'}, charset='euc-kr')\n    assert rv.status_code == 200\n    assert rv.get_data(as_text=True) == '정상처리',type='function_definition'\nline_star:311,line_end:324|char_star:0,char_end:54"->"type='INFORMATION BLOCK'\nline_star:312,line_end:324|char_star:4,char_end:54";
"class ModifiedRequest(flask.Request):\n        url_charset = 'euc-kr',type='class_definition'\nline_star:312,line_end:313|char_star:4,char_end:30"[shape="box",fillcolor="#ffdf91",style=filled];
"type='INFORMATION BLOCK'\nline_star:312,line_end:324|char_star:4,char_end:54"->"class ModifiedRequest(flask.Request):\n        url_charset = 'euc-kr',type='class_definition'\nline_star:312,line_end:313|char_star:4,char_end:30";
"ModifiedRequest,type='identifier'\nline_star:312,line_end:312|char_star:10,char_end:25"[shape="point",fillcolor="#121013",style=filled];
"class ModifiedRequest(flask.Request):\n        url_charset = 'euc-kr',type='class_definition'\nline_star:312,line_end:313|char_star:4,char_end:30"->"ModifiedRequest,type='identifier'\nline_star:312,line_end:312|char_star:10,char_end:25";
"(flask.Request),type='argument_list'\nline_star:312,line_end:312|char_star:25,char_end:40"[shape="box",fillcolor="white",style=filled];
"class ModifiedRequest(flask.Request):\n        url_charset = 'euc-kr',type='class_definition'\nline_star:312,line_end:313|char_star:4,char_end:30"->"(flask.Request),type='argument_list'\nline_star:312,line_end:312|char_star:25,char_end:40";
"flask.Request,type='attribute'\nline_star:312,line_end:312|char_star:26,char_end:39"[shape="box",fillcolor="white",style=filled];
"(flask.Request),type='argument_list'\nline_star:312,line_end:312|char_star:25,char_end:40"->"flask.Request,type='attribute'\nline_star:312,line_end:312|char_star:26,char_end:39";
"flask,type='identifier'\nline_star:312,line_end:312|char_star:26,char_end:31"[shape="point",fillcolor="#121013",style=filled];
"flask.Request,type='attribute'\nline_star:312,line_end:312|char_star:26,char_end:39"->"flask,type='identifier'\nline_star:312,line_end:312|char_star:26,char_end:31";
"Request,type='identifier'\nline_star:312,line_end:312|char_star:32,char_end:39"[shape="point",fillcolor="#121013",style=filled];
"flask.Request,type='attribute'\nline_star:312,line_end:312|char_star:26,char_end:39"->"Request,type='identifier'\nline_star:312,line_end:312|char_star:32,char_end:39";
"type='INFORMATION BLOCK'\nline_star:313,line_end:313|char_star:8,char_end:30"[shape="point",fillcolor="#121013",style=filled];
"class ModifiedRequest(flask.Request):\n        url_charset = 'euc-kr',type='class_definition'\nline_star:312,line_end:313|char_star:4,char_end:30"->"type='INFORMATION BLOCK'\nline_star:313,line_end:313|char_star:8,char_end:30";
"@app.route('/')\n    def index():\n        return flask.request.args['foo'],type='decorated_definition'\nline_star:318,line_end:320|char_star:4,char_end:40"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:312,line_end:324|char_star:4,char_end:54"->"@app.route('/')\n    def index():\n        return flask.request.args['foo'],type='decorated_definition'\nline_star:318,line_end:320|char_star:4,char_end:40";
"@app.route('/'),type='decorator'\nline_star:318,line_end:318|char_star:4,char_end:19"[shape="box",fillcolor="white",style=filled];
"@app.route('/')\n    def index():\n        return flask.request.args['foo'],type='decorated_definition'\nline_star:318,line_end:320|char_star:4,char_end:40"->"@app.route('/'),type='decorator'\nline_star:318,line_end:318|char_star:4,char_end:19";
"def index():\n        return flask.request.args['foo'],type='function_definition'\nline_star:319,line_end:320|char_star:4,char_end:40"[shape="box",fillcolor="#cee6b4",style=filled];
"@app.route('/')\n    def index():\n        return flask.request.args['foo'],type='decorated_definition'\nline_star:318,line_end:320|char_star:4,char_end:40"->"def index():\n        return flask.request.args['foo'],type='function_definition'\nline_star:319,line_end:320|char_star:4,char_end:40";
"index,type='identifier'\nline_star:319,line_end:319|char_star:8,char_end:13"[shape="point",fillcolor="#121013",style=filled];
"def index():\n        return flask.request.args['foo'],type='function_definition'\nline_star:319,line_end:320|char_star:4,char_end:40"->"index,type='identifier'\nline_star:319,line_end:319|char_star:8,char_end:13";
"type='INFORMATION BLOCK'\nline_star:320,line_end:320|char_star:8,char_end:40"[shape="point",fillcolor="#121013",style=filled];
"def index():\n        return flask.request.args['foo'],type='function_definition'\nline_star:319,line_end:320|char_star:4,char_end:40"->"type='INFORMATION BLOCK'\nline_star:320,line_end:320|char_star:8,char_end:40";
"return flask.request.args['foo'],type='return_statement'\nline_star:320,line_end:320|char_star:8,char_end:40"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:320,line_end:320|char_star:8,char_end:40"->"return flask.request.args['foo'],type='return_statement'\nline_star:320,line_end:320|char_star:8,char_end:40";
"assert rv.status_code == 200,type='assert_statement'\nline_star:323,line_end:323|char_star:4,char_end:32"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:312,line_end:324|char_star:4,char_end:54"->"assert rv.status_code == 200,type='assert_statement'\nline_star:323,line_end:323|char_star:4,char_end:32";
"rv.status_code == 200,type='comparison_operator'\nline_star:323,line_end:323|char_star:11,char_end:32"[shape="box",fillcolor="white",style=filled];
"assert rv.status_code == 200,type='assert_statement'\nline_star:323,line_end:323|char_star:4,char_end:32"->"rv.status_code == 200,type='comparison_operator'\nline_star:323,line_end:323|char_star:11,char_end:32";
"rv.status_code,type='attribute'\nline_star:323,line_end:323|char_star:11,char_end:25"[shape="box",fillcolor="white",style=filled];
"rv.status_code == 200,type='comparison_operator'\nline_star:323,line_end:323|char_star:11,char_end:32"->"rv.status_code,type='attribute'\nline_star:323,line_end:323|char_star:11,char_end:25";
"rv,type='identifier'\nline_star:323,line_end:323|char_star:11,char_end:13"[shape="point",fillcolor="#121013",style=filled];
"rv.status_code,type='attribute'\nline_star:323,line_end:323|char_star:11,char_end:25"->"rv,type='identifier'\nline_star:323,line_end:323|char_star:11,char_end:13";
"status_code,type='identifier'\nline_star:323,line_end:323|char_star:14,char_end:25"[shape="point",fillcolor="#121013",style=filled];
"rv.status_code,type='attribute'\nline_star:323,line_end:323|char_star:11,char_end:25"->"status_code,type='identifier'\nline_star:323,line_end:323|char_star:14,char_end:25";
"assert rv.get_data(as_text=True) == '정상처리',type='assert_statement'\nline_star:324,line_end:324|char_star:4,char_end:54"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:312,line_end:324|char_star:4,char_end:54"->"assert rv.get_data(as_text=True) == '정상처리',type='assert_statement'\nline_star:324,line_end:324|char_star:4,char_end:54";
"rv.get_data(as_text=True) == '정상처리',type='comparison_operator'\nline_star:324,line_end:324|char_star:11,char_end:54"[shape="box",fillcolor="white",style=filled];
"assert rv.get_data(as_text=True) == '정상처리',type='assert_statement'\nline_star:324,line_end:324|char_star:4,char_end:54"->"rv.get_data(as_text=True) == '정상처리',type='comparison_operator'\nline_star:324,line_end:324|char_star:11,char_end:54";
"rv.get_data(as_text=True),type='call'\nline_star:324,line_end:324|char_star:11,char_end:36"[shape="box",fillcolor="white",style=filled];
"rv.get_data(as_text=True) == '정상처리',type='comparison_operator'\nline_star:324,line_end:324|char_star:11,char_end:54"->"rv.get_data(as_text=True),type='call'\nline_star:324,line_end:324|char_star:11,char_end:36";
"rv.get_data,type='attribute'\nline_star:324,line_end:324|char_star:11,char_end:22"[shape="box",fillcolor="white",style=filled];
"rv.get_data(as_text=True),type='call'\nline_star:324,line_end:324|char_star:11,char_end:36"->"rv.get_data,type='attribute'\nline_star:324,line_end:324|char_star:11,char_end:22";
"rv,type='identifier'\nline_star:324,line_end:324|char_star:11,char_end:13"[shape="point",fillcolor="#121013",style=filled];
"rv.get_data,type='attribute'\nline_star:324,line_end:324|char_star:11,char_end:22"->"rv,type='identifier'\nline_star:324,line_end:324|char_star:11,char_end:13";
"get_data,type='identifier'\nline_star:324,line_end:324|char_star:14,char_end:22"[shape="point",fillcolor="#121013",style=filled];
"rv.get_data,type='attribute'\nline_star:324,line_end:324|char_star:11,char_end:22"->"get_data,type='identifier'\nline_star:324,line_end:324|char_star:14,char_end:22";
"(as_text=True),type='argument_list'\nline_star:324,line_end:324|char_star:22,char_end:36"[shape="box",fillcolor="white",style=filled];
"rv.get_data(as_text=True),type='call'\nline_star:324,line_end:324|char_star:11,char_end:36"->"(as_text=True),type='argument_list'\nline_star:324,line_end:324|char_star:22,char_end:36";
"as_text=True,type='keyword_argument'\nline_star:324,line_end:324|char_star:23,char_end:35"[shape="box",fillcolor="white",style=filled];
"(as_text=True),type='argument_list'\nline_star:324,line_end:324|char_star:22,char_end:36"->"as_text=True,type='keyword_argument'\nline_star:324,line_end:324|char_star:23,char_end:35";
"as_text,type='identifier'\nline_star:324,line_end:324|char_star:23,char_end:30"[shape="point",fillcolor="#121013",style=filled];
"as_text=True,type='keyword_argument'\nline_star:324,line_end:324|char_star:23,char_end:35"->"as_text,type='identifier'\nline_star:324,line_end:324|char_star:23,char_end:30";
"def test_json_key_sorting(app, client):\n    app.debug = True\n\n    assert app.config['JSON_SORT_KEYS']\n    d = dict.fromkeys(range(20), 'foo')\n\n    @app.route('/')\n    def index():\n        return flask.jsonify(values=d)\n\n    rv = client.get('/')\n    lines = [x.strip() for x in rv.data.strip().decode('utf-8').splitlines()]\n    sorted_by_str = [\n        '{',\n        ''values': {',\n        ''0': 'foo',',\n        ''1': 'foo',',\n        ''10': 'foo',',\n        ''11': 'foo',',\n        ''12': 'foo',',\n        ''13': 'foo',',\n        ''14': 'foo',',\n        ''15': 'foo',',\n        ''16': 'foo',',\n        ''17': 'foo',',\n        ''18': 'foo',',\n        ''19': 'foo',',\n        ''2': 'foo',',\n        ''3': 'foo',',\n        ''4': 'foo',',\n        ''5': 'foo',',\n        ''6': 'foo',',\n        ''7': 'foo',',\n        ''8': 'foo',',\n        ''9': 'foo'',\n        '}',\n        '}',\n    ]\n    sorted_by_int = [\n        '{',\n        ''values': {',\n        ''0': 'foo',',\n        ''1': 'foo',',\n        ''2': 'foo',',\n        ''3': 'foo',',\n        ''4': 'foo',',\n        ''5': 'foo',',\n        ''6': 'foo',',\n        ''7': 'foo',',\n        ''8': 'foo',',\n        ''9': 'foo',',\n        ''10': 'foo',',\n        ''11': 'foo',',\n        ''12': 'foo',',\n        ''13': 'foo',',\n        ''14': 'foo',',\n        ''15': 'foo',',\n        ''16': 'foo',',\n        ''17': 'foo',',\n        ''18': 'foo',',\n        ''19': 'foo'',\n        '}',\n        '}',\n    ]\n\n    try:\n        assert lines == sorted_by_int\n    except AssertionError:\n        assert lines == sorted_by_str,type='function_definition'\nline_star:327,line_end:395|char_star:0,char_end:37"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_json_key_sorting(app, client):\n    app.debug = True\n\n    assert app.config['JSON_SORT_KEYS']\n    d = dict.fromkeys(range(20), 'foo')\n\n    @app.route('/')\n    def index():\n        return flask.jsonify(values=d)\n\n    rv = client.get('/')\n    lines = [x.strip() for x in rv.data.strip().decode('utf-8').splitlines()]\n    sorted_by_str = [\n        '{',\n        ''values': {',\n        ''0': 'foo',',\n        ''1': 'foo',',\n        ''10': 'foo',',\n        ''11': 'foo',',\n        ''12': 'foo',',\n        ''13': 'foo',',\n        ''14': 'foo',',\n        ''15': 'foo',',\n        ''16': 'foo',',\n        ''17': 'foo',',\n        ''18': 'foo',',\n        ''19': 'foo',',\n        ''2': 'foo',',\n        ''3': 'foo',',\n        ''4': 'foo',',\n        ''5': 'foo',',\n        ''6': 'foo',',\n        ''7': 'foo',',\n        ''8': 'foo',',\n        ''9': 'foo'',\n        '}',\n        '}',\n    ]\n    sorted_by_int = [\n        '{',\n        ''values': {',\n        ''0': 'foo',',\n        ''1': 'foo',',\n        ''2': 'foo',',\n        ''3': 'foo',',\n        ''4': 'foo',',\n        ''5': 'foo',',\n        ''6': 'foo',',\n        ''7': 'foo',',\n        ''8': 'foo',',\n        ''9': 'foo',',\n        ''10': 'foo',',\n        ''11': 'foo',',\n        ''12': 'foo',',\n        ''13': 'foo',',\n        ''14': 'foo',',\n        ''15': 'foo',',\n        ''16': 'foo',',\n        ''17': 'foo',',\n        ''18': 'foo',',\n        ''19': 'foo'',\n        '}',\n        '}',\n    ]\n\n    try:\n        assert lines == sorted_by_int\n    except AssertionError:\n        assert lines == sorted_by_str,type='function_definition'\nline_star:327,line_end:395|char_star:0,char_end:37";
"test_json_key_sorting,type='identifier'\nline_star:327,line_end:327|char_star:4,char_end:25"[shape="point",fillcolor="#121013",style=filled];
"def test_json_key_sorting(app, client):\n    app.debug = True\n\n    assert app.config['JSON_SORT_KEYS']\n    d = dict.fromkeys(range(20), 'foo')\n\n    @app.route('/')\n    def index():\n        return flask.jsonify(values=d)\n\n    rv = client.get('/')\n    lines = [x.strip() for x in rv.data.strip().decode('utf-8').splitlines()]\n    sorted_by_str = [\n        '{',\n        ''values': {',\n        ''0': 'foo',',\n        ''1': 'foo',',\n        ''10': 'foo',',\n        ''11': 'foo',',\n        ''12': 'foo',',\n        ''13': 'foo',',\n        ''14': 'foo',',\n        ''15': 'foo',',\n        ''16': 'foo',',\n        ''17': 'foo',',\n        ''18': 'foo',',\n        ''19': 'foo',',\n        ''2': 'foo',',\n        ''3': 'foo',',\n        ''4': 'foo',',\n        ''5': 'foo',',\n        ''6': 'foo',',\n        ''7': 'foo',',\n        ''8': 'foo',',\n        ''9': 'foo'',\n        '}',\n        '}',\n    ]\n    sorted_by_int = [\n        '{',\n        ''values': {',\n        ''0': 'foo',',\n        ''1': 'foo',',\n        ''2': 'foo',',\n        ''3': 'foo',',\n        ''4': 'foo',',\n        ''5': 'foo',',\n        ''6': 'foo',',\n        ''7': 'foo',',\n        ''8': 'foo',',\n        ''9': 'foo',',\n        ''10': 'foo',',\n        ''11': 'foo',',\n        ''12': 'foo',',\n        ''13': 'foo',',\n        ''14': 'foo',',\n        ''15': 'foo',',\n        ''16': 'foo',',\n        ''17': 'foo',',\n        ''18': 'foo',',\n        ''19': 'foo'',\n        '}',\n        '}',\n    ]\n\n    try:\n        assert lines == sorted_by_int\n    except AssertionError:\n        assert lines == sorted_by_str,type='function_definition'\nline_star:327,line_end:395|char_star:0,char_end:37"->"test_json_key_sorting,type='identifier'\nline_star:327,line_end:327|char_star:4,char_end:25";
"(app, client),type='parameters'\nline_star:327,line_end:327|char_star:25,char_end:38"[shape="box",fillcolor="white",style=filled];
"def test_json_key_sorting(app, client):\n    app.debug = True\n\n    assert app.config['JSON_SORT_KEYS']\n    d = dict.fromkeys(range(20), 'foo')\n\n    @app.route('/')\n    def index():\n        return flask.jsonify(values=d)\n\n    rv = client.get('/')\n    lines = [x.strip() for x in rv.data.strip().decode('utf-8').splitlines()]\n    sorted_by_str = [\n        '{',\n        ''values': {',\n        ''0': 'foo',',\n        ''1': 'foo',',\n        ''10': 'foo',',\n        ''11': 'foo',',\n        ''12': 'foo',',\n        ''13': 'foo',',\n        ''14': 'foo',',\n        ''15': 'foo',',\n        ''16': 'foo',',\n        ''17': 'foo',',\n        ''18': 'foo',',\n        ''19': 'foo',',\n        ''2': 'foo',',\n        ''3': 'foo',',\n        ''4': 'foo',',\n        ''5': 'foo',',\n        ''6': 'foo',',\n        ''7': 'foo',',\n        ''8': 'foo',',\n        ''9': 'foo'',\n        '}',\n        '}',\n    ]\n    sorted_by_int = [\n        '{',\n        ''values': {',\n        ''0': 'foo',',\n        ''1': 'foo',',\n        ''2': 'foo',',\n        ''3': 'foo',',\n        ''4': 'foo',',\n        ''5': 'foo',',\n        ''6': 'foo',',\n        ''7': 'foo',',\n        ''8': 'foo',',\n        ''9': 'foo',',\n        ''10': 'foo',',\n        ''11': 'foo',',\n        ''12': 'foo',',\n        ''13': 'foo',',\n        ''14': 'foo',',\n        ''15': 'foo',',\n        ''16': 'foo',',\n        ''17': 'foo',',\n        ''18': 'foo',',\n        ''19': 'foo'',\n        '}',\n        '}',\n    ]\n\n    try:\n        assert lines == sorted_by_int\n    except AssertionError:\n        assert lines == sorted_by_str,type='function_definition'\nline_star:327,line_end:395|char_star:0,char_end:37"->"(app, client),type='parameters'\nline_star:327,line_end:327|char_star:25,char_end:38";
"app,type='identifier'\nline_star:327,line_end:327|char_star:26,char_end:29"[shape="point",fillcolor="#121013",style=filled];
"(app, client),type='parameters'\nline_star:327,line_end:327|char_star:25,char_end:38"->"app,type='identifier'\nline_star:327,line_end:327|char_star:26,char_end:29";
"client,type='identifier'\nline_star:327,line_end:327|char_star:31,char_end:37"[shape="point",fillcolor="#121013",style=filled];
"(app, client),type='parameters'\nline_star:327,line_end:327|char_star:25,char_end:38"->"client,type='identifier'\nline_star:327,line_end:327|char_star:31,char_end:37";
"type='INFORMATION BLOCK'\nline_star:328,line_end:395|char_star:4,char_end:37"[shape="point",fillcolor="#121013",style=filled];
"def test_json_key_sorting(app, client):\n    app.debug = True\n\n    assert app.config['JSON_SORT_KEYS']\n    d = dict.fromkeys(range(20), 'foo')\n\n    @app.route('/')\n    def index():\n        return flask.jsonify(values=d)\n\n    rv = client.get('/')\n    lines = [x.strip() for x in rv.data.strip().decode('utf-8').splitlines()]\n    sorted_by_str = [\n        '{',\n        ''values': {',\n        ''0': 'foo',',\n        ''1': 'foo',',\n        ''10': 'foo',',\n        ''11': 'foo',',\n        ''12': 'foo',',\n        ''13': 'foo',',\n        ''14': 'foo',',\n        ''15': 'foo',',\n        ''16': 'foo',',\n        ''17': 'foo',',\n        ''18': 'foo',',\n        ''19': 'foo',',\n        ''2': 'foo',',\n        ''3': 'foo',',\n        ''4': 'foo',',\n        ''5': 'foo',',\n        ''6': 'foo',',\n        ''7': 'foo',',\n        ''8': 'foo',',\n        ''9': 'foo'',\n        '}',\n        '}',\n    ]\n    sorted_by_int = [\n        '{',\n        ''values': {',\n        ''0': 'foo',',\n        ''1': 'foo',',\n        ''2': 'foo',',\n        ''3': 'foo',',\n        ''4': 'foo',',\n        ''5': 'foo',',\n        ''6': 'foo',',\n        ''7': 'foo',',\n        ''8': 'foo',',\n        ''9': 'foo',',\n        ''10': 'foo',',\n        ''11': 'foo',',\n        ''12': 'foo',',\n        ''13': 'foo',',\n        ''14': 'foo',',\n        ''15': 'foo',',\n        ''16': 'foo',',\n        ''17': 'foo',',\n        ''18': 'foo',',\n        ''19': 'foo'',\n        '}',\n        '}',\n    ]\n\n    try:\n        assert lines == sorted_by_int\n    except AssertionError:\n        assert lines == sorted_by_str,type='function_definition'\nline_star:327,line_end:395|char_star:0,char_end:37"->"type='INFORMATION BLOCK'\nline_star:328,line_end:395|char_star:4,char_end:37";
"assert app.config['JSON_SORT_KEYS'],type='assert_statement'\nline_star:330,line_end:330|char_star:4,char_end:39"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:328,line_end:395|char_star:4,char_end:37"->"assert app.config['JSON_SORT_KEYS'],type='assert_statement'\nline_star:330,line_end:330|char_star:4,char_end:39";
"app.config['JSON_SORT_KEYS'],type='subscript'\nline_star:330,line_end:330|char_star:11,char_end:39"[shape="box",fillcolor="white",style=filled];
"assert app.config['JSON_SORT_KEYS'],type='assert_statement'\nline_star:330,line_end:330|char_star:4,char_end:39"->"app.config['JSON_SORT_KEYS'],type='subscript'\nline_star:330,line_end:330|char_star:11,char_end:39";
"app.config,type='attribute'\nline_star:330,line_end:330|char_star:11,char_end:21"[shape="box",fillcolor="white",style=filled];
"app.config['JSON_SORT_KEYS'],type='subscript'\nline_star:330,line_end:330|char_star:11,char_end:39"->"app.config,type='attribute'\nline_star:330,line_end:330|char_star:11,char_end:21";
"app,type='identifier'\nline_star:330,line_end:330|char_star:11,char_end:14"[shape="point",fillcolor="#121013",style=filled];
"app.config,type='attribute'\nline_star:330,line_end:330|char_star:11,char_end:21"->"app,type='identifier'\nline_star:330,line_end:330|char_star:11,char_end:14";
"config,type='identifier'\nline_star:330,line_end:330|char_star:15,char_end:21"[shape="point",fillcolor="#121013",style=filled];
"app.config,type='attribute'\nline_star:330,line_end:330|char_star:11,char_end:21"->"config,type='identifier'\nline_star:330,line_end:330|char_star:15,char_end:21";
"@app.route('/')\n    def index():\n        return flask.jsonify(values=d),type='decorated_definition'\nline_star:333,line_end:335|char_star:4,char_end:38"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:328,line_end:395|char_star:4,char_end:37"->"@app.route('/')\n    def index():\n        return flask.jsonify(values=d),type='decorated_definition'\nline_star:333,line_end:335|char_star:4,char_end:38";
"@app.route('/'),type='decorator'\nline_star:333,line_end:333|char_star:4,char_end:19"[shape="box",fillcolor="white",style=filled];
"@app.route('/')\n    def index():\n        return flask.jsonify(values=d),type='decorated_definition'\nline_star:333,line_end:335|char_star:4,char_end:38"->"@app.route('/'),type='decorator'\nline_star:333,line_end:333|char_star:4,char_end:19";
"def index():\n        return flask.jsonify(values=d),type='function_definition'\nline_star:334,line_end:335|char_star:4,char_end:38"[shape="box",fillcolor="#cee6b4",style=filled];
"@app.route('/')\n    def index():\n        return flask.jsonify(values=d),type='decorated_definition'\nline_star:333,line_end:335|char_star:4,char_end:38"->"def index():\n        return flask.jsonify(values=d),type='function_definition'\nline_star:334,line_end:335|char_star:4,char_end:38";
"index,type='identifier'\nline_star:334,line_end:334|char_star:8,char_end:13"[shape="point",fillcolor="#121013",style=filled];
"def index():\n        return flask.jsonify(values=d),type='function_definition'\nline_star:334,line_end:335|char_star:4,char_end:38"->"index,type='identifier'\nline_star:334,line_end:334|char_star:8,char_end:13";
"type='INFORMATION BLOCK'\nline_star:335,line_end:335|char_star:8,char_end:38"[shape="point",fillcolor="#121013",style=filled];
"def index():\n        return flask.jsonify(values=d),type='function_definition'\nline_star:334,line_end:335|char_star:4,char_end:38"->"type='INFORMATION BLOCK'\nline_star:335,line_end:335|char_star:8,char_end:38";
"return flask.jsonify(values=d),type='return_statement'\nline_star:335,line_end:335|char_star:8,char_end:38"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:335,line_end:335|char_star:8,char_end:38"->"return flask.jsonify(values=d),type='return_statement'\nline_star:335,line_end:335|char_star:8,char_end:38";
"try:\n        assert lines == sorted_by_int\n    except AssertionError:\n        assert lines == sorted_by_str,type='try_statement'\nline_star:392,line_end:395|char_star:4,char_end:37"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:328,line_end:395|char_star:4,char_end:37"->"try:\n        assert lines == sorted_by_int\n    except AssertionError:\n        assert lines == sorted_by_str,type='try_statement'\nline_star:392,line_end:395|char_star:4,char_end:37";
"try,type='try'\nline_star:392,line_end:392|char_star:4,char_end:7"[shape="box",fillcolor="white",style=filled];
"try:\n        assert lines == sorted_by_int\n    except AssertionError:\n        assert lines == sorted_by_str,type='try_statement'\nline_star:392,line_end:395|char_star:4,char_end:37"->"try,type='try'\nline_star:392,line_end:392|char_star:4,char_end:7";
"type='INFORMATION BLOCK'\nline_star:393,line_end:393|char_star:8,char_end:37"[shape="point",fillcolor="#121013",style=filled];
"try:\n        assert lines == sorted_by_int\n    except AssertionError:\n        assert lines == sorted_by_str,type='try_statement'\nline_star:392,line_end:395|char_star:4,char_end:37"->"type='INFORMATION BLOCK'\nline_star:393,line_end:393|char_star:8,char_end:37";
"assert lines == sorted_by_int,type='assert_statement'\nline_star:393,line_end:393|char_star:8,char_end:37"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:393,line_end:393|char_star:8,char_end:37"->"assert lines == sorted_by_int,type='assert_statement'\nline_star:393,line_end:393|char_star:8,char_end:37";
"lines == sorted_by_int,type='comparison_operator'\nline_star:393,line_end:393|char_star:15,char_end:37"[shape="box",fillcolor="white",style=filled];
"assert lines == sorted_by_int,type='assert_statement'\nline_star:393,line_end:393|char_star:8,char_end:37"->"lines == sorted_by_int,type='comparison_operator'\nline_star:393,line_end:393|char_star:15,char_end:37";
"lines,type='identifier'\nline_star:393,line_end:393|char_star:15,char_end:20"[shape="point",fillcolor="#121013",style=filled];
"lines == sorted_by_int,type='comparison_operator'\nline_star:393,line_end:393|char_star:15,char_end:37"->"lines,type='identifier'\nline_star:393,line_end:393|char_star:15,char_end:20";
"sorted_by_int,type='identifier'\nline_star:393,line_end:393|char_star:24,char_end:37"[shape="point",fillcolor="#121013",style=filled];
"lines == sorted_by_int,type='comparison_operator'\nline_star:393,line_end:393|char_star:15,char_end:37"->"sorted_by_int,type='identifier'\nline_star:393,line_end:393|char_star:24,char_end:37";
"except AssertionError:\n        assert lines == sorted_by_str,type='except_clause'\nline_star:394,line_end:395|char_star:4,char_end:37"[shape="box",fillcolor="white",style=filled];
"try:\n        assert lines == sorted_by_int\n    except AssertionError:\n        assert lines == sorted_by_str,type='try_statement'\nline_star:392,line_end:395|char_star:4,char_end:37"->"except AssertionError:\n        assert lines == sorted_by_str,type='except_clause'\nline_star:394,line_end:395|char_star:4,char_end:37";
"except,type='except'\nline_star:394,line_end:394|char_star:4,char_end:10"[shape="box",fillcolor="white",style=filled];
"except AssertionError:\n        assert lines == sorted_by_str,type='except_clause'\nline_star:394,line_end:395|char_star:4,char_end:37"->"except,type='except'\nline_star:394,line_end:394|char_star:4,char_end:10";
"AssertionError,type='identifier'\nline_star:394,line_end:394|char_star:11,char_end:25"[shape="point",fillcolor="#121013",style=filled];
"except AssertionError:\n        assert lines == sorted_by_str,type='except_clause'\nline_star:394,line_end:395|char_star:4,char_end:37"->"AssertionError,type='identifier'\nline_star:394,line_end:394|char_star:11,char_end:25";
"type='INFORMATION BLOCK'\nline_star:395,line_end:395|char_star:8,char_end:37"[shape="point",fillcolor="#121013",style=filled];
"except AssertionError:\n        assert lines == sorted_by_str,type='except_clause'\nline_star:394,line_end:395|char_star:4,char_end:37"->"type='INFORMATION BLOCK'\nline_star:395,line_end:395|char_star:8,char_end:37";
"assert lines == sorted_by_str,type='assert_statement'\nline_star:395,line_end:395|char_star:8,char_end:37"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:395,line_end:395|char_star:8,char_end:37"->"assert lines == sorted_by_str,type='assert_statement'\nline_star:395,line_end:395|char_star:8,char_end:37";
"lines == sorted_by_str,type='comparison_operator'\nline_star:395,line_end:395|char_star:15,char_end:37"[shape="box",fillcolor="white",style=filled];
"assert lines == sorted_by_str,type='assert_statement'\nline_star:395,line_end:395|char_star:8,char_end:37"->"lines == sorted_by_str,type='comparison_operator'\nline_star:395,line_end:395|char_star:15,char_end:37";
"lines,type='identifier'\nline_star:395,line_end:395|char_star:15,char_end:20"[shape="point",fillcolor="#121013",style=filled];
"lines == sorted_by_str,type='comparison_operator'\nline_star:395,line_end:395|char_star:15,char_end:37"->"lines,type='identifier'\nline_star:395,line_end:395|char_star:15,char_end:20";
"sorted_by_str,type='identifier'\nline_star:395,line_end:395|char_star:24,char_end:37"[shape="point",fillcolor="#121013",style=filled];
"lines == sorted_by_str,type='comparison_operator'\nline_star:395,line_end:395|char_star:15,char_end:37"->"sorted_by_str,type='identifier'\nline_star:395,line_end:395|char_star:24,char_end:37";
"def test_html_method():\n    class ObjectWithHTML:\n        def __html__(self):\n            return '<p>test</p>'\n\n    result = json.dumps(ObjectWithHTML())\n    assert result == ''<p>test</p>'',type='function_definition'\nline_star:398,line_end:404|char_star:0,char_end:36"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def test_html_method():\n    class ObjectWithHTML:\n        def __html__(self):\n            return '<p>test</p>'\n\n    result = json.dumps(ObjectWithHTML())\n    assert result == ''<p>test</p>'',type='function_definition'\nline_star:398,line_end:404|char_star:0,char_end:36";
"test_html_method,type='identifier'\nline_star:398,line_end:398|char_star:4,char_end:20"[shape="point",fillcolor="#121013",style=filled];
"def test_html_method():\n    class ObjectWithHTML:\n        def __html__(self):\n            return '<p>test</p>'\n\n    result = json.dumps(ObjectWithHTML())\n    assert result == ''<p>test</p>'',type='function_definition'\nline_star:398,line_end:404|char_star:0,char_end:36"->"test_html_method,type='identifier'\nline_star:398,line_end:398|char_star:4,char_end:20";
"type='INFORMATION BLOCK'\nline_star:399,line_end:404|char_star:4,char_end:36"[shape="point",fillcolor="#121013",style=filled];
"def test_html_method():\n    class ObjectWithHTML:\n        def __html__(self):\n            return '<p>test</p>'\n\n    result = json.dumps(ObjectWithHTML())\n    assert result == ''<p>test</p>'',type='function_definition'\nline_star:398,line_end:404|char_star:0,char_end:36"->"type='INFORMATION BLOCK'\nline_star:399,line_end:404|char_star:4,char_end:36";
"class ObjectWithHTML:\n        def __html__(self):\n            return '<p>test</p>',type='class_definition'\nline_star:399,line_end:401|char_star:4,char_end:32"[shape="box",fillcolor="#ffdf91",style=filled];
"type='INFORMATION BLOCK'\nline_star:399,line_end:404|char_star:4,char_end:36"->"class ObjectWithHTML:\n        def __html__(self):\n            return '<p>test</p>',type='class_definition'\nline_star:399,line_end:401|char_star:4,char_end:32";
"ObjectWithHTML,type='identifier'\nline_star:399,line_end:399|char_star:10,char_end:24"[shape="point",fillcolor="#121013",style=filled];
"class ObjectWithHTML:\n        def __html__(self):\n            return '<p>test</p>',type='class_definition'\nline_star:399,line_end:401|char_star:4,char_end:32"->"ObjectWithHTML,type='identifier'\nline_star:399,line_end:399|char_star:10,char_end:24";
"type='INFORMATION BLOCK'\nline_star:400,line_end:401|char_star:8,char_end:32"[shape="point",fillcolor="#121013",style=filled];
"class ObjectWithHTML:\n        def __html__(self):\n            return '<p>test</p>',type='class_definition'\nline_star:399,line_end:401|char_star:4,char_end:32"->"type='INFORMATION BLOCK'\nline_star:400,line_end:401|char_star:8,char_end:32";
"def __html__(self):\n            return '<p>test</p>',type='function_definition'\nline_star:400,line_end:401|char_star:8,char_end:32"[shape="box",fillcolor="#cee6b4",style=filled];
"type='INFORMATION BLOCK'\nline_star:400,line_end:401|char_star:8,char_end:32"->"def __html__(self):\n            return '<p>test</p>',type='function_definition'\nline_star:400,line_end:401|char_star:8,char_end:32";
"__html__,type='identifier'\nline_star:400,line_end:400|char_star:12,char_end:20"[shape="point",fillcolor="#121013",style=filled];
"def __html__(self):\n            return '<p>test</p>',type='function_definition'\nline_star:400,line_end:401|char_star:8,char_end:32"->"__html__,type='identifier'\nline_star:400,line_end:400|char_star:12,char_end:20";
"(self),type='parameters'\nline_star:400,line_end:400|char_star:20,char_end:26"[shape="box",fillcolor="white",style=filled];
"def __html__(self):\n            return '<p>test</p>',type='function_definition'\nline_star:400,line_end:401|char_star:8,char_end:32"->"(self),type='parameters'\nline_star:400,line_end:400|char_star:20,char_end:26";
"self,type='identifier'\nline_star:400,line_end:400|char_star:21,char_end:25"[shape="point",fillcolor="#121013",style=filled];
"(self),type='parameters'\nline_star:400,line_end:400|char_star:20,char_end:26"->"self,type='identifier'\nline_star:400,line_end:400|char_star:21,char_end:25";
"type='INFORMATION BLOCK'\nline_star:401,line_end:401|char_star:12,char_end:32"[shape="point",fillcolor="#121013",style=filled];
"def __html__(self):\n            return '<p>test</p>',type='function_definition'\nline_star:400,line_end:401|char_star:8,char_end:32"->"type='INFORMATION BLOCK'\nline_star:401,line_end:401|char_star:12,char_end:32";
"return '<p>test</p>',type='return_statement'\nline_star:401,line_end:401|char_star:12,char_end:32"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:401,line_end:401|char_star:12,char_end:32"->"return '<p>test</p>',type='return_statement'\nline_star:401,line_end:401|char_star:12,char_end:32";
"assert result == ''<p>test</p>'',type='assert_statement'\nline_star:404,line_end:404|char_star:4,char_end:36"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:399,line_end:404|char_star:4,char_end:36"->"assert result == ''<p>test</p>'',type='assert_statement'\nline_star:404,line_end:404|char_star:4,char_end:36";
"result == ''<p>test</p>'',type='comparison_operator'\nline_star:404,line_end:404|char_star:11,char_end:36"[shape="box",fillcolor="white",style=filled];
"assert result == ''<p>test</p>'',type='assert_statement'\nline_star:404,line_end:404|char_star:4,char_end:36"->"result == ''<p>test</p>'',type='comparison_operator'\nline_star:404,line_end:404|char_star:11,char_end:36";
"result,type='identifier'\nline_star:404,line_end:404|char_star:11,char_end:17"[shape="point",fillcolor="#121013",style=filled];
"result == ''<p>test</p>'',type='comparison_operator'\nline_star:404,line_end:404|char_star:11,char_end:36"->"result,type='identifier'\nline_star:404,line_end:404|char_star:11,char_end:17";
"import datetime\nimport io\nimport uuid\nimport pytest\nfrom werkzeug.http import http_date\nimport flask\nfrom flask import json\nimport codec"[shape="box",fillcolor="#f48b29",style=filled];
"MODULE"->"import datetime\nimport io\nimport uuid\nimport pytest\nfrom werkzeug.http import http_date\nimport flask\nfrom flask import json\nimport codec"
}
